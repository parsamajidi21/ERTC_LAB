
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c74  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08008e74  08008e74  00018e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f58  08008f58  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f60  08008f60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f60  08008f60  00018f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000078  08008fe0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  08008fe0  00020820  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018672  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c02  00000000  00000000  00038718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003c808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8ff  00000000  00000000  0003dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b433  00000000  00000000  000684b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010777c  00000000  00000000  000838ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000609c  00000000  00000000  0018b0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08008e5c 	.word	0x08008e5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08008e5c 	.word	0x08008e5c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000600:	2301      	movs	r3, #1
 8000602:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8000604:	e025      	b.n	8000652 <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <cobsEncode+0x3e>
            FinishBlock(code);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	7efa      	ldrb	r2, [r7, #27]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	2301      	movs	r3, #1
 800061e:	76fb      	strb	r3, [r7, #27]
 8000620:	e014      	b.n	800064c <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 800062e:	7efb      	ldrb	r3, [r7, #27]
 8000630:	3301      	adds	r3, #1
 8000632:	76fb      	strb	r3, [r7, #27]
 8000634:	7efb      	ldrb	r3, [r7, #27]
 8000636:	2bff      	cmp	r3, #255	; 0xff
 8000638:	d108      	bne.n	800064c <cobsEncode+0x68>
                FinishBlock(code);
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	7efa      	ldrb	r2, [r7, #27]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	2301      	movs	r3, #1
 800064a:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3d5      	bcc.n	8000606 <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	7efa      	ldrb	r2, [r7, #27]
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	2301      	movs	r3, #1
 800066a:	76fb      	strb	r3, [r7, #27]
}
 800066c:	bf00      	nop
 800066e:	3724      	adds	r7, #36	; 0x24
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01c      	beq.n	80006c6 <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3321      	adds	r3, #33	; 0x21
 8000690:	461a      	mov	r2, r3
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff ffa5 	bl	80005e4 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3302      	adds	r3, #2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	f006 fe9d 	bl	80073fc <HAL_UART_Transmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e000      	b.n	80006c8 <ertc_dlog_send+0x50>
	}

	return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c59      	adds	r1, r3, #1
 80006e2:	2303      	movs	r3, #3
 80006e4:	2201      	movs	r2, #1
 80006e6:	f006 ff0c 	bl	8007502 <HAL_UART_Receive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d112      	bne.n	8000716 <ertc_dlog_update+0x46>
		switch (logger->rxbuff[0]) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b41      	cmp	r3, #65	; 0x41
 80006f6:	d002      	beq.n	80006fe <ertc_dlog_update+0x2e>
 80006f8:	2b42      	cmp	r3, #66	; 0x42
 80006fa:	d004      	beq.n	8000706 <ertc_dlog_update+0x36>
 80006fc:	e007      	b.n	800070e <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				break;
 8000704:	e008      	b.n	8000718 <ertc_dlog_update+0x48>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
				break;
 800070c:	e004      	b.n	8000718 <ertc_dlog_update+0x48>
			default:
				logger->tx_enable = false;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e000      	b.n	8000718 <ertc_dlog_update+0x48>
		}
	}
 8000716:	bf00      	nop
	return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	0000      	movs	r0, r0
 8000724:	0000      	movs	r0, r0
	...

08000728 <HAL_TIM_PeriodElapsedCallback>:
	float x1, x2 , y1, y2;
} data;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a9e      	ldr	r2, [pc, #632]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000736:	4293      	cmp	r3, r2
 8000738:	f040 8129 	bne.w	800098e <HAL_TIM_PeriodElapsedCallback+0x266>

		uint32_t TIM3_CurrentCount , TIM4_CurrentCount;
		int32_t TIM3_DiffCount , TIM4_DiffCount;
		static uint32_t TIM3_PreviousCount = 0, TIM4_PreviousCount = 0;

		TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 800073c:	4b9d      	ldr	r3, [pc, #628]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	61fb      	str	r3, [r7, #28]
		TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 8000744:	4b9c      	ldr	r3, [pc, #624]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	61bb      	str	r3, [r7, #24]


		/*  evaluate increment of TIM3 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 800074c:	4b99      	ldr	r3, [pc, #612]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f003 0310 	and.w	r3, r3, #16
 8000756:	2b10      	cmp	r3, #16
 8000758:	d112      	bne.n	8000780 <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			/* check for counter underflow */
			if (TIM3_CurrentCount <= TIM3_PreviousCount)
 800075a:	4b98      	ldr	r3, [pc, #608]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	69fa      	ldr	r2, [r7, #28]
 8000760:	429a      	cmp	r2, r3
 8000762:	d805      	bhi.n	8000770 <HAL_TIM_PeriodElapsedCallback+0x48>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000764:	4b95      	ldr	r3, [pc, #596]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	69fa      	ldr	r2, [r7, #28]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
 800076e:	e019      	b.n	80007a4 <HAL_TIM_PeriodElapsedCallback+0x7c>
			else
				TIM3_DiffCount = -((TIM3_ARR_VALUE+1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 8000770:	4b92      	ldr	r3, [pc, #584]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	69fa      	ldr	r2, [r7, #28]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
 800077e:	e011      	b.n	80007a4 <HAL_TIM_PeriodElapsedCallback+0x7c>
		}
		else
		{
		/* check for counter overflow */
			if (TIM3_CurrentCount >= TIM3_PreviousCount)
 8000780:	4b8e      	ldr	r3, [pc, #568]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	69fa      	ldr	r2, [r7, #28]
 8000786:	429a      	cmp	r2, r3
 8000788:	d305      	bcc.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x6e>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 800078a:	4b8c      	ldr	r3, [pc, #560]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	69fa      	ldr	r2, [r7, #28]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
 8000794:	e006      	b.n	80007a4 <HAL_TIM_PeriodElapsedCallback+0x7c>
			else
				TIM3_DiffCount = ((TIM3_ARR_VALUE+1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 8000796:	4b89      	ldr	r3, [pc, #548]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	69fa      	ldr	r2, [r7, #28]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
		}

		TIM3_PreviousCount = TIM3_CurrentCount;
 80007a4:	4a85      	ldr	r2, [pc, #532]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	6013      	str	r3, [r2, #0]
	    // 3. compute the motor speed, in [rpm] for example

		float current_rpm_1 = ((float)TIM3_DiffCount/(2.0*1920.0))*(60.0/TS );
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	ee07 3a90 	vmov	s15, r3
 80007b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007b8:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8000998 <HAL_TIM_PeriodElapsedCallback+0x270>
 80007bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007c0:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80009a0 <HAL_TIM_PeriodElapsedCallback+0x278>
 80007c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007cc:	edc7 7a05 	vstr	s15, [r7, #20]
	    tracking_error_1 = reference_rpm_R - current_rpm_1;
 80007d0:	4b7b      	ldr	r3, [pc, #492]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007d2:	ed93 7a00 	vldr	s14, [r3]
 80007d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80007da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007de:	4b79      	ldr	r3, [pc, #484]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80007e0:	edc3 7a00 	vstr	s15, [r3]




		/*  evaluate increment of TIM4 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 80007e4:	4b74      	ldr	r3, [pc, #464]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	2b10      	cmp	r3, #16
 80007f0:	d112      	bne.n	8000818 <HAL_TIM_PeriodElapsedCallback+0xf0>
		{
			/* check for counter underflow */
			if (TIM4_CurrentCount <= TIM4_PreviousCount)
 80007f2:	4b75      	ldr	r3, [pc, #468]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d805      	bhi.n	8000808 <HAL_TIM_PeriodElapsedCallback+0xe0>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 80007fc:	4b72      	ldr	r3, [pc, #456]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	69ba      	ldr	r2, [r7, #24]
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	e019      	b.n	800083c <HAL_TIM_PeriodElapsedCallback+0x114>
			else
				TIM4_DiffCount = -((TIM4_ARR_VALUE+1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 8000808:	4b6f      	ldr	r3, [pc, #444]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000814:	623b      	str	r3, [r7, #32]
 8000816:	e011      	b.n	800083c <HAL_TIM_PeriodElapsedCallback+0x114>
		}
		else
		{
		/* check for counter overflow */
			if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8000818:	4b6b      	ldr	r3, [pc, #428]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	429a      	cmp	r2, r3
 8000820:	d305      	bcc.n	800082e <HAL_TIM_PeriodElapsedCallback+0x106>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000822:	4b69      	ldr	r3, [pc, #420]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	e006      	b.n	800083c <HAL_TIM_PeriodElapsedCallback+0x114>
			else
				TIM4_DiffCount = ((TIM4_ARR_VALUE+1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 800082e:	4b66      	ldr	r3, [pc, #408]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 800083a:	623b      	str	r3, [r7, #32]
		}

		TIM4_PreviousCount = TIM4_CurrentCount;
 800083c:	4a62      	ldr	r2, [pc, #392]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	6013      	str	r3, [r2, #0]

		float current_rpm_2 = ((float)TIM4_DiffCount/(2.0*1920.0))*(60.0/TS );
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	ee07 3a90 	vmov	s15, r3
 8000848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800084c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000850:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8000998 <HAL_TIM_PeriodElapsedCallback+0x270>
 8000854:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000858:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80009a0 <HAL_TIM_PeriodElapsedCallback+0x278>
 800085c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000860:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000864:	edc7 7a04 	vstr	s15, [r7, #16]
	    tracking_error_2 = reference_rpm_L - current_rpm_2;
 8000868:	4b58      	ldr	r3, [pc, #352]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800086a:	ed93 7a00 	vldr	s14, [r3]
 800086e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000876:	4b56      	ldr	r3, [pc, #344]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000878:	edc3 7a00 	vstr	s15, [r3]
	    /* 4. compute the tracking error
	    * 5. compute the proportional term
	    * 6. compute the integral term (simplest way is to use forward Euler method) * u_int=u_int+Ki*TS*err
	    * 7. calculate the PI signal and set the pwm of the motor properly
	    */
	     controller_return_1 = PI_controller(tracking_error_1);
 800087c:	4b51      	ldr	r3, [pc, #324]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800087e:	edd3 7a00 	vldr	s15, [r3]
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	f000 f8b3 	bl	80009f0 <PI_controller>
 800088a:	eef0 7a40 	vmov.f32	s15, s0
 800088e:	4b51      	ldr	r3, [pc, #324]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000890:	edc3 7a00 	vstr	s15, [r3]
	     controller_return_2 = PI_controller(tracking_error_2);
 8000894:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	eeb0 0a67 	vmov.f32	s0, s15
 800089e:	f000 f8a7 	bl	80009f0 <PI_controller>
 80008a2:	eef0 7a40 	vmov.f32	s15, s0
 80008a6:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80008a8:	edc3 7a00 	vstr	s15, [r3]

	     motor_V_1 = controller_return_1;
 80008ac:	4b49      	ldr	r3, [pc, #292]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a4a      	ldr	r2, [pc, #296]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80008b2:	6013      	str	r3, [r2, #0]
	     motor_V_2 = controller_return_2;
 80008b4:	4b48      	ldr	r3, [pc, #288]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a49      	ldr	r2, [pc, #292]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80008ba:	6013      	str	r3, [r2, #0]
	    	motor_V_2 = 5;
	    if(motor_V_2 < -5)
	    	motor_V_2 = -5;
*/

	    int32_t duty_1 = V2DUTY*motor_V_1;
 80008bc:	4b47      	ldr	r3, [pc, #284]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80008be:	edd3 7a00 	vldr	s15, [r3]
 80008c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008c6:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80009a8 <HAL_TIM_PeriodElapsedCallback+0x280>
 80008ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008d2:	ee17 3a90 	vmov	r3, s15
 80008d6:	60fb      	str	r3, [r7, #12]
	    // command a motor
		/* calculate duty properly */
		if (duty_1 >= 0) {
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db08      	blt.n	80008f0 <HAL_TIM_PeriodElapsedCallback+0x1c8>

			// rotate forward
			// alternate between forward and coast
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty_1);
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80008e6:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38
 80008ee:	e008      	b.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x1da>
			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, TIM8_ARR_VALUE - duty_1);

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80008f0:	4b3c      	ldr	r3, [pc, #240]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2200      	movs	r2, #0
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty_1);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	425a      	negs	r2, r3
 80008fc:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	639a      	str	r2, [r3, #56]	; 0x38





	    int32_t duty_2 = V2DUTY*motor_V_2;
 8000902:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800090c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80009a8 <HAL_TIM_PeriodElapsedCallback+0x280>
 8000910:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000914:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000918:	ee17 3a90 	vmov	r3, s15
 800091c:	60bb      	str	r3, [r7, #8]
	    // command a motor
		/* calculate duty properly */
		if (duty_2 >= 0) {
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db08      	blt.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x20e>

			// rotate forward
			// alternate between forward and coast
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)duty_2);
 8000924:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 800092c:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	641a      	str	r2, [r3, #64]	; 0x40
 8000934:	e008      	b.n	8000948 <HAL_TIM_PeriodElapsedCallback+0x220>
			/* alternate between forward and brake, TIM8_ARR_VALUE is a define*/
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
			//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, TIM8_ARR_VALUE - duty_2);

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2200      	movs	r2, #0
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)-duty_2);
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	425a      	negs	r2, r3
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	641a      	str	r2, [r3, #64]	; 0x40
		}
     	/*	Prepare data packet */
		data.w1 = reference_rpm_L;
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800094e:	6013      	str	r3, [r2, #0]
		data.w2 = current_rpm_1;
 8000950:	4a25      	ldr	r2, [pc, #148]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	6053      	str	r3, [r2, #4]
		data.u1 = tracking_error_1;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800095c:	6093      	str	r3, [r2, #8]
		data.u2 = controller_return_1;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000964:	60d3      	str	r3, [r2, #12]


		data.x1 = reference_rpm_R;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800096c:	6113      	str	r3, [r2, #16]
		data.x2 = current_rpm_2;
 800096e:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	6153      	str	r3, [r2, #20]
		data.y1 = tracking_error_2;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800097a:	6193      	str	r3, [r2, #24]
		data.y2 = controller_return_2;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000982:	61d3      	str	r3, [r2, #28]

		ertc_dlog_send(&logger, &data, sizeof(data));
 8000984:	2220      	movs	r2, #32
 8000986:	4918      	ldr	r1, [pc, #96]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000988:	4818      	ldr	r0, [pc, #96]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800098a:	f7ff fe75 	bl	8000678 <ertc_dlog_send>
	}
}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	00000000 	.word	0x00000000
 800099c:	40ae0000 	.word	0x40ae0000
 80009a0:	00000000 	.word	0x00000000
 80009a4:	40b77000 	.word	0x40b77000
 80009a8:	00000000 	.word	0x00000000
 80009ac:	40490000 	.word	0x40490000
 80009b0:	40001000 	.word	0x40001000
 80009b4:	20000280 	.word	0x20000280
 80009b8:	200002cc 	.word	0x200002cc
 80009bc:	200007fc 	.word	0x200007fc
 80009c0:	200007d8 	.word	0x200007d8
 80009c4:	200007c4 	.word	0x200007c4
 80009c8:	20000800 	.word	0x20000800
 80009cc:	200007d4 	.word	0x200007d4
 80009d0:	200007d0 	.word	0x200007d0
 80009d4:	200007bc 	.word	0x200007bc
 80009d8:	200007c8 	.word	0x200007c8
 80009dc:	200007c0 	.word	0x200007c0
 80009e0:	200007cc 	.word	0x200007cc
 80009e4:	200003b0 	.word	0x200003b0
 80009e8:	200007dc 	.word	0x200007dc
 80009ec:	200006f0 	.word	0x200006f0

080009f0 <PI_controller>:

float Kp = 0.34;
float KI = 0.2;


float PI_controller (float error){
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	ed87 0a01 	vstr	s0, [r7, #4]
	float P = Kp * error;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <PI_controller+0x90>)
 80009fc:	edd3 7a00 	vldr	s15, [r3]
 8000a00:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a08:	edc7 7a03 	vstr	s15, [r7, #12]
	static float I = 0;
	I = I + error * KI * TS;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <PI_controller+0x94>)
 8000a0e:	edd3 7a00 	vldr	s15, [r3]
 8000a12:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <PI_controller+0x98>)
 8000a18:	ed93 7a00 	vldr	s14, [r3]
 8000a1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a28:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000a78 <PI_controller+0x88>
 8000a2c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <PI_controller+0x94>)
 8000a3a:	edc3 7a00 	vstr	s15, [r3]
	if(I>10){
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <PI_controller+0x94>)
 8000a40:	edd3 7a00 	vldr	s15, [r3]
 8000a44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a50:	dd02      	ble.n	8000a58 <PI_controller+0x68>
		I=10;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <PI_controller+0x94>)
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <PI_controller+0x9c>)
 8000a56:	601a      	str	r2, [r3, #0]
	}
	return P + I;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <PI_controller+0x94>)
 8000a5a:	ed93 7a00 	vldr	s14, [r3]
 8000a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a62:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000a66:	eeb0 0a67 	vmov.f32	s0, s15
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	f3af 8000 	nop.w
 8000a78:	47ae147b 	.word	0x47ae147b
 8000a7c:	3f847ae1 	.word	0x3f847ae1
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000804 	.word	0x20000804
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	41200000 	.word	0x41200000

08000a90 <findBinary>:

void findBinary(int decimal, int * binary){
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	//int base = 1;
	int i =0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
   while(decimal > 0){
 8000a9e:	e015      	b.n	8000acc <findBinary+0x3c>
	   int rem = decimal % 2;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	bfb8      	it	lt
 8000aaa:	425b      	neglt	r3, r3
 8000aac:	60bb      	str	r3, [r7, #8]
	   binary[i] = rem;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	601a      	str	r2, [r3, #0]
	   i++;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
	   decimal = decimal / 2;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	da00      	bge.n	8000ac8 <findBinary+0x38>
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	105b      	asrs	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
   while(decimal > 0){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dce6      	bgt.n	8000aa0 <findBinary+0x10>
	   //base = base * 10;
   }
   //printf("Binary: %d\n\r", binary);
//   return binary;
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <calc_error_line>:

int calc_error_line (int binary[]){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	float distance_from_middle[8]={0};
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2220      	movs	r2, #32
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f007 fa1d 	bl	8007f30 <memset>
	float sum_dist = 0;
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
	int sum_binary = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
	for(int n=0;n<8;n++){
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b04:	e038      	b.n	8000b78 <calc_error_line+0x98>
		sum_binary += binary[n];
 8000b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b12:	4413      	add	r3, r2
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
		distance_from_middle[n]=((7.0/2.0)-n)*4;
 8000b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b18:	ee07 3a90 	vmov	s15, r3
 8000b1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b20:	eeb0 6b0c 	vmov.f64	d6, #12	; 0x40600000  3.5
 8000b24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b28:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	3338      	adds	r3, #56	; 0x38
 8000b3a:	443b      	add	r3, r7
 8000b3c:	3b30      	subs	r3, #48	; 0x30
 8000b3e:	edc3 7a00 	vstr	s15, [r3]
		sum_dist += binary[n]*distance_from_middle[n];
 8000b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	3338      	adds	r3, #56	; 0x38
 8000b5a:	443b      	add	r3, r7
 8000b5c:	3b30      	subs	r3, #48	; 0x30
 8000b5e:	edd3 7a00 	vldr	s15, [r3]
 8000b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b66:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int n=0;n<8;n++){
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	3301      	adds	r3, #1
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	ddc3      	ble.n	8000b06 <calc_error_line+0x26>
	}
	float line_error = sum_dist / sum_binary;
 8000b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b80:	ee07 3a90 	vmov	s15, r3
 8000b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b88:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return line_error;
 8000b94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b9c:	ee17 3a90 	vmov	r3, s15
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3738      	adds	r7, #56	; 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b090      	sub	sp, #64	; 0x40
 8000bac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f001 ff8e 	bl	8002ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f9a7 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 ffff 	bl	8001bb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000bba:	f000 ffcd 	bl	8001b58 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000bbe:	f000 fa13 	bl	8000fe8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000bc2:	f000 fa63 	bl	800108c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bc6:	f000 faa1 	bl	800110c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000bca:	f000 fadf 	bl	800118c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000bce:	f000 fb1b 	bl	8001208 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bd2:	f000 fbe9 	bl	80013a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bd6:	f000 fc81 	bl	80014dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bda:	f000 fcd5 	bl	8001588 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000bde:	f000 fd29 	bl	8001634 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000be2:	f000 fdd7 	bl	8001794 <MX_TIM8_Init>
  MX_UART4_Init();
 8000be6:	f000 fef7 	bl	80019d8 <MX_UART4_Init>
  MX_UART5_Init();
 8000bea:	f000 ff25 	bl	8001a38 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000bee:	f000 ff53 	bl	8001a98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bf2:	f000 ff81 	bl	8001af8 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000bf6:	f000 fe9f 	bl	8001938 <MX_TIM9_Init>
  MX_TIM6_Init();
 8000bfa:	f000 fd93 	bl	8001724 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  logger.uart_handle = huart3; // for serial
 8000bfe:	4bb3      	ldr	r3, [pc, #716]	; (8000ecc <main+0x324>)
 8000c00:	4ab3      	ldr	r2, [pc, #716]	; (8000ed0 <main+0x328>)
 8000c02:	3344      	adds	r3, #68	; 0x44
 8000c04:	4611      	mov	r1, r2
 8000c06:	2288      	movs	r2, #136	; 0x88
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f007 f983 	bl	8007f14 <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2110      	movs	r1, #16
 8000c12:	48b0      	ldr	r0, [pc, #704]	; (8000ed4 <main+0x32c>)
 8000c14:	f002 fd2e 	bl	8003674 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1c:	f001 ffb4 	bl	8002b88 <HAL_Delay>

  data = 0x12;
 8000c20:	2312      	movs	r3, #18
 8000c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000c26:	23c8      	movs	r3, #200	; 0xc8
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	227d      	movs	r2, #125	; 0x7d
 8000c38:	217c      	movs	r1, #124	; 0x7c
 8000c3a:	48a7      	ldr	r0, [pc, #668]	; (8000ed8 <main+0x330>)
 8000c3c:	f002 fdc4 	bl	80037c8 <HAL_I2C_Mem_Write>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status != HAL_OK)
 8000c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <main+0xb2>
      printf("I2C communication error (%X).\n", status);
 8000c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c52:	4619      	mov	r1, r3
 8000c54:	48a1      	ldr	r0, [pc, #644]	; (8000edc <main+0x334>)
 8000c56:	f007 f973 	bl	8007f40 <iprintf>

    data = 0x34;
 8000c5a:	2334      	movs	r3, #52	; 0x34
 8000c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000c60:	23c8      	movs	r3, #200	; 0xc8
 8000c62:	9302      	str	r3, [sp, #8]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	227d      	movs	r2, #125	; 0x7d
 8000c72:	217c      	movs	r1, #124	; 0x7c
 8000c74:	4898      	ldr	r0, [pc, #608]	; (8000ed8 <main+0x330>)
 8000c76:	f002 fda7 	bl	80037c8 <HAL_I2C_Mem_Write>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status != HAL_OK)
 8000c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d005      	beq.n	8000c94 <main+0xec>
      printf("I2C communication error (%X).\n", status);
 8000c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4893      	ldr	r0, [pc, #588]	; (8000edc <main+0x334>)
 8000c90:	f007 f956 	bl	8007f40 <iprintf>

    HAL_Delay(100);
 8000c94:	2064      	movs	r0, #100	; 0x64
 8000c96:	f001 ff77 	bl	8002b88 <HAL_Delay>

    /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000c9a:	23ff      	movs	r3, #255	; 0xff
 8000c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000ca0:	23c8      	movs	r3, #200	; 0xc8
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	217c      	movs	r1, #124	; 0x7c
 8000cb4:	4888      	ldr	r0, [pc, #544]	; (8000ed8 <main+0x330>)
 8000cb6:	f002 fd87 	bl	80037c8 <HAL_I2C_Mem_Write>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status != HAL_OK)
 8000cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <main+0x12c>
      printf("I2C communication error (%X).\n", status);
 8000cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4883      	ldr	r0, [pc, #524]	; (8000edc <main+0x334>)
 8000cd0:	f007 f936 	bl	8007f40 <iprintf>

    /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000cd4:	23ff      	movs	r3, #255	; 0xff
 8000cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000cda:	23c8      	movs	r3, #200	; 0xc8
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	2301      	movs	r3, #1
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	220e      	movs	r2, #14
 8000cec:	217c      	movs	r1, #124	; 0x7c
 8000cee:	487a      	ldr	r0, [pc, #488]	; (8000ed8 <main+0x330>)
 8000cf0:	f002 fd6a 	bl	80037c8 <HAL_I2C_Mem_Write>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status != HAL_OK)
 8000cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d005      	beq.n	8000d0e <main+0x166>
      printf("I2C communication error (%X).\n", status);
 8000d02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d06:	4619      	mov	r1, r3
 8000d08:	4874      	ldr	r0, [pc, #464]	; (8000edc <main+0x334>)
 8000d0a:	f007 f919 	bl	8007f40 <iprintf>

    /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
    data = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000d14:	23c8      	movs	r3, #200	; 0xc8
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	2213      	movs	r2, #19
 8000d26:	217c      	movs	r1, #124	; 0x7c
 8000d28:	486b      	ldr	r0, [pc, #428]	; (8000ed8 <main+0x330>)
 8000d2a:	f002 fd4d 	bl	80037c8 <HAL_I2C_Mem_Write>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status != HAL_OK)
 8000d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <main+0x1a0>
      printf("I2C communication error (%X).\n", status);
 8000d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d40:	4619      	mov	r1, r3
 8000d42:	4866      	ldr	r0, [pc, #408]	; (8000edc <main+0x334>)
 8000d44:	f007 f8fc 	bl	8007f40 <iprintf>

    /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000d48:	23aa      	movs	r3, #170	; 0xaa
 8000d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000d4e:	23c8      	movs	r3, #200	; 0xc8
 8000d50:	9302      	str	r3, [sp, #8]
 8000d52:	2301      	movs	r3, #1
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	2216      	movs	r2, #22
 8000d60:	217c      	movs	r1, #124	; 0x7c
 8000d62:	485d      	ldr	r0, [pc, #372]	; (8000ed8 <main+0x330>)
 8000d64:	f002 fd30 	bl	80037c8 <HAL_I2C_Mem_Write>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status != HAL_OK)
 8000d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <main+0x1da>
      printf("I2C communication error (%X).\n", status);
 8000d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4857      	ldr	r0, [pc, #348]	; (8000edc <main+0x334>)
 8000d7e:	f007 f8df 	bl	8007f40 <iprintf>

    /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000d82:	23aa      	movs	r3, #170	; 0xaa
 8000d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000d88:	23c8      	movs	r3, #200	; 0xc8
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	2217      	movs	r2, #23
 8000d9a:	217c      	movs	r1, #124	; 0x7c
 8000d9c:	484e      	ldr	r0, [pc, #312]	; (8000ed8 <main+0x330>)
 8000d9e:	f002 fd13 	bl	80037c8 <HAL_I2C_Mem_Write>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status != HAL_OK)
 8000da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d005      	beq.n	8000dbc <main+0x214>
      printf("I2C communication error (%X).\n", status);
 8000db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db4:	4619      	mov	r1, r3
 8000db6:	4849      	ldr	r0, [pc, #292]	; (8000edc <main+0x334>)
 8000db8:	f007 f8c2 	bl	8007f40 <iprintf>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000dbc:	213c      	movs	r1, #60	; 0x3c
 8000dbe:	4848      	ldr	r0, [pc, #288]	; (8000ee0 <main+0x338>)
 8000dc0:	f004 fff2 	bl	8005da8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000dc4:	213c      	movs	r1, #60	; 0x3c
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <main+0x33c>)
 8000dc8:	f004 ffee 	bl	8005da8 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4846      	ldr	r0, [pc, #280]	; (8000ee8 <main+0x340>)
 8000dd0:	f004 fde8 	bl	80059a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4844      	ldr	r0, [pc, #272]	; (8000ee8 <main+0x340>)
 8000dd8:	f004 fde4 	bl	80059a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ddc:	2108      	movs	r1, #8
 8000dde:	4842      	ldr	r0, [pc, #264]	; (8000ee8 <main+0x340>)
 8000de0:	f004 fde0 	bl	80059a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000de4:	210c      	movs	r1, #12
 8000de6:	4840      	ldr	r0, [pc, #256]	; (8000ee8 <main+0x340>)
 8000de8:	f004 fddc 	bl	80059a4 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000dec:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <main+0x344>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <main+0x344>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <main+0x344>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000e04:	4b39      	ldr	r3, [pc, #228]	; (8000eec <main+0x344>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4837      	ldr	r0, [pc, #220]	; (8000eec <main+0x344>)
 8000e10:	f004 fdc8 	bl	80059a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000e14:	2104      	movs	r1, #4
 8000e16:	4835      	ldr	r0, [pc, #212]	; (8000eec <main+0x344>)
 8000e18:	f004 fdc4 	bl	80059a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4833      	ldr	r0, [pc, #204]	; (8000eec <main+0x344>)
 8000e20:	f004 fdc0 	bl	80059a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000e24:	210c      	movs	r1, #12
 8000e26:	4831      	ldr	r0, [pc, #196]	; (8000eec <main+0x344>)
 8000e28:	f004 fdbc 	bl	80059a4 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 8000e2c:	4830      	ldr	r0, [pc, #192]	; (8000ef0 <main+0x348>)
 8000e2e:	f004 fc89 	bl	8005744 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  status = HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &lineData, 1, I2C_TIMEOUT);
 8000e32:	23c8      	movs	r3, #200	; 0xc8
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	2301      	movs	r3, #1
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	2210      	movs	r2, #16
 8000e44:	217c      	movs	r1, #124	; 0x7c
 8000e46:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <main+0x330>)
 8000e48:	f002 fdd2 	bl	80039f0 <HAL_I2C_Mem_Read>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  int binary[8] = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2220      	movs	r2, #32
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f007 f869 	bl	8007f30 <memset>
	  findBinary(lineData, binary);
 8000e5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e62:	461a      	mov	r2, r3
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f7ff fe11 	bl	8000a90 <findBinary>
	  float line_error = calc_error_line(binary);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fe35 	bl	8000ae0 <calc_error_line>
 8000e76:	ee07 0a90 	vmov	s15, r0
 8000e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  //phi_err = line_error/85;


	  reference_rpm_L = 100 - line_error*12;
 8000e82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e86:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000ef4 <main+0x34c>
 8000e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <main+0x350>)
 8000e98:	edc3 7a00 	vstr	s15, [r3]
	  reference_rpm_R = 100 + line_error*12;
 8000e9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ea0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000ef4 <main+0x34c>
 8000eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <main+0x354>)
 8000eb2:	edc3 7a00 	vstr	s15, [r3]

	  printf("Decimal is: %d \n\r", lineData);
 8000eb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <main+0x358>)
 8000ebe:	f007 f83f 	bl	8007f40 <iprintf>
	  //HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 8000ec2:	4802      	ldr	r0, [pc, #8]	; (8000ecc <main+0x324>)
 8000ec4:	f7ff fc04 	bl	80006d0 <ertc_dlog_update>
  {
 8000ec8:	e7b3      	b.n	8000e32 <main+0x28a>
 8000eca:	bf00      	nop
 8000ecc:	200006f0 	.word	0x200006f0
 8000ed0:	20000668 	.word	0x20000668
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	200000dc 	.word	0x200000dc
 8000edc:	08008e74 	.word	0x08008e74
 8000ee0:	20000280 	.word	0x20000280
 8000ee4:	200002cc 	.word	0x200002cc
 8000ee8:	200001e8 	.word	0x200001e8
 8000eec:	200003b0 	.word	0x200003b0
 8000ef0:	20000364 	.word	0x20000364
 8000ef4:	42c80000 	.word	0x42c80000
 8000ef8:	200007d4 	.word	0x200007d4
 8000efc:	200007d8 	.word	0x200007d8
 8000f00:	08008e94 	.word	0x08008e94

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	; 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2234      	movs	r2, #52	; 0x34
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 f80c 	bl	8007f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f28:	f003 f9ae 	bl	8004288 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <SystemClock_Config+0xdc>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <SystemClock_Config+0xdc>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6413      	str	r3, [r2, #64]	; 0x40
 8000f38:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <SystemClock_Config+0xdc>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <SystemClock_Config+0xe0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f4c:	4a25      	ldr	r2, [pc, #148]	; (8000fe4 <SystemClock_Config+0xe0>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <SystemClock_Config+0xe0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f74:	2304      	movs	r3, #4
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f78:	2360      	movs	r3, #96	; 0x60
 8000f7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f80:	2304      	movs	r3, #4
 8000f82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f003 f9db 	bl	8004348 <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f98:	f000 ff40 	bl	8001e1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f9c:	f003 f984 	bl	80042a8 <HAL_PWREx_EnableOverDrive>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fa6:	f000 ff39 	bl	8001e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 fc6c 	bl	80048a4 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000fd2:	f000 ff23 	bl	8001e1c <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3750      	adds	r7, #80	; 0x50
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_ADC1_Init+0x98>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_ADC1_Init+0x9c>)
 8000ffe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_ADC1_Init+0x98>)
 8001002:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001006:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_ADC1_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_ADC1_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_ADC1_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_ADC1_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_ADC1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_ADC1_Init+0x98>)
 800102a:	4a17      	ldr	r2, [pc, #92]	; (8001088 <MX_ADC1_Init+0xa0>)
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_ADC1_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_ADC1_Init+0x98>)
 8001036:	2201      	movs	r2, #1
 8001038:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_ADC1_Init+0x98>)
 8001044:	2201      	movs	r2, #1
 8001046:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_ADC1_Init+0x98>)
 800104a:	f001 fdc1 	bl	8002bd0 <HAL_ADC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001054:	f000 fee2 	bl	8001e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001058:	2303      	movs	r3, #3
 800105a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105c:	2301      	movs	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_ADC1_Init+0x98>)
 800106a:	f001 fdf5 	bl	8002c58 <HAL_ADC_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001074:	f000 fed2 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000094 	.word	0x20000094
 8001084:	40012000 	.word	0x40012000
 8001088:	0f000001 	.word	0x0f000001

0800108c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_I2C1_Init+0x74>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <MX_I2C1_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_I2C1_Init+0x74>)
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <MX_I2C1_Init+0x7c>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_I2C1_Init+0x74>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_I2C1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_I2C1_Init+0x74>)
 80010c8:	f002 faee 	bl	80036a8 <HAL_I2C_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010d2:	f000 fea3 	bl	8001e1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <MX_I2C1_Init+0x74>)
 80010da:	f003 f83d 	bl	8004158 <HAL_I2CEx_ConfigAnalogFilter>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010e4:	f000 fe9a 	bl	8001e1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_I2C1_Init+0x74>)
 80010ec:	f003 f87f 	bl	80041ee <HAL_I2CEx_ConfigDigitalFilter>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 fe91 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000dc 	.word	0x200000dc
 8001104:	40005400 	.word	0x40005400
 8001108:	20303e5d 	.word	0x20303e5d

0800110c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_I2C2_Init+0x74>)
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <MX_I2C2_Init+0x78>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_I2C2_Init+0x74>)
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <MX_I2C2_Init+0x7c>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_I2C2_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_I2C2_Init+0x74>)
 8001124:	2201      	movs	r2, #1
 8001126:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_I2C2_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_I2C2_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_I2C2_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_I2C2_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_I2C2_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <MX_I2C2_Init+0x74>)
 8001148:	f002 faae 	bl	80036a8 <HAL_I2C_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001152:	f000 fe63 	bl	8001e1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <MX_I2C2_Init+0x74>)
 800115a:	f002 fffd 	bl	8004158 <HAL_I2CEx_ConfigAnalogFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001164:	f000 fe5a 	bl	8001e1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_I2C2_Init+0x74>)
 800116c:	f003 f83f 	bl	80041ee <HAL_I2CEx_ConfigDigitalFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001176:	f000 fe51 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000130 	.word	0x20000130
 8001184:	40005800 	.word	0x40005800
 8001188:	20303e5d 	.word	0x20303e5d

0800118c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_SPI1_Init+0x74>)
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <MX_SPI1_Init+0x78>)
 8001194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_SPI1_Init+0x74>)
 8001198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800119c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_SPI1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_SPI1_Init+0x74>)
 80011a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_SPI1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_SPI1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI1_Init+0x74>)
 80011ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_SPI1_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI1_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_SPI1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI1_Init+0x74>)
 80011da:	2207      	movs	r2, #7
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_SPI1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI1_Init+0x74>)
 80011e6:	2208      	movs	r2, #8
 80011e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_SPI1_Init+0x74>)
 80011ec:	f004 f9a8 	bl	8005540 <HAL_SPI_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f000 fe11 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000184 	.word	0x20000184
 8001204:	40013000 	.word	0x40013000

08001208 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09a      	sub	sp, #104	; 0x68
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001228:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	222c      	movs	r2, #44	; 0x2c
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f006 fe74 	bl	8007f30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001248:	4b55      	ldr	r3, [pc, #340]	; (80013a0 <MX_TIM1_Init+0x198>)
 800124a:	4a56      	ldr	r2, [pc, #344]	; (80013a4 <MX_TIM1_Init+0x19c>)
 800124c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800124e:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <MX_TIM1_Init+0x198>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <MX_TIM1_Init+0x198>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800125a:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <MX_TIM1_Init+0x198>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <MX_TIM1_Init+0x198>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001266:	4b4e      	ldr	r3, [pc, #312]	; (80013a0 <MX_TIM1_Init+0x198>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <MX_TIM1_Init+0x198>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001272:	484b      	ldr	r0, [pc, #300]	; (80013a0 <MX_TIM1_Init+0x198>)
 8001274:	f004 fa0f 	bl	8005696 <HAL_TIM_Base_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800127e:	f000 fdcd 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001288:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800128c:	4619      	mov	r1, r3
 800128e:	4844      	ldr	r0, [pc, #272]	; (80013a0 <MX_TIM1_Init+0x198>)
 8001290:	f005 f962 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800129a:	f000 fdbf 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800129e:	4840      	ldr	r0, [pc, #256]	; (80013a0 <MX_TIM1_Init+0x198>)
 80012a0:	f004 fac8 	bl	8005834 <HAL_TIM_OC_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012aa:	f000 fdb7 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012be:	4619      	mov	r1, r3
 80012c0:	4837      	ldr	r0, [pc, #220]	; (80013a0 <MX_TIM1_Init+0x198>)
 80012c2:	f005 ff23 	bl	800710c <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80012cc:	f000 fda6 	bl	8001e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80012d0:	2350      	movs	r3, #80	; 0x50
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80012d8:	2302      	movs	r3, #2
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	482a      	ldr	r0, [pc, #168]	; (80013a0 <MX_TIM1_Init+0x198>)
 80012f6:	f004 ff05 	bl	8006104 <HAL_TIM_OC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001300:	f000 fd8c 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001308:	2204      	movs	r2, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4824      	ldr	r0, [pc, #144]	; (80013a0 <MX_TIM1_Init+0x198>)
 800130e:	f004 fef9 	bl	8006104 <HAL_TIM_OC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001318:	f000 fd80 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800131c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001320:	2208      	movs	r2, #8
 8001322:	4619      	mov	r1, r3
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <MX_TIM1_Init+0x198>)
 8001326:	f004 feed 	bl	8006104 <HAL_TIM_OC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001330:	f000 fd74 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001334:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001338:	220c      	movs	r2, #12
 800133a:	4619      	mov	r1, r3
 800133c:	4818      	ldr	r0, [pc, #96]	; (80013a0 <MX_TIM1_Init+0x198>)
 800133e:	f004 fee1 	bl	8006104 <HAL_TIM_OC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001348:	f000 fd68 	bl	8001e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001364:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800136e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM1_Init+0x198>)
 8001382:	f005 ff51 	bl	8007228 <HAL_TIMEx_ConfigBreakDeadTime>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800138c:	f000 fd46 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM1_Init+0x198>)
 8001392:	f001 f805 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 8001396:	bf00      	nop
 8001398:	3768      	adds	r7, #104	; 0x68
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001e8 	.word	0x200001e8
 80013a4:	40010000 	.word	0x40010000

080013a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b092      	sub	sp, #72	; 0x48
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	615a      	str	r2, [r3, #20]
 80013da:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <MX_TIM2_Init+0x130>)
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <MX_TIM2_Init+0x130>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <MX_TIM2_Init+0x130>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <MX_TIM2_Init+0x130>)
 80013fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001402:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <MX_TIM2_Init+0x130>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <MX_TIM2_Init+0x130>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001410:	4831      	ldr	r0, [pc, #196]	; (80014d8 <MX_TIM2_Init+0x130>)
 8001412:	f004 f940 	bl	8005696 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800141c:	f000 fcfe 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800142a:	4619      	mov	r1, r3
 800142c:	482a      	ldr	r0, [pc, #168]	; (80014d8 <MX_TIM2_Init+0x130>)
 800142e:	f005 f893 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001438:	f000 fcf0 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800143c:	4826      	ldr	r0, [pc, #152]	; (80014d8 <MX_TIM2_Init+0x130>)
 800143e:	f004 fa5a 	bl	80058f6 <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001448:	f000 fce8 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800144c:	4822      	ldr	r0, [pc, #136]	; (80014d8 <MX_TIM2_Init+0x130>)
 800144e:	f004 fba3 	bl	8005b98 <HAL_TIM_IC_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001458:	f000 fce0 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001468:	4619      	mov	r1, r3
 800146a:	481b      	ldr	r0, [pc, #108]	; (80014d8 <MX_TIM2_Init+0x130>)
 800146c:	f005 fe4e 	bl	800710c <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001476:	f000 fcd1 	bl	8001e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147a:	2360      	movs	r3, #96	; 0x60
 800147c:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	4811      	ldr	r0, [pc, #68]	; (80014d8 <MX_TIM2_Init+0x130>)
 8001494:	f004 ff4c 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800149e:	f000 fcbd 	bl	8001e1c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014a6:	2301      	movs	r3, #1
 80014a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	2208      	movs	r2, #8
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM2_Init+0x130>)
 80014ba:	f004 fe9d 	bl	80061f8 <HAL_TIM_IC_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80014c4:	f000 fcaa 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM2_Init+0x130>)
 80014ca:	f000 ff69 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3748      	adds	r7, #72	; 0x48
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000234 	.word	0x20000234

080014dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	2224      	movs	r2, #36	; 0x24
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 fd20 	bl	8007f30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	463b      	mov	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <MX_TIM3_Init+0xa4>)
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <MX_TIM3_Init+0xa8>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <MX_TIM3_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <MX_TIM3_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <MX_TIM3_Init+0xa4>)
 800150e:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001512:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_TIM3_Init+0xa4>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_TIM3_Init+0xa4>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001520:	2303      	movs	r3, #3
 8001522:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001528:	2301      	movs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001530:	230f      	movs	r3, #15
 8001532:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001538:	2301      	movs	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001540:	230f      	movs	r3, #15
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4619      	mov	r1, r3
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <MX_TIM3_Init+0xa4>)
 800154c:	f004 fb86 	bl	8005c5c <HAL_TIM_Encoder_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001556:	f000 fc61 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	4619      	mov	r1, r3
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <MX_TIM3_Init+0xa4>)
 8001568:	f005 fdd0 	bl	800710c <HAL_TIMEx_MasterConfigSynchronization>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001572:	f000 fc53 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	3730      	adds	r7, #48	; 0x30
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000280 	.word	0x20000280
 8001584:	40000400 	.word	0x40000400

08001588 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	; 0x30
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	2224      	movs	r2, #36	; 0x24
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f006 fcca 	bl	8007f30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_TIM4_Init+0xa4>)
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <MX_TIM4_Init+0xa8>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_TIM4_Init+0xa4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_TIM4_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_TIM4_Init+0xa4>)
 80015ba:	f640 62ff 	movw	r2, #3839	; 0xeff
 80015be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_TIM4_Init+0xa4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_TIM4_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015cc:	2303      	movs	r3, #3
 80015ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015d4:	2301      	movs	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80015dc:	230f      	movs	r3, #15
 80015de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015e4:	2301      	movs	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80015ec:	230f      	movs	r3, #15
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_TIM4_Init+0xa4>)
 80015f8:	f004 fb30 	bl	8005c5c <HAL_TIM_Encoder_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001602:	f000 fc0b 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800160e:	463b      	mov	r3, r7
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <MX_TIM4_Init+0xa4>)
 8001614:	f005 fd7a 	bl	800710c <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800161e:	f000 fbfd 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	3730      	adds	r7, #48	; 0x30
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200002cc 	.word	0x200002cc
 8001630:	40000800 	.word	0x40000800

08001634 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001654:	463b      	mov	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <MX_TIM5_Init+0xe8>)
 8001668:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <MX_TIM5_Init+0xec>)
 800166a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <MX_TIM5_Init+0xe8>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <MX_TIM5_Init+0xe8>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <MX_TIM5_Init+0xe8>)
 800167a:	f04f 32ff 	mov.w	r2, #4294967295
 800167e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <MX_TIM5_Init+0xe8>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_TIM5_Init+0xe8>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800168c:	4823      	ldr	r0, [pc, #140]	; (800171c <MX_TIM5_Init+0xe8>)
 800168e:	f004 f802 	bl	8005696 <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001698:	f000 fbc0 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a6:	4619      	mov	r1, r3
 80016a8:	481c      	ldr	r0, [pc, #112]	; (800171c <MX_TIM5_Init+0xe8>)
 80016aa:	f004 ff55 	bl	8006558 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80016b4:	f000 fbb2 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016b8:	4818      	ldr	r0, [pc, #96]	; (800171c <MX_TIM5_Init+0xe8>)
 80016ba:	f004 f91c 	bl	80058f6 <HAL_TIM_PWM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80016c4:	f000 fbaa 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_TIM5_Init+0xe8>)
 80016d8:	f005 fd18 	bl	800710c <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80016e2:	f000 fb9b 	bl	8001e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	; 0x60
 80016e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM5_Init+0xe8>)
 80016fe:	f004 fe17 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001708:	f000 fb88 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM5_Init+0xe8>)
 800170e:	f000 fe47 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3738      	adds	r7, #56	; 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000318 	.word	0x20000318
 8001720:	40000c00 	.word	0x40000c00

08001724 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_TIM6_Init+0x68>)
 8001736:	4a16      	ldr	r2, [pc, #88]	; (8001790 <MX_TIM6_Init+0x6c>)
 8001738:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_TIM6_Init+0x68>)
 800173c:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001740:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_TIM6_Init+0x68>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_TIM6_Init+0x68>)
 800174a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800174e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_TIM6_Init+0x68>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <MX_TIM6_Init+0x68>)
 8001758:	f003 ff9d 	bl	8005696 <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001762:	f000 fb5b 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_TIM6_Init+0x68>)
 8001774:	f005 fcca 	bl	800710c <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800177e:	f000 fb4d 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000364 	.word	0x20000364
 8001790:	40001000 	.word	0x40001000

08001794 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b09a      	sub	sp, #104	; 0x68
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
 80017c4:	615a      	str	r2, [r3, #20]
 80017c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	222c      	movs	r2, #44	; 0x2c
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f006 fbae 	bl	8007f30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017d4:	4b56      	ldr	r3, [pc, #344]	; (8001930 <MX_TIM8_Init+0x19c>)
 80017d6:	4a57      	ldr	r2, [pc, #348]	; (8001934 <MX_TIM8_Init+0x1a0>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80017da:	4b55      	ldr	r3, [pc, #340]	; (8001930 <MX_TIM8_Init+0x19c>)
 80017dc:	f240 32bf 	movw	r2, #959	; 0x3bf
 80017e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e2:	4b53      	ldr	r3, [pc, #332]	; (8001930 <MX_TIM8_Init+0x19c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 80017e8:	4b51      	ldr	r3, [pc, #324]	; (8001930 <MX_TIM8_Init+0x19c>)
 80017ea:	f240 128f 	movw	r2, #399	; 0x18f
 80017ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <MX_TIM8_Init+0x19c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017f6:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <MX_TIM8_Init+0x19c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fc:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <MX_TIM8_Init+0x19c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001802:	484b      	ldr	r0, [pc, #300]	; (8001930 <MX_TIM8_Init+0x19c>)
 8001804:	f003 ff47 	bl	8005696 <HAL_TIM_Base_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800180e:	f000 fb05 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001816:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800181c:	4619      	mov	r1, r3
 800181e:	4844      	ldr	r0, [pc, #272]	; (8001930 <MX_TIM8_Init+0x19c>)
 8001820:	f004 fe9a 	bl	8006558 <HAL_TIM_ConfigClockSource>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800182a:	f000 faf7 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800182e:	4840      	ldr	r0, [pc, #256]	; (8001930 <MX_TIM8_Init+0x19c>)
 8001830:	f004 f861 	bl	80058f6 <HAL_TIM_PWM_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800183a:	f000 faef 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800184a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800184e:	4619      	mov	r1, r3
 8001850:	4837      	ldr	r0, [pc, #220]	; (8001930 <MX_TIM8_Init+0x19c>)
 8001852:	f005 fc5b 	bl	800710c <HAL_TIMEx_MasterConfigSynchronization>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800185c:	f000 fade 	bl	8001e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001860:	2360      	movs	r3, #96	; 0x60
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800186c:	2300      	movs	r3, #0
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800187c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001880:	2200      	movs	r2, #0
 8001882:	4619      	mov	r1, r3
 8001884:	482a      	ldr	r0, [pc, #168]	; (8001930 <MX_TIM8_Init+0x19c>)
 8001886:	f004 fd53 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001890:	f000 fac4 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001898:	2204      	movs	r2, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4824      	ldr	r0, [pc, #144]	; (8001930 <MX_TIM8_Init+0x19c>)
 800189e:	f004 fd47 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80018a8:	f000 fab8 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b0:	2208      	movs	r2, #8
 80018b2:	4619      	mov	r1, r3
 80018b4:	481e      	ldr	r0, [pc, #120]	; (8001930 <MX_TIM8_Init+0x19c>)
 80018b6:	f004 fd3b 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80018c0:	f000 faac 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c8:	220c      	movs	r2, #12
 80018ca:	4619      	mov	r1, r3
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <MX_TIM8_Init+0x19c>)
 80018ce:	f004 fd2f 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80018d8:	f000 faa0 	bl	8001e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_TIM8_Init+0x19c>)
 8001912:	f005 fc89 	bl	8007228 <HAL_TIMEx_ConfigBreakDeadTime>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 800191c:	f000 fa7e 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <MX_TIM8_Init+0x19c>)
 8001922:	f000 fd3d 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 8001926:	bf00      	nop
 8001928:	3768      	adds	r7, #104	; 0x68
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200003b0 	.word	0x200003b0
 8001934:	40010400 	.word	0x40010400

08001938 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	615a      	str	r2, [r3, #20]
 800194e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MX_TIM9_Init+0x98>)
 8001952:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <MX_TIM9_Init+0x9c>)
 8001954:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <MX_TIM9_Init+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <MX_TIM9_Init+0x98>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_TIM9_Init+0x98>)
 8001964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001968:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <MX_TIM9_Init+0x98>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_TIM9_Init+0x98>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001976:	4816      	ldr	r0, [pc, #88]	; (80019d0 <MX_TIM9_Init+0x98>)
 8001978:	f003 ffbd 	bl	80058f6 <HAL_TIM_PWM_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001982:	f000 fa4b 	bl	8001e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001986:	2360      	movs	r3, #96	; 0x60
 8001988:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <MX_TIM9_Init+0x98>)
 800199e:	f004 fcc7 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80019a8:	f000 fa38 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2204      	movs	r2, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_TIM9_Init+0x98>)
 80019b4:	f004 fcbc 	bl	8006330 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80019be:	f000 fa2d 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <MX_TIM9_Init+0x98>)
 80019c4:	f000 fcec 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200003fc 	.word	0x200003fc
 80019d4:	40014000 	.word	0x40014000

080019d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_UART4_Init+0x58>)
 80019de:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <MX_UART4_Init+0x5c>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <MX_UART4_Init+0x58>)
 80019e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_UART4_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_UART4_Init+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_UART4_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_UART4_Init+0x58>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_UART4_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_UART4_Init+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_UART4_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_UART4_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_UART4_Init+0x58>)
 8001a1c:	f005 fca0 	bl	8007360 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a26:	f000 f9f9 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000448 	.word	0x20000448
 8001a34:	40004c00 	.word	0x40004c00

08001a38 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <MX_UART5_Init+0x5c>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_UART5_Init+0x58>)
 8001a7c:	f005 fc70 	bl	8007360 <HAL_UART_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001a86:	f000 f9c9 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200004d0 	.word	0x200004d0
 8001a94:	40005000 	.word	0x40005000

08001a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <MX_USART1_UART_Init+0x5c>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_USART1_UART_Init+0x58>)
 8001adc:	f005 fc40 	bl	8007360 <HAL_UART_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ae6:	f000 f999 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000558 	.word	0x20000558
 8001af4:	40011000 	.word	0x40011000

08001af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <MX_USART2_UART_Init+0x5c>)
 8001b06:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_USART2_UART_Init+0x54>)
 8001b3a:	f005 fc11 	bl	8007360 <HAL_UART_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001b44:	f000 f96a 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200005e0 	.word	0x200005e0
 8001b50:	40004400 	.word	0x40004400
 8001b54:	000f4240 	.word	0x000f4240

08001b58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b5e:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <MX_USART3_UART_Init+0x5c>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_USART3_UART_Init+0x58>)
 8001b9c:	f005 fbe0 	bl	8007360 <HAL_UART_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ba6:	f000 f939 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000668 	.word	0x20000668
 8001bb4:	40004800 	.word	0x40004800

08001bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	; 0x38
 8001bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bce:	4b8c      	ldr	r3, [pc, #560]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a8b      	ldr	r2, [pc, #556]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001bd4:	f043 0310 	orr.w	r3, r3, #16
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	4b86      	ldr	r3, [pc, #536]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a85      	ldr	r2, [pc, #532]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b83      	ldr	r3, [pc, #524]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bfe:	4b80      	ldr	r3, [pc, #512]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a7f      	ldr	r2, [pc, #508]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c04:	f043 0320 	orr.w	r3, r3, #32
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b7d      	ldr	r3, [pc, #500]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c16:	4b7a      	ldr	r3, [pc, #488]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a79      	ldr	r2, [pc, #484]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b77      	ldr	r3, [pc, #476]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	4b74      	ldr	r3, [pc, #464]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a73      	ldr	r2, [pc, #460]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b71      	ldr	r3, [pc, #452]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	4b6e      	ldr	r3, [pc, #440]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a6d      	ldr	r2, [pc, #436]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a67      	ldr	r2, [pc, #412]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c76:	4b62      	ldr	r3, [pc, #392]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a61      	ldr	r2, [pc, #388]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <MX_GPIO_Init+0x248>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2118      	movs	r1, #24
 8001c92:	485c      	ldr	r0, [pc, #368]	; (8001e04 <MX_GPIO_Init+0x24c>)
 8001c94:	f001 fcee 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c9e:	485a      	ldr	r0, [pc, #360]	; (8001e08 <MX_GPIO_Init+0x250>)
 8001ca0:	f001 fce8 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2140      	movs	r1, #64	; 0x40
 8001ca8:	4858      	ldr	r0, [pc, #352]	; (8001e0c <MX_GPIO_Init+0x254>)
 8001caa:	f001 fce3 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001cae:	2318      	movs	r3, #24
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	484f      	ldr	r0, [pc, #316]	; (8001e04 <MX_GPIO_Init+0x24c>)
 8001cc6:	f001 fb29 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001cca:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	484b      	ldr	r0, [pc, #300]	; (8001e10 <MX_GPIO_Init+0x258>)
 8001ce2:	f001 fb1b 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ce6:	2332      	movs	r3, #50	; 0x32
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cf6:	230b      	movs	r3, #11
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4844      	ldr	r0, [pc, #272]	; (8001e14 <MX_GPIO_Init+0x25c>)
 8001d02:	f001 fb0b 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d06:	2386      	movs	r3, #134	; 0x86
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d16:	230b      	movs	r3, #11
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1e:	4619      	mov	r1, r3
 8001d20:	483d      	ldr	r0, [pc, #244]	; (8001e18 <MX_GPIO_Init+0x260>)
 8001d22:	f001 fafb 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001d26:	f244 0381 	movw	r3, #16513	; 0x4081
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4832      	ldr	r0, [pc, #200]	; (8001e08 <MX_GPIO_Init+0x250>)
 8001d40:	f001 faec 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d56:	230b      	movs	r3, #11
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4829      	ldr	r0, [pc, #164]	; (8001e08 <MX_GPIO_Init+0x250>)
 8001d62:	f001 fadb 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d66:	2340      	movs	r3, #64	; 0x40
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4823      	ldr	r0, [pc, #140]	; (8001e0c <MX_GPIO_Init+0x254>)
 8001d7e:	f001 facd 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d92:	4619      	mov	r1, r3
 8001d94:	481d      	ldr	r0, [pc, #116]	; (8001e0c <MX_GPIO_Init+0x254>)
 8001d96:	f001 fac1 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d9a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dac:	230a      	movs	r3, #10
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	4619      	mov	r1, r3
 8001db6:	4818      	ldr	r0, [pc, #96]	; (8001e18 <MX_GPIO_Init+0x260>)
 8001db8:	f001 fab0 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4811      	ldr	r0, [pc, #68]	; (8001e18 <MX_GPIO_Init+0x260>)
 8001dd2:	f001 faa3 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001dd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001de8:	230b      	movs	r3, #11
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_GPIO_Init+0x254>)
 8001df4:	f001 fa92 	bl	800331c <HAL_GPIO_Init>

}
 8001df8:	bf00      	nop
 8001dfa:	3738      	adds	r7, #56	; 0x38
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40021400 	.word	0x40021400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020000 	.word	0x40020000

08001e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e20:	b672      	cpsid	i
}
 8001e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <Error_Handler+0x8>
	...

08001e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_MspInit+0x44>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_MspInit+0x44>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_MspInit+0x44>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_MspInit+0x44>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_MspInit+0x44>)
 8001e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_MspInit+0x44>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_ADC_MspInit+0x74>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d123      	bne.n	8001eda <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_ADC_MspInit+0x78>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_ADC_MspInit+0x78>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_ADC_MspInit+0x78>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_ADC_MspInit+0x78>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_ADC_MspInit+0x78>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_ADC_MspInit+0x78>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_ADC_MspInit+0x7c>)
 8001ed6:	f001 fa21 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40012000 	.word	0x40012000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020000 	.word	0x40020000

08001ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0b0      	sub	sp, #192	; 0xc0
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	2290      	movs	r2, #144	; 0x90
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f006 f80d 	bl	8007f30 <memset>
  if(hi2c->Instance==I2C1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a44      	ldr	r2, [pc, #272]	; (800202c <HAL_I2C_MspInit+0x13c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d13e      	bne.n	8001f9e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f24:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 fedd 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001f3c:	f7ff ff6e 	bl	8001e1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f40:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	4a3a      	ldr	r2, [pc, #232]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4c:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f60:	2312      	movs	r3, #18
 8001f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f72:	2304      	movs	r3, #4
 8001f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	482d      	ldr	r0, [pc, #180]	; (8002034 <HAL_I2C_MspInit+0x144>)
 8001f80:	f001 f9cc 	bl	800331c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a29      	ldr	r2, [pc, #164]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8001f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f9c:	e041      	b.n	8002022 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a25      	ldr	r2, [pc, #148]	; (8002038 <HAL_I2C_MspInit+0x148>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d13c      	bne.n	8002022 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fe99 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001fc4:	f7ff ff2a 	bl	8001e1c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8001fce:	f043 0320 	orr.w	r3, r3, #32
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe6:	2312      	movs	r3, #18
 8001fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ffe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002002:	4619      	mov	r1, r3
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <HAL_I2C_MspInit+0x14c>)
 8002006:	f001 f989 	bl	800331c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_I2C_MspInit+0x140>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8002010:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_I2C_MspInit+0x140>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
}
 8002022:	bf00      	nop
 8002024:	37c0      	adds	r7, #192	; 0xc0
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40005400 	.word	0x40005400
 8002030:	40023800 	.word	0x40023800
 8002034:	40020400 	.word	0x40020400
 8002038:	40005800 	.word	0x40005800
 800203c:	40021400 	.word	0x40021400

08002040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	; 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a33      	ldr	r2, [pc, #204]	; (800212c <HAL_SPI_MspInit+0xec>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d160      	bne.n	8002124 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a32      	ldr	r2, [pc, #200]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 8002068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b30      	ldr	r3, [pc, #192]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a2c      	ldr	r2, [pc, #176]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a26      	ldr	r2, [pc, #152]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a20      	ldr	r2, [pc, #128]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 80020b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020c2:	2320      	movs	r3, #32
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020d2:	2305      	movs	r3, #5
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	4619      	mov	r1, r3
 80020dc:	4815      	ldr	r0, [pc, #84]	; (8002134 <HAL_SPI_MspInit+0xf4>)
 80020de:	f001 f91d 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020f2:	2305      	movs	r3, #5
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	480e      	ldr	r0, [pc, #56]	; (8002138 <HAL_SPI_MspInit+0xf8>)
 80020fe:	f001 f90d 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002114:	2305      	movs	r3, #5
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4619      	mov	r1, r3
 800211e:	4807      	ldr	r0, [pc, #28]	; (800213c <HAL_SPI_MspInit+0xfc>)
 8002120:	f001 f8fc 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002124:	bf00      	nop
 8002126:	3730      	adds	r7, #48	; 0x30
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40013000 	.word	0x40013000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000
 8002138:	40020c00 	.word	0x40020c00
 800213c:	40021800 	.word	0x40021800

08002140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	; 0x38
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a3f      	ldr	r2, [pc, #252]	; (800225c <HAL_TIM_Base_MspInit+0x11c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10c      	bne.n	800217c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002162:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a3e      	ldr	r2, [pc, #248]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b3c      	ldr	r3, [pc, #240]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	623b      	str	r3, [r7, #32]
 8002178:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800217a:	e06b      	b.n	8002254 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002184:	d129      	bne.n	80021da <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002186:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a35      	ldr	r2, [pc, #212]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b33      	ldr	r3, [pc, #204]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a2f      	ldr	r2, [pc, #188]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 80021b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c8:	2301      	movs	r3, #1
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4824      	ldr	r0, [pc, #144]	; (8002264 <HAL_TIM_Base_MspInit+0x124>)
 80021d4:	f001 f8a2 	bl	800331c <HAL_GPIO_Init>
}
 80021d8:	e03c      	b.n	8002254 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a22      	ldr	r2, [pc, #136]	; (8002268 <HAL_TIM_Base_MspInit+0x128>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d10c      	bne.n	80021fe <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697b      	ldr	r3, [r7, #20]
}
 80021fc:	e02a      	b.n	8002254 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1a      	ldr	r2, [pc, #104]	; (800226c <HAL_TIM_Base_MspInit+0x12c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d114      	bne.n	8002232 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	6413      	str	r3, [r2, #64]	; 0x40
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2101      	movs	r1, #1
 8002224:	2036      	movs	r0, #54	; 0x36
 8002226:	f001 f842 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800222a:	2036      	movs	r0, #54	; 0x36
 800222c:	f001 f85b 	bl	80032e6 <HAL_NVIC_EnableIRQ>
}
 8002230:	e010      	b.n	8002254 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <HAL_TIM_Base_MspInit+0x130>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d10b      	bne.n	8002254 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	6453      	str	r3, [r2, #68]	; 0x44
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_TIM_Base_MspInit+0x120>)
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	bf00      	nop
 8002256:	3738      	adds	r7, #56	; 0x38
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010000 	.word	0x40010000
 8002260:	40023800 	.word	0x40023800
 8002264:	40020400 	.word	0x40020400
 8002268:	40000c00 	.word	0x40000c00
 800226c:	40001000 	.word	0x40001000
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a2e      	ldr	r2, [pc, #184]	; (800234c <HAL_TIM_Encoder_MspInit+0xd8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d128      	bne.n	80022e8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a2d      	ldr	r2, [pc, #180]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a27      	ldr	r2, [pc, #156]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 80022c6:	2330      	movs	r3, #48	; 0x30
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d6:	2302      	movs	r3, #2
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	481c      	ldr	r0, [pc, #112]	; (8002354 <HAL_TIM_Encoder_MspInit+0xe0>)
 80022e2:	f001 f81b 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022e6:	e02d      	b.n	8002344 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_TIM_Encoder_MspInit+0xe4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d128      	bne.n	8002344 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a16      	ldr	r2, [pc, #88]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002310:	f043 0308 	orr.w	r3, r3, #8
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8002322:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002334:	2302      	movs	r3, #2
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	4619      	mov	r1, r3
 800233e:	4807      	ldr	r0, [pc, #28]	; (800235c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002340:	f000 ffec 	bl	800331c <HAL_GPIO_Init>
}
 8002344:	bf00      	nop
 8002346:	3730      	adds	r7, #48	; 0x30
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40000400 	.word	0x40000400
 8002350:	40023800 	.word	0x40023800
 8002354:	40020400 	.word	0x40020400
 8002358:	40000800 	.word	0x40000800
 800235c:	40020c00 	.word	0x40020c00

08002360 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_TIM_PWM_MspInit+0x38>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10b      	bne.n	800238a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_TIM_PWM_MspInit+0x3c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_TIM_PWM_MspInit+0x3c>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <HAL_TIM_PWM_MspInit+0x3c>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40014000 	.word	0x40014000
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a56      	ldr	r2, [pc, #344]	; (8002518 <HAL_TIM_MspPostInit+0x178>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11d      	bne.n	80023fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c2:	4b56      	ldr	r3, [pc, #344]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a55      	ldr	r2, [pc, #340]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 80023c8:	f043 0310 	orr.w	r3, r3, #16
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80023da:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	484a      	ldr	r0, [pc, #296]	; (8002520 <HAL_TIM_MspPostInit+0x180>)
 80023f8:	f000 ff90 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80023fc:	e088      	b.n	8002510 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002406:	d11d      	bne.n	8002444 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	4b44      	ldr	r3, [pc, #272]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4a43      	ldr	r2, [pc, #268]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6313      	str	r3, [r2, #48]	; 0x30
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002432:	2301      	movs	r3, #1
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	4619      	mov	r1, r3
 800243c:	4839      	ldr	r0, [pc, #228]	; (8002524 <HAL_TIM_MspPostInit+0x184>)
 800243e:	f000 ff6d 	bl	800331c <HAL_GPIO_Init>
}
 8002442:	e065      	b.n	8002510 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a37      	ldr	r2, [pc, #220]	; (8002528 <HAL_TIM_MspPostInit+0x188>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d11c      	bne.n	8002488 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	4b33      	ldr	r3, [pc, #204]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a32      	ldr	r2, [pc, #200]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002466:	2301      	movs	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002476:	2302      	movs	r3, #2
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	4828      	ldr	r0, [pc, #160]	; (8002524 <HAL_TIM_MspPostInit+0x184>)
 8002482:	f000 ff4b 	bl	800331c <HAL_GPIO_Init>
}
 8002486:	e043      	b.n	8002510 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_TIM_MspPostInit+0x18c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d11d      	bne.n	80024ce <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a21      	ldr	r2, [pc, #132]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b1f      	ldr	r3, [pc, #124]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 80024aa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024bc:	2303      	movs	r3, #3
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	4619      	mov	r1, r3
 80024c6:	481a      	ldr	r0, [pc, #104]	; (8002530 <HAL_TIM_MspPostInit+0x190>)
 80024c8:	f000 ff28 	bl	800331c <HAL_GPIO_Init>
}
 80024cc:	e020      	b.n	8002510 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_TIM_MspPostInit+0x194>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d11b      	bne.n	8002510 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4a0f      	ldr	r2, [pc, #60]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 80024de:	f043 0310 	orr.w	r3, r3, #16
 80024e2:	6313      	str	r3, [r2, #48]	; 0x30
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_TIM_MspPostInit+0x17c>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 80024f0:	2360      	movs	r3, #96	; 0x60
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002500:	2303      	movs	r3, #3
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <HAL_TIM_MspPostInit+0x180>)
 800250c:	f000 ff06 	bl	800331c <HAL_GPIO_Init>
}
 8002510:	bf00      	nop
 8002512:	3730      	adds	r7, #48	; 0x30
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40010000 	.word	0x40010000
 800251c:	40023800 	.word	0x40023800
 8002520:	40021000 	.word	0x40021000
 8002524:	40020000 	.word	0x40020000
 8002528:	40000c00 	.word	0x40000c00
 800252c:	40010400 	.word	0x40010400
 8002530:	40020800 	.word	0x40020800
 8002534:	40014000 	.word	0x40014000

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b0b6      	sub	sp, #216	; 0xd8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002554:	2290      	movs	r2, #144	; 0x90
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f005 fce9 	bl	8007f30 <memset>
  if(huart->Instance==UART4)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4aa0      	ldr	r2, [pc, #640]	; (80027e4 <HAL_UART_MspInit+0x2ac>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d13e      	bne.n	80025e6 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002574:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002578:	4618      	mov	r0, r3
 800257a:	f002 fbb9 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002584:	f7ff fc4a 	bl	8001e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002588:	4b97      	ldr	r3, [pc, #604]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a96      	ldr	r2, [pc, #600]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 800258e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
 8002594:	4b94      	ldr	r3, [pc, #592]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a0:	4b91      	ldr	r3, [pc, #580]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	4a90      	ldr	r2, [pc, #576]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6313      	str	r3, [r2, #48]	; 0x30
 80025ac:	4b8e      	ldr	r3, [pc, #568]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80025b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025d2:	2308      	movs	r3, #8
 80025d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025dc:	4619      	mov	r1, r3
 80025de:	4883      	ldr	r0, [pc, #524]	; (80027ec <HAL_UART_MspInit+0x2b4>)
 80025e0:	f000 fe9c 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025e4:	e151      	b.n	800288a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a81      	ldr	r2, [pc, #516]	; (80027f0 <HAL_UART_MspInit+0x2b8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d160      	bne.n	80026b2 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80025f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002600:	4618      	mov	r0, r3
 8002602:	f002 fb75 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800260c:	f7ff fc06 	bl	8001e1c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	4a74      	ldr	r2, [pc, #464]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 8002616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800261a:	6413      	str	r3, [r2, #64]	; 0x40
 800261c:	4b72      	ldr	r3, [pc, #456]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002628:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4a6e      	ldr	r2, [pc, #440]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 800262e:	f043 0302 	orr.w	r3, r3, #2
 8002632:	6313      	str	r3, [r2, #48]	; 0x30
 8002634:	4b6c      	ldr	r3, [pc, #432]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002640:	4b69      	ldr	r3, [pc, #420]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	4a68      	ldr	r2, [pc, #416]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6313      	str	r3, [r2, #48]	; 0x30
 800264c:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	623b      	str	r3, [r7, #32]
 8002656:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800265c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002672:	2308      	movs	r3, #8
 8002674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800267c:	4619      	mov	r1, r3
 800267e:	485d      	ldr	r0, [pc, #372]	; (80027f4 <HAL_UART_MspInit+0x2bc>)
 8002680:	f000 fe4c 	bl	800331c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800269e:	2308      	movs	r3, #8
 80026a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4850      	ldr	r0, [pc, #320]	; (80027ec <HAL_UART_MspInit+0x2b4>)
 80026ac:	f000 fe36 	bl	800331c <HAL_GPIO_Init>
}
 80026b0:	e0eb      	b.n	800288a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <HAL_UART_MspInit+0x2c0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d151      	bne.n	8002760 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026bc:	2340      	movs	r3, #64	; 0x40
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026c0:	2300      	movs	r3, #0
 80026c2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fb11 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80026d4:	f7ff fba2 	bl	8001e1c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026d8:	4b43      	ldr	r3, [pc, #268]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	4a42      	ldr	r2, [pc, #264]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80026de:	f043 0310 	orr.w	r3, r3, #16
 80026e2:	6453      	str	r3, [r2, #68]	; 0x44
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	6313      	str	r3, [r2, #48]	; 0x30
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271c:	2303      	movs	r3, #3
 800271e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002722:	2304      	movs	r3, #4
 8002724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800272c:	4619      	mov	r1, r3
 800272e:	4831      	ldr	r0, [pc, #196]	; (80027f4 <HAL_UART_MspInit+0x2bc>)
 8002730:	f000 fdf4 	bl	800331c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002734:	2340      	movs	r3, #64	; 0x40
 8002736:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800274c:	2307      	movs	r3, #7
 800274e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002756:	4619      	mov	r1, r3
 8002758:	4826      	ldr	r0, [pc, #152]	; (80027f4 <HAL_UART_MspInit+0x2bc>)
 800275a:	f000 fddf 	bl	800331c <HAL_GPIO_Init>
}
 800275e:	e094      	b.n	800288a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a25      	ldr	r2, [pc, #148]	; (80027fc <HAL_UART_MspInit+0x2c4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d14c      	bne.n	8002804 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800276e:	2300      	movs	r3, #0
 8002770:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002772:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002776:	4618      	mov	r0, r3
 8002778:	f002 faba 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002782:	f7ff fb4b 	bl	8001e1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_UART_MspInit+0x2b0>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027b6:	2360      	movs	r3, #96	; 0x60
 80027b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ce:	2307      	movs	r3, #7
 80027d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027d8:	4619      	mov	r1, r3
 80027da:	4809      	ldr	r0, [pc, #36]	; (8002800 <HAL_UART_MspInit+0x2c8>)
 80027dc:	f000 fd9e 	bl	800331c <HAL_GPIO_Init>
}
 80027e0:	e053      	b.n	800288a <HAL_UART_MspInit+0x352>
 80027e2:	bf00      	nop
 80027e4:	40004c00 	.word	0x40004c00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020800 	.word	0x40020800
 80027f0:	40005000 	.word	0x40005000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40004400 	.word	0x40004400
 8002800:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a22      	ldr	r2, [pc, #136]	; (8002894 <HAL_UART_MspInit+0x35c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d13d      	bne.n	800288a <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800280e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800281a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800281e:	4618      	mov	r0, r3
 8002820:	f002 fa66 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800282a:	f7ff faf7 	bl	8001e1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_UART_MspInit+0x360>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_UART_MspInit+0x360>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_UART_MspInit+0x360>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_UART_MspInit+0x360>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a13      	ldr	r2, [pc, #76]	; (8002898 <HAL_UART_MspInit+0x360>)
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_UART_MspInit+0x360>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800285e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002862:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002878:	2307      	movs	r3, #7
 800287a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800287e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002882:	4619      	mov	r1, r3
 8002884:	4805      	ldr	r0, [pc, #20]	; (800289c <HAL_UART_MspInit+0x364>)
 8002886:	f000 fd49 	bl	800331c <HAL_GPIO_Init>
}
 800288a:	bf00      	nop
 800288c:	37d8      	adds	r7, #216	; 0xd8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40004800 	.word	0x40004800
 8002898:	40023800 	.word	0x40023800
 800289c:	40020c00 	.word	0x40020c00

080028a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <NMI_Handler+0x4>

080028a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <HardFault_Handler+0x4>

080028ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <MemManage_Handler+0x4>

080028b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b6:	e7fe      	b.n	80028b6 <BusFault_Handler+0x4>

080028b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <UsageFault_Handler+0x4>

080028be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ec:	f000 f92c 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <TIM6_DAC_IRQHandler+0x10>)
 80028fa:	f003 fae3 	bl	8005ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000364 	.word	0x20000364

08002908 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e00a      	b.n	8002930 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291a:	f3af 8000 	nop.w
 800291e:	4601      	mov	r1, r0
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	b2ca      	uxtb	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf0      	blt.n	800291a <_read+0x12>
	}

return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e009      	b.n	8002968 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	60ba      	str	r2, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	dbf1      	blt.n	8002954 <_write+0x12>
	}
	return len;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_close>:

int _close(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	return -1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a2:	605a      	str	r2, [r3, #4]
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_isatty>:

int _isatty(int file)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	return 1;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
	return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f005 fa54 	bl	8007ec0 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20080000 	.word	0x20080000
 8002a44:	00000400 	.word	0x00000400
 8002a48:	20000808 	.word	0x20000808
 8002a4c:	20000820 	.word	0x20000820

08002a50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <SystemInit+0x28>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <SystemInit+0x28>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <SystemInit+0x28>)
 8002a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a6a:	609a      	str	r2, [r3, #8]
#endif
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ab4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a82:	e003      	b.n	8002a8c <LoopCopyDataInit>

08002a84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a8a:	3104      	adds	r1, #4

08002a8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a8c:	480b      	ldr	r0, [pc, #44]	; (8002abc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a94:	d3f6      	bcc.n	8002a84 <CopyDataInit>
  ldr  r2, =_sbss
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a98:	e002      	b.n	8002aa0 <LoopFillZerobss>

08002a9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a9c:	f842 3b04 	str.w	r3, [r2], #4

08002aa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002aa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002aa4:	d3f9      	bcc.n	8002a9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aa6:	f7ff ffd3 	bl	8002a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aaa:	f005 fa0f 	bl	8007ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aae:	f7fe f87b 	bl	8000ba8 <main>
  bx  lr    
 8002ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ab4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002ab8:	08008f68 	.word	0x08008f68
  ldr  r0, =_sdata
 8002abc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ac0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002ac4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002ac8:	20000820 	.word	0x20000820

08002acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002acc:	e7fe      	b.n	8002acc <ADC_IRQHandler>

08002ace <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f000 fbe0 	bl	8003298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f000 f805 	bl	8002ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ade:	f7ff f9a3 	bl	8001e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_InitTick+0x54>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_InitTick+0x58>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fbfb 	bl	8003302 <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00e      	b.n	8002b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f000 fbc3 	bl	80032ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <HAL_InitTick+0x5c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000008 	.word	0x20000008
 8002b40:	20000010 	.word	0x20000010
 8002b44:	2000000c 	.word	0x2000000c

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x20>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x24>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_IncTick+0x24>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000010 	.word	0x20000010
 8002b6c:	2000080c 	.word	0x2000080c

08002b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_GetTick+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	2000080c 	.word	0x2000080c

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff ffee 	bl	8002b70 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000010 	.word	0x20000010

08002bd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e031      	b.n	8002c4a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff f93e 	bl	8001e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_ADC_Init+0x84>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	f043 0202 	orr.w	r2, r3, #2
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f970 	bl	8002f04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
 8002c3a:	e001      	b.n	8002c40 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	ffffeefd 	.word	0xffffeefd

08002c58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x1c>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e136      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x28a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	d93a      	bls.n	8002cfa <HAL_ADC_ConfigChannel+0xa2>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c8c:	d035      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68d9      	ldr	r1, [r3, #12]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b1e      	subs	r3, #30
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a8d      	ldr	r2, [pc, #564]	; (8002ef0 <HAL_ADC_ConfigChannel+0x298>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68d9      	ldr	r1, [r3, #12]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	061a      	lsls	r2, r3, #24
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd2:	e035      	b.n	8002d40 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68d9      	ldr	r1, [r3, #12]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4403      	add	r3, r0
 8002cec:	3b1e      	subs	r3, #30
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cf8:	e022      	b.n	8002d40 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6919      	ldr	r1, [r3, #16]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	2207      	movs	r2, #7
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43da      	mvns	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6919      	ldr	r1, [r3, #16]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4603      	mov	r3, r0
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4403      	add	r3, r0
 8002d36:	409a      	lsls	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b06      	cmp	r3, #6
 8002d46:	d824      	bhi.n	8002d92 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	3b05      	subs	r3, #5
 8002d5a:	221f      	movs	r2, #31
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43da      	mvns	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	400a      	ands	r2, r1
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	4618      	mov	r0, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	3b05      	subs	r3, #5
 8002d84:	fa00 f203 	lsl.w	r2, r0, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d90:	e04c      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d824      	bhi.n	8002de4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	3b23      	subs	r3, #35	; 0x23
 8002dac:	221f      	movs	r2, #31
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	400a      	ands	r2, r1
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3b23      	subs	r3, #35	; 0x23
 8002dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
 8002de2:	e023      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b41      	subs	r3, #65	; 0x41
 8002df6:	221f      	movs	r2, #31
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	400a      	ands	r2, r1
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3b41      	subs	r3, #65	; 0x41
 8002e20:	fa00 f203 	lsl.w	r2, r0, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a30      	ldr	r2, [pc, #192]	; (8002ef4 <HAL_ADC_ConfigChannel+0x29c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x1f4>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e3e:	d105      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e40:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e46:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e4a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_ADC_ConfigChannel+0x29c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10f      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x21e>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b12      	cmp	r3, #18
 8002e5c:	d10b      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e68:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e74:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_ADC_ConfigChannel+0x29c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d12b      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x280>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1a      	ldr	r2, [pc, #104]	; (8002ef0 <HAL_ADC_ConfigChannel+0x298>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d003      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x23a>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b11      	cmp	r3, #17
 8002e90:	d122      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e9c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ea8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a10      	ldr	r2, [pc, #64]	; (8002ef0 <HAL_ADC_ConfigChannel+0x298>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d111      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_ADC_ConfigChannel+0x2a4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_ADC_ConfigChannel+0x2a8>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9a      	lsrs	r2, r3, #18
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002eca:	e002      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f9      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	10000012 	.word	0x10000012
 8002ef4:	40012000 	.word	0x40012000
 8002ef8:	40012300 	.word	0x40012300
 8002efc:	20000008 	.word	0x20000008
 8002f00:	431bde83 	.word	0x431bde83

08002f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f0c:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <ADC_Init+0x1ec>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <ADC_Init+0x1ec>)
 8002f12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f16:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f18:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <ADC_Init+0x1ec>)
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4973      	ldr	r1, [pc, #460]	; (80030f0 <ADC_Init+0x1ec>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	021a      	lsls	r2, r3, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <ADC_Init+0x1f0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6899      	ldr	r1, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e00f      	b.n	8002ffe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0202 	bic.w	r2, r2, #2
 800300c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6899      	ldr	r1, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	005a      	lsls	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800304a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	035a      	lsls	r2, r3, #13
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	e007      	b.n	8003074 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	3b01      	subs	r3, #1
 8003090:	051a      	lsls	r2, r3, #20
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6899      	ldr	r1, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030b6:	025a      	lsls	r2, r3, #9
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	029a      	lsls	r2, r3, #10
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012300 	.word	0x40012300
 80030f4:	0f000001 	.word	0x0f000001

080030f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <__NVIC_SetPriorityGrouping+0x40>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003114:	4013      	ands	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 8003122:	4313      	orrs	r3, r2
 8003124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <__NVIC_SetPriorityGrouping+0x40>)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	60d3      	str	r3, [r2, #12]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	05fa0000 	.word	0x05fa0000

08003140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <__NVIC_GetPriorityGrouping+0x18>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 0307 	and.w	r3, r3, #7
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db0b      	blt.n	8003186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <__NVIC_EnableIRQ+0x38>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
         );
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003264:	d301      	bcc.n	800326a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003266:	2301      	movs	r3, #1
 8003268:	e00f      	b.n	800328a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <SysTick_Config+0x40>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003272:	210f      	movs	r1, #15
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f7ff ff8e 	bl	8003198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SysTick_Config+0x40>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <SysTick_Config+0x40>)
 8003284:	2207      	movs	r2, #7
 8003286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000e010 	.word	0xe000e010

08003298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff29 	bl	80030f8 <__NVIC_SetPriorityGrouping>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c0:	f7ff ff3e 	bl	8003140 <__NVIC_GetPriorityGrouping>
 80032c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f7ff ff8e 	bl	80031ec <NVIC_EncodePriority>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff5d 	bl	8003198 <__NVIC_SetPriority>
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff31 	bl	800315c <__NVIC_EnableIRQ>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffa2 	bl	8003254 <SysTick_Config>
 8003310:	4603      	mov	r3, r0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e175      	b.n	8003628 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	429a      	cmp	r2, r3
 8003356:	f040 8164 	bne.w	8003622 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d005      	beq.n	8003372 <HAL_GPIO_Init+0x56>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d130      	bne.n	80033d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a8:	2201      	movs	r2, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 0201 	and.w	r2, r3, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d017      	beq.n	8003410 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d123      	bne.n	8003464 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	08da      	lsrs	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	08da      	lsrs	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0203 	and.w	r2, r3, #3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80be 	beq.w	8003622 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a6:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_GPIO_Init+0x324>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a65      	ldr	r2, [pc, #404]	; (8003640 <HAL_GPIO_Init+0x324>)
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_GPIO_Init+0x324>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034be:	4a61      	ldr	r2, [pc, #388]	; (8003644 <HAL_GPIO_Init+0x328>)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_GPIO_Init+0x32c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d037      	beq.n	800355a <HAL_GPIO_Init+0x23e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a57      	ldr	r2, [pc, #348]	; (800364c <HAL_GPIO_Init+0x330>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d031      	beq.n	8003556 <HAL_GPIO_Init+0x23a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a56      	ldr	r2, [pc, #344]	; (8003650 <HAL_GPIO_Init+0x334>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02b      	beq.n	8003552 <HAL_GPIO_Init+0x236>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a55      	ldr	r2, [pc, #340]	; (8003654 <HAL_GPIO_Init+0x338>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d025      	beq.n	800354e <HAL_GPIO_Init+0x232>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a54      	ldr	r2, [pc, #336]	; (8003658 <HAL_GPIO_Init+0x33c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01f      	beq.n	800354a <HAL_GPIO_Init+0x22e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a53      	ldr	r2, [pc, #332]	; (800365c <HAL_GPIO_Init+0x340>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d019      	beq.n	8003546 <HAL_GPIO_Init+0x22a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_GPIO_Init+0x344>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_GPIO_Init+0x226>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a51      	ldr	r2, [pc, #324]	; (8003664 <HAL_GPIO_Init+0x348>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00d      	beq.n	800353e <HAL_GPIO_Init+0x222>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a50      	ldr	r2, [pc, #320]	; (8003668 <HAL_GPIO_Init+0x34c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <HAL_GPIO_Init+0x21e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4f      	ldr	r2, [pc, #316]	; (800366c <HAL_GPIO_Init+0x350>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_GPIO_Init+0x21a>
 8003532:	2309      	movs	r3, #9
 8003534:	e012      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003536:	230a      	movs	r3, #10
 8003538:	e010      	b.n	800355c <HAL_GPIO_Init+0x240>
 800353a:	2308      	movs	r3, #8
 800353c:	e00e      	b.n	800355c <HAL_GPIO_Init+0x240>
 800353e:	2307      	movs	r3, #7
 8003540:	e00c      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003542:	2306      	movs	r3, #6
 8003544:	e00a      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003546:	2305      	movs	r3, #5
 8003548:	e008      	b.n	800355c <HAL_GPIO_Init+0x240>
 800354a:	2304      	movs	r3, #4
 800354c:	e006      	b.n	800355c <HAL_GPIO_Init+0x240>
 800354e:	2303      	movs	r3, #3
 8003550:	e004      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003552:	2302      	movs	r3, #2
 8003554:	e002      	b.n	800355c <HAL_GPIO_Init+0x240>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_GPIO_Init+0x240>
 800355a:	2300      	movs	r3, #0
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f002 0203 	and.w	r2, r2, #3
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	4093      	lsls	r3, r2
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800356c:	4935      	ldr	r1, [pc, #212]	; (8003644 <HAL_GPIO_Init+0x328>)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	3302      	adds	r3, #2
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357a:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_GPIO_Init+0x354>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800359e:	4a34      	ldr	r2, [pc, #208]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c8:	4a29      	ldr	r2, [pc, #164]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ce:	4b28      	ldr	r3, [pc, #160]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f2:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_GPIO_Init+0x354>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <HAL_GPIO_Init+0x354>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b0f      	cmp	r3, #15
 800362c:	f67f ae86 	bls.w	800333c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	40013800 	.word	0x40013800
 8003648:	40020000 	.word	0x40020000
 800364c:	40020400 	.word	0x40020400
 8003650:	40020800 	.word	0x40020800
 8003654:	40020c00 	.word	0x40020c00
 8003658:	40021000 	.word	0x40021000
 800365c:	40021400 	.word	0x40021400
 8003660:	40021800 	.word	0x40021800
 8003664:	40021c00 	.word	0x40021c00
 8003668:	40022000 	.word	0x40022000
 800366c:	40022400 	.word	0x40022400
 8003670:	40013c00 	.word	0x40013c00

08003674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
 8003680:	4613      	mov	r3, r2
 8003682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003684:	787b      	ldrb	r3, [r7, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003690:	e003      	b.n	800369a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003692:	887b      	ldrh	r3, [r7, #2]
 8003694:	041a      	lsls	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	619a      	str	r2, [r3, #24]
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07f      	b.n	80037ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe fc0e 	bl	8001ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	; 0x24
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003708:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	e006      	b.n	8003730 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800372e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d104      	bne.n	8003742 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003740:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_I2C_Init+0x11c>)
 800374e:	430b      	orrs	r3, r1
 8003750:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003760:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69d9      	ldr	r1, [r3, #28]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	02008000 	.word	0x02008000

080037c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	f040 80f9 	bne.w	80039e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_I2C_Mem_Write+0x34>
 80037f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0ed      	b.n	80039e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_I2C_Mem_Write+0x4e>
 8003812:	2302      	movs	r3, #2
 8003814:	e0e6      	b.n	80039e4 <HAL_I2C_Mem_Write+0x21c>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800381e:	f7ff f9a7 	bl	8002b70 <HAL_GetTick>
 8003822:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2319      	movs	r3, #25
 800382a:	2201      	movs	r2, #1
 800382c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fac3 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0d1      	b.n	80039e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2221      	movs	r2, #33	; 0x21
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003868:	88f8      	ldrh	r0, [r7, #6]
 800386a:	893a      	ldrh	r2, [r7, #8]
 800386c:	8979      	ldrh	r1, [r7, #10]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	4603      	mov	r3, r0
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f9d3 	bl	8003c24 <I2C_RequestMemoryWrite>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0a9      	b.n	80039e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2bff      	cmp	r3, #255	; 0xff
 8003898:	d90e      	bls.n	80038b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	8979      	ldrh	r1, [r7, #10]
 80038a8:	2300      	movs	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fc1f 	bl	80040f4 <I2C_TransferConfig>
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	8979      	ldrh	r1, [r7, #10]
 80038ca:	2300      	movs	r3, #0
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fc0e 	bl	80040f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 faad 	bl	8003e3c <I2C_WaitOnTXISFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e07b      	b.n	80039e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d034      	beq.n	8003990 <HAL_I2C_Mem_Write+0x1c8>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d130      	bne.n	8003990 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	2200      	movs	r2, #0
 8003936:	2180      	movs	r1, #128	; 0x80
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fa3f 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e04d      	b.n	80039e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2bff      	cmp	r3, #255	; 0xff
 8003950:	d90e      	bls.n	8003970 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	22ff      	movs	r2, #255	; 0xff
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	b2da      	uxtb	r2, r3
 800395e:	8979      	ldrh	r1, [r7, #10]
 8003960:	2300      	movs	r3, #0
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fbc3 	bl	80040f4 <I2C_TransferConfig>
 800396e:	e00f      	b.n	8003990 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	b2da      	uxtb	r2, r3
 8003980:	8979      	ldrh	r1, [r7, #10]
 8003982:	2300      	movs	r3, #0
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fbb2 	bl	80040f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d19e      	bne.n	80038d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fa8c 	bl	8003ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e01a      	b.n	80039e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2220      	movs	r2, #32
 80039b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_I2C_Mem_Write+0x224>)
 80039c2:	400b      	ands	r3, r1
 80039c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	fe00e800 	.word	0xfe00e800

080039f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	460b      	mov	r3, r1
 8003a04:	813b      	strh	r3, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	f040 80fd 	bne.w	8003c12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_I2C_Mem_Read+0x34>
 8003a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0f1      	b.n	8003c14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_I2C_Mem_Read+0x4e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e0ea      	b.n	8003c14 <HAL_I2C_Mem_Read+0x224>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a46:	f7ff f893 	bl	8002b70 <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2319      	movs	r3, #25
 8003a52:	2201      	movs	r2, #1
 8003a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f9af 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0d5      	b.n	8003c14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2222      	movs	r2, #34	; 0x22
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2240      	movs	r2, #64	; 0x40
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a90:	88f8      	ldrh	r0, [r7, #6]
 8003a92:	893a      	ldrh	r2, [r7, #8]
 8003a94:	8979      	ldrh	r1, [r7, #10]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f913 	bl	8003ccc <I2C_RequestMemoryRead>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0ad      	b.n	8003c14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2bff      	cmp	r3, #255	; 0xff
 8003ac0:	d90e      	bls.n	8003ae0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	22ff      	movs	r2, #255	; 0xff
 8003ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	8979      	ldrh	r1, [r7, #10]
 8003ad0:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <HAL_I2C_Mem_Read+0x22c>)
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fb0b 	bl	80040f4 <I2C_TransferConfig>
 8003ade:	e00f      	b.n	8003b00 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	8979      	ldrh	r1, [r7, #10]
 8003af2:	4b4a      	ldr	r3, [pc, #296]	; (8003c1c <HAL_I2C_Mem_Read+0x22c>)
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fafa 	bl	80040f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	2200      	movs	r2, #0
 8003b08:	2104      	movs	r1, #4
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f956 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07c      	b.n	8003c14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d034      	beq.n	8003bc0 <HAL_I2C_Mem_Read+0x1d0>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d130      	bne.n	8003bc0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	2200      	movs	r2, #0
 8003b66:	2180      	movs	r1, #128	; 0x80
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f927 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e04d      	b.n	8003c14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2bff      	cmp	r3, #255	; 0xff
 8003b80:	d90e      	bls.n	8003ba0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	22ff      	movs	r2, #255	; 0xff
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	8979      	ldrh	r1, [r7, #10]
 8003b90:	2300      	movs	r3, #0
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 faab 	bl	80040f4 <I2C_TransferConfig>
 8003b9e:	e00f      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	8979      	ldrh	r1, [r7, #10]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fa9a 	bl	80040f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d19a      	bne.n	8003b00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f974 	bl	8003ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e01a      	b.n	8003c14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2220      	movs	r2, #32
 8003be4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_I2C_Mem_Read+0x230>)
 8003bf2:	400b      	ands	r3, r1
 8003bf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
  }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	80002400 	.word	0x80002400
 8003c20:	fe00e800 	.word	0xfe00e800

08003c24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	4611      	mov	r1, r2
 8003c30:	461a      	mov	r2, r3
 8003c32:	4603      	mov	r3, r0
 8003c34:	817b      	strh	r3, [r7, #10]
 8003c36:	460b      	mov	r3, r1
 8003c38:	813b      	strh	r3, [r7, #8]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	8979      	ldrh	r1, [r7, #10]
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <I2C_RequestMemoryWrite+0xa4>)
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fa51 	bl	80040f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	69b9      	ldr	r1, [r7, #24]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f8f0 	bl	8003e3c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e02c      	b.n	8003cc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d105      	bne.n	8003c78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c6c:	893b      	ldrh	r3, [r7, #8]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
 8003c76:	e015      	b.n	8003ca4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c78:	893b      	ldrh	r3, [r7, #8]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	69b9      	ldr	r1, [r7, #24]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f8d6 	bl	8003e3c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e012      	b.n	8003cc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c9a:	893b      	ldrh	r3, [r7, #8]
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2180      	movs	r1, #128	; 0x80
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f884 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	80002000 	.word	0x80002000

08003ccc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	813b      	strh	r3, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	8979      	ldrh	r1, [r7, #10]
 8003cec:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <I2C_RequestMemoryRead+0xa4>)
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f9fe 	bl	80040f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	69b9      	ldr	r1, [r7, #24]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f89d 	bl	8003e3c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02c      	b.n	8003d66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d12:	893b      	ldrh	r3, [r7, #8]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d1c:	e015      	b.n	8003d4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d1e:	893b      	ldrh	r3, [r7, #8]
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	69b9      	ldr	r1, [r7, #24]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f883 	bl	8003e3c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e012      	b.n	8003d66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d40:	893b      	ldrh	r3, [r7, #8]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2200      	movs	r2, #0
 8003d52:	2140      	movs	r1, #64	; 0x40
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f831 	bl	8003dbc <I2C_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	80002000 	.word	0x80002000

08003d74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d103      	bne.n	8003d92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d007      	beq.n	8003db0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	619a      	str	r2, [r3, #24]
  }
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dcc:	e022      	b.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d01e      	beq.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd6:	f7fe fecb 	bl	8002b70 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d302      	bcc.n	8003dec <I2C_WaitOnFlagUntilTimeout+0x30>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d113      	bne.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e00f      	b.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d0cd      	beq.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e48:	e02c      	b.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f870 	bl	8003f34 <I2C_IsErrorOccurred>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e02a      	b.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e64:	d01e      	beq.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e66:	f7fe fe83 	bl	8002b70 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d113      	bne.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e007      	b.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d1cb      	bne.n	8003e4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec8:	e028      	b.n	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f830 	bl	8003f34 <I2C_IsErrorOccurred>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e026      	b.n	8003f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7fe fe47 	bl	8002b70 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d113      	bne.n	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e007      	b.n	8003f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d1cf      	bne.n	8003eca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d068      	beq.n	8004032 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2210      	movs	r2, #16
 8003f66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f68:	e049      	b.n	8003ffe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d045      	beq.n	8003ffe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fe fdfd 	bl	8002b70 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <I2C_IsErrorOccurred+0x54>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d13a      	bne.n	8003ffe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003faa:	d121      	bne.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb2:	d01d      	beq.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d01a      	beq.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fca:	f7fe fdd1 	bl	8002b70 <HAL_GetTick>
 8003fce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fd0:	e00e      	b.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fd2:	f7fe fdcd 	bl	8002b70 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b19      	cmp	r3, #25
 8003fde:	d907      	bls.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f043 0320 	orr.w	r3, r3, #32
 8003fe6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003fee:	e006      	b.n	8003ffe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d1e9      	bne.n	8003fd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b20      	cmp	r3, #32
 800400a:	d003      	beq.n	8004014 <I2C_IsErrorOccurred+0xe0>
 800400c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0aa      	beq.n	8003f6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2220      	movs	r2, #32
 8004022:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004054:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f043 0308 	orr.w	r3, r3, #8
 800406c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80040a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01c      	beq.n	80040e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff fe63 	bl	8003d74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <I2C_IsErrorOccurred+0x1bc>)
 80040ba:	400b      	ands	r3, r1
 80040bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80040e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3728      	adds	r7, #40	; 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	fe00e800 	.word	0xfe00e800

080040f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	817b      	strh	r3, [r7, #10]
 8004102:	4613      	mov	r3, r2
 8004104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004106:	897b      	ldrh	r3, [r7, #10]
 8004108:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800410c:	7a7b      	ldrb	r3, [r7, #9]
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004114:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	4313      	orrs	r3, r2
 800411e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004122:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	0d5b      	lsrs	r3, r3, #21
 800412e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <I2C_TransferConfig+0x60>)
 8004134:	430b      	orrs	r3, r1
 8004136:	43db      	mvns	r3, r3
 8004138:	ea02 0103 	and.w	r1, r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	03ff63ff 	.word	0x03ff63ff

08004158 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	d138      	bne.n	80041e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004178:	2302      	movs	r3, #2
 800417a:	e032      	b.n	80041e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	; 0x24
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b20      	cmp	r3, #32
 8004202:	d139      	bne.n	8004278 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800420e:	2302      	movs	r3, #2
 8004210:	e033      	b.n	800427a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2224      	movs	r2, #36	; 0x24
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004240:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004296:	6013      	str	r3, [r2, #0]
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40007000 	.word	0x40007000

080042a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	4b23      	ldr	r3, [pc, #140]	; (8004340 <HAL_PWREx_EnableOverDrive+0x98>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a22      	ldr	r2, [pc, #136]	; (8004340 <HAL_PWREx_EnableOverDrive+0x98>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_PWREx_EnableOverDrive+0x98>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042ca:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d6:	f7fe fc4b 	bl	8002b70 <HAL_GetTick>
 80042da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042dc:	e009      	b.n	80042f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042de:	f7fe fc47 	bl	8002b70 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ec:	d901      	bls.n	80042f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e022      	b.n	8004338 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042f2:	4b14      	ldr	r3, [pc, #80]	; (8004344 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fe:	d1ee      	bne.n	80042de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004300:	4b10      	ldr	r3, [pc, #64]	; (8004344 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0f      	ldr	r2, [pc, #60]	; (8004344 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800430c:	f7fe fc30 	bl	8002b70 <HAL_GetTick>
 8004310:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004312:	e009      	b.n	8004328 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004314:	f7fe fc2c 	bl	8002b70 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004322:	d901      	bls.n	8004328 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e007      	b.n	8004338 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_PWREx_EnableOverDrive+0x9c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004334:	d1ee      	bne.n	8004314 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40023800 	.word	0x40023800
 8004344:	40007000 	.word	0x40007000

08004348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004350:	2300      	movs	r3, #0
 8004352:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e29b      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8087 	beq.w	800447a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800436c:	4b96      	ldr	r3, [pc, #600]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b04      	cmp	r3, #4
 8004376:	d00c      	beq.n	8004392 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004378:	4b93      	ldr	r3, [pc, #588]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d112      	bne.n	80043aa <HAL_RCC_OscConfig+0x62>
 8004384:	4b90      	ldr	r3, [pc, #576]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004390:	d10b      	bne.n	80043aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004392:	4b8d      	ldr	r3, [pc, #564]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d06c      	beq.n	8004478 <HAL_RCC_OscConfig+0x130>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d168      	bne.n	8004478 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e275      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b2:	d106      	bne.n	80043c2 <HAL_RCC_OscConfig+0x7a>
 80043b4:	4b84      	ldr	r3, [pc, #528]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a83      	ldr	r2, [pc, #524]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80043ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	e02e      	b.n	8004420 <HAL_RCC_OscConfig+0xd8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x9c>
 80043ca:	4b7f      	ldr	r3, [pc, #508]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a7e      	ldr	r2, [pc, #504]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80043d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b7c      	ldr	r3, [pc, #496]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7b      	ldr	r2, [pc, #492]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80043dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01d      	b.n	8004420 <HAL_RCC_OscConfig+0xd8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0xc0>
 80043ee:	4b76      	ldr	r3, [pc, #472]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a75      	ldr	r2, [pc, #468]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b73      	ldr	r3, [pc, #460]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a72      	ldr	r2, [pc, #456]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xd8>
 8004408:	4b6f      	ldr	r3, [pc, #444]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a6e      	ldr	r2, [pc, #440]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b6c      	ldr	r3, [pc, #432]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a6b      	ldr	r2, [pc, #428]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fe fba2 	bl	8002b70 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004430:	f7fe fb9e 	bl	8002b70 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e229      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	4b61      	ldr	r3, [pc, #388]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xe8>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fe fb8e 	bl	8002b70 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fe fb8a 	bl	8002b70 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e215      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	4b57      	ldr	r3, [pc, #348]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x110>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d069      	beq.n	800455a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004486:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004492:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b08      	cmp	r3, #8
 800449c:	d11c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x190>
 800449e:	4b4a      	ldr	r3, [pc, #296]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	4b47      	ldr	r3, [pc, #284]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCC_OscConfig+0x17a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1e9      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	493d      	ldr	r1, [pc, #244]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	e040      	b.n	800455a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d023      	beq.n	8004528 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e0:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a38      	ldr	r2, [pc, #224]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fe fb40 	bl	8002b70 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fe fb3c 	bl	8002b70 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e1c7      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004506:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4929      	ldr	r1, [pc, #164]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]
 8004526:	e018      	b.n	800455a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fb1c 	bl	8002b70 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453c:	f7fe fb18 	bl	8002b70 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e1a3      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454e:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d038      	beq.n	80045d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d019      	beq.n	80045a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456e:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fe faf9 	bl	8002b70 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004582:	f7fe faf5 	bl	8002b70 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e180      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 8004596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x23a>
 80045a0:	e01a      	b.n	80045d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80045a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <HAL_RCC_OscConfig+0x280>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ae:	f7fe fadf 	bl	8002b70 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fe fadb 	bl	8002b70 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d903      	bls.n	80045cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e166      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
 80045c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045cc:	4b92      	ldr	r3, [pc, #584]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80045ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ee      	bne.n	80045b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80a4 	beq.w	800472e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e6:	4b8c      	ldr	r3, [pc, #560]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	4b89      	ldr	r3, [pc, #548]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a88      	ldr	r2, [pc, #544]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6413      	str	r3, [r2, #64]	; 0x40
 80045fe:	4b86      	ldr	r3, [pc, #536]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460e:	4b83      	ldr	r3, [pc, #524]	; (800481c <HAL_RCC_OscConfig+0x4d4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d118      	bne.n	800464c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800461a:	4b80      	ldr	r3, [pc, #512]	; (800481c <HAL_RCC_OscConfig+0x4d4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7f      	ldr	r2, [pc, #508]	; (800481c <HAL_RCC_OscConfig+0x4d4>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004626:	f7fe faa3 	bl	8002b70 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462e:	f7fe fa9f 	bl	8002b70 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b64      	cmp	r3, #100	; 0x64
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e12a      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004640:	4b76      	ldr	r3, [pc, #472]	; (800481c <HAL_RCC_OscConfig+0x4d4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d106      	bne.n	8004662 <HAL_RCC_OscConfig+0x31a>
 8004654:	4b70      	ldr	r3, [pc, #448]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4a6f      	ldr	r2, [pc, #444]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6713      	str	r3, [r2, #112]	; 0x70
 8004660:	e02d      	b.n	80046be <HAL_RCC_OscConfig+0x376>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0x33c>
 800466a:	4b6b      	ldr	r3, [pc, #428]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	4a6a      	ldr	r2, [pc, #424]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	6713      	str	r3, [r2, #112]	; 0x70
 8004676:	4b68      	ldr	r3, [pc, #416]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	4a67      	ldr	r2, [pc, #412]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 800467c:	f023 0304 	bic.w	r3, r3, #4
 8004680:	6713      	str	r3, [r2, #112]	; 0x70
 8004682:	e01c      	b.n	80046be <HAL_RCC_OscConfig+0x376>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b05      	cmp	r3, #5
 800468a:	d10c      	bne.n	80046a6 <HAL_RCC_OscConfig+0x35e>
 800468c:	4b62      	ldr	r3, [pc, #392]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a61      	ldr	r2, [pc, #388]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
 8004698:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	4a5e      	ldr	r2, [pc, #376]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6713      	str	r3, [r2, #112]	; 0x70
 80046a4:	e00b      	b.n	80046be <HAL_RCC_OscConfig+0x376>
 80046a6:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a5b      	ldr	r2, [pc, #364]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
 80046b2:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a58      	ldr	r2, [pc, #352]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d015      	beq.n	80046f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fe fa53 	bl	8002b70 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fe fa4f 	bl	8002b70 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0d8      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e4:	4b4c      	ldr	r3, [pc, #304]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ee      	beq.n	80046ce <HAL_RCC_OscConfig+0x386>
 80046f0:	e014      	b.n	800471c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f2:	f7fe fa3d 	bl	8002b70 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fe fa39 	bl	8002b70 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0c2      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004710:	4b41      	ldr	r3, [pc, #260]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1ee      	bne.n	80046fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	4a3c      	ldr	r2, [pc, #240]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80ae 	beq.w	8004894 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004738:	4b37      	ldr	r3, [pc, #220]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 030c 	and.w	r3, r3, #12
 8004740:	2b08      	cmp	r3, #8
 8004742:	d06d      	beq.n	8004820 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d14b      	bne.n	80047e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a31      	ldr	r2, [pc, #196]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fe fa0a 	bl	8002b70 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004760:	f7fe fa06 	bl	8002b70 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e091      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004772:	4b29      	ldr	r3, [pc, #164]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	019b      	lsls	r3, r3, #6
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	3b01      	subs	r3, #1
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	071b      	lsls	r3, r3, #28
 80047aa:	491b      	ldr	r1, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe f9d8 	bl	8002b70 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fe f9d4 	bl	8002b70 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e05f      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x47c>
 80047e2:	e057      	b.n	8004894 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a0b      	ldr	r2, [pc, #44]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fe f9be 	bl	8002b70 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fe f9ba 	bl	8002b70 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e045      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_RCC_OscConfig+0x4d0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x4b0>
 8004816:	e03d      	b.n	8004894 <HAL_RCC_OscConfig+0x54c>
 8004818:	40023800 	.word	0x40023800
 800481c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004820:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <HAL_RCC_OscConfig+0x558>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d030      	beq.n	8004890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d129      	bne.n	8004890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d122      	bne.n	8004890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004856:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004858:	4293      	cmp	r3, r2
 800485a:	d119      	bne.n	8004890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	3b01      	subs	r3, #1
 800486a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d10f      	bne.n	8004890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d107      	bne.n	8004890 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800

080048a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0d0      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048bc:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d910      	bls.n	80048ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b67      	ldr	r3, [pc, #412]	; (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 020f 	bic.w	r2, r3, #15
 80048d2:	4965      	ldr	r1, [pc, #404]	; (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b63      	ldr	r3, [pc, #396]	; (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0b8      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004904:	4b59      	ldr	r3, [pc, #356]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a58      	ldr	r2, [pc, #352]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 800490a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800490e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800491c:	4b53      	ldr	r3, [pc, #332]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4a52      	ldr	r2, [pc, #328]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004922:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004926:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004928:	4b50      	ldr	r3, [pc, #320]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	494d      	ldr	r1, [pc, #308]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d040      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494e:	4b47      	ldr	r3, [pc, #284]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d115      	bne.n	8004986 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e07f      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004966:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e073      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004976:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e06b      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004986:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 0203 	bic.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4936      	ldr	r1, [pc, #216]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004994:	4313      	orrs	r3, r2
 8004996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fe f8ea 	bl	8002b70 <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a0:	f7fe f8e6 	bl	8002b70 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e053      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 020c 	and.w	r2, r3, #12
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1eb      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d210      	bcs.n	80049f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 020f 	bic.w	r2, r3, #15
 80049de:	4922      	ldr	r1, [pc, #136]	; (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e032      	b.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a04:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4916      	ldr	r1, [pc, #88]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	490e      	ldr	r1, [pc, #56]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a36:	f000 f821 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	490a      	ldr	r1, [pc, #40]	; (8004a70 <HAL_RCC_ClockConfig+0x1cc>)
 8004a48:	5ccb      	ldrb	r3, [r1, r3]
 8004a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4e:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <HAL_RCC_ClockConfig+0x1d0>)
 8004a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_RCC_ClockConfig+0x1d4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe f846 	bl	8002ae8 <HAL_InitTick>

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40023c00 	.word	0x40023c00
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	08008ea8 	.word	0x08008ea8
 8004a74:	20000008 	.word	0x20000008
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a80:	b094      	sub	sp, #80	; 0x50
 8004a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	647b      	str	r3, [r7, #68]	; 0x44
 8004a88:	2300      	movs	r3, #0
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a94:	4b79      	ldr	r3, [pc, #484]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d00d      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x40>
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	f200 80e1 	bhi.w	8004c68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aae:	e0db      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4b73      	ldr	r3, [pc, #460]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ab4:	e0db      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ab6:	4b73      	ldr	r3, [pc, #460]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ab8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aba:	e0d8      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004abc:	4b6f      	ldr	r3, [pc, #444]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ac6:	4b6d      	ldr	r3, [pc, #436]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d063      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad2:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	099b      	lsrs	r3, r3, #6
 8004ad8:	2200      	movs	r2, #0
 8004ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8004adc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004aee:	4622      	mov	r2, r4
 8004af0:	462b      	mov	r3, r5
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	0159      	lsls	r1, r3, #5
 8004afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b00:	0150      	lsls	r0, r2, #5
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4621      	mov	r1, r4
 8004b08:	1a51      	subs	r1, r2, r1
 8004b0a:	6139      	str	r1, [r7, #16]
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b20:	4659      	mov	r1, fp
 8004b22:	018b      	lsls	r3, r1, #6
 8004b24:	4651      	mov	r1, sl
 8004b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b2a:	4651      	mov	r1, sl
 8004b2c:	018a      	lsls	r2, r1, #6
 8004b2e:	4651      	mov	r1, sl
 8004b30:	ebb2 0801 	subs.w	r8, r2, r1
 8004b34:	4659      	mov	r1, fp
 8004b36:	eb63 0901 	sbc.w	r9, r3, r1
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b4e:	4690      	mov	r8, r2
 8004b50:	4699      	mov	r9, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	eb18 0303 	adds.w	r3, r8, r3
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	eb49 0303 	adc.w	r3, r9, r3
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b6e:	4629      	mov	r1, r5
 8004b70:	024b      	lsls	r3, r1, #9
 8004b72:	4621      	mov	r1, r4
 8004b74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b78:	4621      	mov	r1, r4
 8004b7a:	024a      	lsls	r2, r1, #9
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b82:	2200      	movs	r2, #0
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b8c:	f7fb fba8 	bl	80002e0 <__aeabi_uldivmod>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4613      	mov	r3, r2
 8004b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b98:	e058      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9a:	4b38      	ldr	r3, [pc, #224]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	099b      	lsrs	r3, r3, #6
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004baa:	623b      	str	r3, [r7, #32]
 8004bac:	2300      	movs	r3, #0
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	f04f 0000 	mov.w	r0, #0
 8004bbc:	f04f 0100 	mov.w	r1, #0
 8004bc0:	0159      	lsls	r1, r3, #5
 8004bc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc6:	0150      	lsls	r0, r2, #5
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4641      	mov	r1, r8
 8004bce:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004be4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004be8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bec:	ebb2 040a 	subs.w	r4, r2, sl
 8004bf0:	eb63 050b 	sbc.w	r5, r3, fp
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	00eb      	lsls	r3, r5, #3
 8004bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c02:	00e2      	lsls	r2, r4, #3
 8004c04:	4614      	mov	r4, r2
 8004c06:	461d      	mov	r5, r3
 8004c08:	4643      	mov	r3, r8
 8004c0a:	18e3      	adds	r3, r4, r3
 8004c0c:	603b      	str	r3, [r7, #0]
 8004c0e:	464b      	mov	r3, r9
 8004c10:	eb45 0303 	adc.w	r3, r5, r3
 8004c14:	607b      	str	r3, [r7, #4]
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c22:	4629      	mov	r1, r5
 8004c24:	028b      	lsls	r3, r1, #10
 8004c26:	4621      	mov	r1, r4
 8004c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	028a      	lsls	r2, r1, #10
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c36:	2200      	movs	r2, #0
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	61fa      	str	r2, [r7, #28]
 8004c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c40:	f7fb fb4e 	bl	80002e0 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4613      	mov	r3, r2
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	3301      	adds	r3, #1
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004c5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c66:	e002      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3750      	adds	r7, #80	; 0x50
 8004c74:	46bd      	mov	sp, r7
 8004c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	007a1200 	.word	0x007a1200

08004c88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000008 	.word	0x20000008

08004ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ca4:	f7ff fff0 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	0a9b      	lsrs	r3, r3, #10
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4903      	ldr	r1, [pc, #12]	; (8004cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	08008eb8 	.word	0x08008eb8

08004cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ccc:	f7ff ffdc 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0b5b      	lsrs	r3, r3, #13
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4903      	ldr	r1, [pc, #12]	; (8004cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	08008eb8 	.word	0x08008eb8

08004cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d012      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d18:	4b69      	ldr	r3, [pc, #420]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4a68      	ldr	r2, [pc, #416]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d22:	6093      	str	r3, [r2, #8]
 8004d24:	4b66      	ldr	r3, [pc, #408]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	4964      	ldr	r1, [pc, #400]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d017      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d4a:	4b5d      	ldr	r3, [pc, #372]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d58:	4959      	ldr	r1, [pc, #356]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d68:	d101      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d76:	2301      	movs	r3, #1
 8004d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d017      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d86:	4b4e      	ldr	r3, [pc, #312]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	494a      	ldr	r1, [pc, #296]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da4:	d101      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004da6:	2301      	movs	r3, #1
 8004da8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 808b 	beq.w	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dd4:	4b3a      	ldr	r3, [pc, #232]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	4a39      	ldr	r2, [pc, #228]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dde:	6413      	str	r3, [r2, #64]	; 0x40
 8004de0:	4b37      	ldr	r3, [pc, #220]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dec:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a34      	ldr	r2, [pc, #208]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df8:	f7fd feba 	bl	8002b70 <HAL_GetTick>
 8004dfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e00:	f7fd feb6 	bl	8002b70 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e38f      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e12:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e1e:	4b28      	ldr	r3, [pc, #160]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d035      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d02e      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e3c:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e46:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e52:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	4a1a      	ldr	r2, [pc, #104]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e5e:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e64:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d114      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fd fe7e 	bl	8002b70 <HAL_GetTick>
 8004e74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e76:	e00a      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e78:	f7fd fe7a 	bl	8002b70 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e351      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0ee      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ea6:	d111      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004eb4:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eb6:	400b      	ands	r3, r1
 8004eb8:	4901      	ldr	r1, [pc, #4]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
 8004ebe:	e00b      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	0ffffcff 	.word	0x0ffffcff
 8004ecc:	4bac      	ldr	r3, [pc, #688]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4aab      	ldr	r2, [pc, #684]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ed6:	6093      	str	r3, [r2, #8]
 8004ed8:	4ba9      	ldr	r3, [pc, #676]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee4:	49a6      	ldr	r1, [pc, #664]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d010      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ef6:	4ba2      	ldr	r3, [pc, #648]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efc:	4aa0      	ldr	r2, [pc, #640]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f06:	4b9e      	ldr	r3, [pc, #632]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	499b      	ldr	r1, [pc, #620]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f24:	4b96      	ldr	r3, [pc, #600]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f32:	4993      	ldr	r1, [pc, #588]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f46:	4b8e      	ldr	r3, [pc, #568]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f54:	498a      	ldr	r1, [pc, #552]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f68:	4b85      	ldr	r3, [pc, #532]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f76:	4982      	ldr	r1, [pc, #520]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f8a:	4b7d      	ldr	r3, [pc, #500]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	4979      	ldr	r1, [pc, #484]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fac:	4b74      	ldr	r3, [pc, #464]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f023 0203 	bic.w	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	4971      	ldr	r1, [pc, #452]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fce:	4b6c      	ldr	r3, [pc, #432]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f023 020c 	bic.w	r2, r3, #12
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fdc:	4968      	ldr	r1, [pc, #416]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff0:	4b63      	ldr	r3, [pc, #396]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	4960      	ldr	r1, [pc, #384]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005012:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005020:	4957      	ldr	r1, [pc, #348]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005034:	4b52      	ldr	r3, [pc, #328]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	494f      	ldr	r1, [pc, #316]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005056:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	4946      	ldr	r1, [pc, #280]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005078:	4b41      	ldr	r3, [pc, #260]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005086:	493e      	ldr	r1, [pc, #248]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a8:	4935      	ldr	r1, [pc, #212]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050bc:	4b30      	ldr	r3, [pc, #192]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ca:	492d      	ldr	r1, [pc, #180]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d011      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050de:	4b28      	ldr	r3, [pc, #160]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ec:	4924      	ldr	r1, [pc, #144]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050fc:	d101      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050fe:	2301      	movs	r3, #1
 8005100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800510e:	2301      	movs	r3, #1
 8005110:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800511e:	4b18      	ldr	r3, [pc, #96]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512c:	4914      	ldr	r1, [pc, #80]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00b      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005150:	490b      	ldr	r1, [pc, #44]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00f      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005174:	4902      	ldr	r1, [pc, #8]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800517c:	e002      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005190:	4b8a      	ldr	r3, [pc, #552]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005196:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	4986      	ldr	r1, [pc, #536]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051b4:	4b81      	ldr	r3, [pc, #516]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c4:	497d      	ldr	r1, [pc, #500]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d006      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 80d6 	beq.w	800538c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051e0:	4b76      	ldr	r3, [pc, #472]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a75      	ldr	r2, [pc, #468]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ec:	f7fd fcc0 	bl	8002b70 <HAL_GetTick>
 80051f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051f4:	f7fd fcbc 	bl	8002b70 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b64      	cmp	r3, #100	; 0x64
 8005200:	d901      	bls.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e195      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005206:	4b6d      	ldr	r3, [pc, #436]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d021      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	2b00      	cmp	r3, #0
 8005224:	d11d      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005226:	4b65      	ldr	r3, [pc, #404]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005234:	4b61      	ldr	r3, [pc, #388]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523a:	0e1b      	lsrs	r3, r3, #24
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	019a      	lsls	r2, r3, #6
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	431a      	orrs	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	061b      	lsls	r3, r3, #24
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	071b      	lsls	r3, r3, #28
 800525a:	4958      	ldr	r1, [pc, #352]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d004      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005276:	d00a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005280:	2b00      	cmp	r3, #0
 8005282:	d02e      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800528c:	d129      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800528e:	4b4b      	ldr	r3, [pc, #300]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800529c:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800529e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a2:	0f1b      	lsrs	r3, r3, #28
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	019a      	lsls	r2, r3, #6
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	431a      	orrs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	071b      	lsls	r3, r3, #28
 80052c2:	493e      	ldr	r1, [pc, #248]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052ca:	4b3c      	ldr	r3, [pc, #240]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d0:	f023 021f 	bic.w	r2, r3, #31
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	3b01      	subs	r3, #1
 80052da:	4938      	ldr	r1, [pc, #224]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01d      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052ee:	4b33      	ldr	r3, [pc, #204]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f4:	0e1b      	lsrs	r3, r3, #24
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052fc:	4b2f      	ldr	r3, [pc, #188]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005302:	0f1b      	lsrs	r3, r3, #28
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	019a      	lsls	r2, r3, #6
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	431a      	orrs	r2, r3
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	061b      	lsls	r3, r3, #24
 800531c:	431a      	orrs	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	071b      	lsls	r3, r3, #28
 8005322:	4926      	ldr	r1, [pc, #152]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d011      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	019a      	lsls	r2, r3, #6
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	041b      	lsls	r3, r3, #16
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	071b      	lsls	r3, r3, #28
 8005352:	491a      	ldr	r1, [pc, #104]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800535a:	4b18      	ldr	r3, [pc, #96]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005360:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005366:	f7fd fc03 	bl	8002b70 <HAL_GetTick>
 800536a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800536e:	f7fd fbff 	bl	8002b70 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b64      	cmp	r3, #100	; 0x64
 800537a:	d901      	bls.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e0d8      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005380:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b01      	cmp	r3, #1
 8005390:	f040 80ce 	bne.w	8005530 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005394:	4b09      	ldr	r3, [pc, #36]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a08      	ldr	r2, [pc, #32]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800539a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a0:	f7fd fbe6 	bl	8002b70 <HAL_GetTick>
 80053a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053a6:	e00b      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053a8:	f7fd fbe2 	bl	8002b70 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d904      	bls.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e0bb      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80053ba:	bf00      	nop
 80053bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053c0:	4b5e      	ldr	r3, [pc, #376]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053cc:	d0ec      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02e      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d12a      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053f6:	4b51      	ldr	r3, [pc, #324]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005404:	4b4d      	ldr	r3, [pc, #308]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	0f1b      	lsrs	r3, r3, #28
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	019a      	lsls	r2, r3, #6
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	061b      	lsls	r3, r3, #24
 8005424:	431a      	orrs	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	4944      	ldr	r1, [pc, #272]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005432:	4b42      	ldr	r3, [pc, #264]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005438:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	3b01      	subs	r3, #1
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	493d      	ldr	r1, [pc, #244]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d022      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800545c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005460:	d11d      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005462:	4b36      	ldr	r3, [pc, #216]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	0e1b      	lsrs	r3, r3, #24
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005470:	4b32      	ldr	r3, [pc, #200]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005476:	0f1b      	lsrs	r3, r3, #28
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	019a      	lsls	r2, r3, #6
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	431a      	orrs	r2, r3
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	061b      	lsls	r3, r3, #24
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	071b      	lsls	r3, r3, #28
 8005496:	4929      	ldr	r1, [pc, #164]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d028      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054aa:	4b24      	ldr	r3, [pc, #144]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	0e1b      	lsrs	r3, r3, #24
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054b8:	4b20      	ldr	r3, [pc, #128]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	019a      	lsls	r2, r3, #6
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	041b      	lsls	r3, r3, #16
 80054d0:	431a      	orrs	r2, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	071b      	lsls	r3, r3, #28
 80054de:	4917      	ldr	r1, [pc, #92]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054e6:	4b15      	ldr	r3, [pc, #84]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	4911      	ldr	r1, [pc, #68]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a0e      	ldr	r2, [pc, #56]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005508:	f7fd fb32 	bl	8002b70 <HAL_GetTick>
 800550c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005510:	f7fd fb2e 	bl	8002b70 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b64      	cmp	r3, #100	; 0x64
 800551c:	d901      	bls.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e007      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005522:	4b06      	ldr	r3, [pc, #24]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552e:	d1ef      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40023800 	.word	0x40023800

08005540 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e09d      	b.n	800568e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005562:	d009      	beq.n	8005578 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	61da      	str	r2, [r3, #28]
 800556a:	e005      	b.n	8005578 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fc fd54 	bl	8002040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055b8:	d902      	bls.n	80055c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e002      	b.n	80055c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055ce:	d007      	beq.n	80055e0 <HAL_SPI_Init+0xa0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	ea42 0103 	orr.w	r1, r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	f003 0204 	and.w	r2, r3, #4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800565c:	ea42 0103 	orr.w	r1, r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800567c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e049      	b.n	800573c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d106      	bne.n	80056c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fc fd3f 	bl	8002140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f001 f831 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d001      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e054      	b.n	8005806 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a26      	ldr	r2, [pc, #152]	; (8005814 <HAL_TIM_Base_Start_IT+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d022      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d01d      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a22      	ldr	r2, [pc, #136]	; (8005818 <HAL_TIM_Base_Start_IT+0xd4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a21      	ldr	r2, [pc, #132]	; (800581c <HAL_TIM_Base_Start_IT+0xd8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <HAL_TIM_Base_Start_IT+0xdc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <HAL_TIM_Base_Start_IT+0xe0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <HAL_TIM_Base_Start_IT+0xe4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x80>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HAL_TIM_Base_Start_IT+0xe8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d115      	bne.n	80057f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	4b19      	ldr	r3, [pc, #100]	; (8005830 <HAL_TIM_Base_Start_IT+0xec>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b06      	cmp	r3, #6
 80057d4:	d015      	beq.n	8005802 <HAL_TIM_Base_Start_IT+0xbe>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057dc:	d011      	beq.n	8005802 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ee:	e008      	b.n	8005802 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	e000      	b.n	8005804 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40010400 	.word	0x40010400
 8005828:	40014000 	.word	0x40014000
 800582c:	40001800 	.word	0x40001800
 8005830:	00010007 	.word	0x00010007

08005834 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e049      	b.n	80058da <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f841 	bl	80058e2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f000 ff62 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e049      	b.n	800599c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fc fd1f 	bl	8002360 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3304      	adds	r3, #4
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f000 ff01 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_TIM_PWM_Start+0x24>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	e03c      	b.n	8005a42 <HAL_TIM_PWM_Start+0x9e>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d109      	bne.n	80059e2 <HAL_TIM_PWM_Start+0x3e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	bf14      	ite	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	2300      	moveq	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	e02f      	b.n	8005a42 <HAL_TIM_PWM_Start+0x9e>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d109      	bne.n	80059fc <HAL_TIM_PWM_Start+0x58>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e022      	b.n	8005a42 <HAL_TIM_PWM_Start+0x9e>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b0c      	cmp	r3, #12
 8005a00:	d109      	bne.n	8005a16 <HAL_TIM_PWM_Start+0x72>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	bf14      	ite	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	2300      	moveq	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	e015      	b.n	8005a42 <HAL_TIM_PWM_Start+0x9e>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d109      	bne.n	8005a30 <HAL_TIM_PWM_Start+0x8c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	bf14      	ite	ne
 8005a28:	2301      	movne	r3, #1
 8005a2a:	2300      	moveq	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e008      	b.n	8005a42 <HAL_TIM_PWM_Start+0x9e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	bf14      	ite	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2300      	moveq	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e092      	b.n	8005b70 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_PWM_Start+0xb6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a58:	e023      	b.n	8005aa2 <HAL_TIM_PWM_Start+0xfe>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_PWM_Start+0xc6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a68:	e01b      	b.n	8005aa2 <HAL_TIM_PWM_Start+0xfe>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d104      	bne.n	8005a7a <HAL_TIM_PWM_Start+0xd6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a78:	e013      	b.n	8005aa2 <HAL_TIM_PWM_Start+0xfe>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b0c      	cmp	r3, #12
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_PWM_Start+0xe6>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a88:	e00b      	b.n	8005aa2 <HAL_TIM_PWM_Start+0xfe>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIM_PWM_Start+0xf6>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a98:	e003      	b.n	8005aa2 <HAL_TIM_PWM_Start+0xfe>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 fb08 	bl	80070c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a30      	ldr	r2, [pc, #192]	; (8005b78 <HAL_TIM_PWM_Start+0x1d4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_TIM_PWM_Start+0x120>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a2f      	ldr	r2, [pc, #188]	; (8005b7c <HAL_TIM_PWM_Start+0x1d8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d101      	bne.n	8005ac8 <HAL_TIM_PWM_Start+0x124>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <HAL_TIM_PWM_Start+0x126>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005adc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a25      	ldr	r2, [pc, #148]	; (8005b78 <HAL_TIM_PWM_Start+0x1d4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d022      	beq.n	8005b2e <HAL_TIM_PWM_Start+0x18a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d01d      	beq.n	8005b2e <HAL_TIM_PWM_Start+0x18a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a22      	ldr	r2, [pc, #136]	; (8005b80 <HAL_TIM_PWM_Start+0x1dc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d018      	beq.n	8005b2e <HAL_TIM_PWM_Start+0x18a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a20      	ldr	r2, [pc, #128]	; (8005b84 <HAL_TIM_PWM_Start+0x1e0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <HAL_TIM_PWM_Start+0x18a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1f      	ldr	r2, [pc, #124]	; (8005b88 <HAL_TIM_PWM_Start+0x1e4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00e      	beq.n	8005b2e <HAL_TIM_PWM_Start+0x18a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <HAL_TIM_PWM_Start+0x1d8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_TIM_PWM_Start+0x18a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_TIM_PWM_Start+0x1e8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_TIM_PWM_Start+0x18a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a19      	ldr	r2, [pc, #100]	; (8005b90 <HAL_TIM_PWM_Start+0x1ec>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d115      	bne.n	8005b5a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <HAL_TIM_PWM_Start+0x1f0>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b06      	cmp	r3, #6
 8005b3e:	d015      	beq.n	8005b6c <HAL_TIM_PWM_Start+0x1c8>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b46:	d011      	beq.n	8005b6c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b58:	e008      	b.n	8005b6c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0201 	orr.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e000      	b.n	8005b6e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40010400 	.word	0x40010400
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40000c00 	.word	0x40000c00
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40001800 	.word	0x40001800
 8005b94:	00010007 	.word	0x00010007

08005b98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e049      	b.n	8005c3e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f841 	bl	8005c46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f000 fdb0 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e08f      	b.n	8005d90 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fc faf5 	bl	8002274 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6899      	ldr	r1, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b3e      	ldr	r3, [pc, #248]	; (8005d98 <HAL_TIM_Encoder_Init+0x13c>)
 8005c9e:	400b      	ands	r3, r1
 8005ca0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4619      	mov	r1, r3
 8005cac:	4610      	mov	r0, r2
 8005cae:	f000 fd45 	bl	800673c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4b31      	ldr	r3, [pc, #196]	; (8005d9c <HAL_TIM_Encoder_Init+0x140>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <HAL_TIM_Encoder_Init+0x144>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <HAL_TIM_Encoder_Init+0x148>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	011a      	lsls	r2, r3, #4
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	031b      	lsls	r3, r3, #12
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	fffebff8 	.word	0xfffebff8
 8005d9c:	fffffcfc 	.word	0xfffffcfc
 8005da0:	fffff3f3 	.word	0xfffff3f3
 8005da4:	ffff0f0f 	.word	0xffff0f0f

08005da8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d110      	bne.n	8005dfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d102      	bne.n	8005de4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dde:	7b7b      	ldrb	r3, [r7, #13]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e069      	b.n	8005ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df8:	e031      	b.n	8005e5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d110      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d102      	bne.n	8005e0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e06:	7b3b      	ldrb	r3, [r7, #12]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d001      	beq.n	8005e10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e055      	b.n	8005ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e20:	e01d      	b.n	8005e5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d108      	bne.n	8005e3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d105      	bne.n	8005e3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e2e:	7b7b      	ldrb	r3, [r7, #13]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d102      	bne.n	8005e3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e34:	7b3b      	ldrb	r3, [r7, #12]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d001      	beq.n	8005e3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e03e      	b.n	8005ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_TIM_Encoder_Start+0xc4>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d008      	beq.n	8005e7c <HAL_TIM_Encoder_Start+0xd4>
 8005e6a:	e00f      	b.n	8005e8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2201      	movs	r2, #1
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 f923 	bl	80070c0 <TIM_CCxChannelCmd>
      break;
 8005e7a:	e016      	b.n	8005eaa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	2104      	movs	r1, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 f91b 	bl	80070c0 <TIM_CCxChannelCmd>
      break;
 8005e8a:	e00e      	b.n	8005eaa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2201      	movs	r2, #1
 8005e92:	2100      	movs	r1, #0
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 f913 	bl	80070c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	2104      	movs	r1, #4
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 f90c 	bl	80070c0 <TIM_CCxChannelCmd>
      break;
 8005ea8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d122      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d11b      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0202 	mvn.w	r2, #2
 8005ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fbfa 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fbec 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fbfd 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d122      	bne.n	8005f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d11b      	bne.n	8005f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0204 	mvn.w	r2, #4
 8005f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fbd0 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fbc2 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fbd3 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d122      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d11b      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0208 	mvn.w	r2, #8
 8005f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fba6 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8005fb4:	e005      	b.n	8005fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fb98 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fba9 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b10      	cmp	r3, #16
 8005fd4:	d122      	bne.n	800601c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d11b      	bne.n	800601c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0210 	mvn.w	r2, #16
 8005fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fb7c 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8006008:	e005      	b.n	8006016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fb6e 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fb7f 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b01      	cmp	r3, #1
 8006028:	d10e      	bne.n	8006048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b01      	cmp	r3, #1
 8006036:	d107      	bne.n	8006048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0201 	mvn.w	r2, #1
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fa fb70 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d10e      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	2b80      	cmp	r3, #128	; 0x80
 8006062:	d107      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800606c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f001 f962 	bl	8007338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006082:	d10e      	bne.n	80060a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608e:	2b80      	cmp	r3, #128	; 0x80
 8006090:	d107      	bne.n	80060a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800609a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 f955 	bl	800734c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	d10e      	bne.n	80060ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ba:	2b40      	cmp	r3, #64	; 0x40
 80060bc:	d107      	bne.n	80060ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fb2d 	bl	8006728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d10e      	bne.n	80060fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d107      	bne.n	80060fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f06f 0220 	mvn.w	r2, #32
 80060f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 f915 	bl	8007324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <HAL_TIM_OC_ConfigChannel+0x1e>
 800611e:	2302      	movs	r3, #2
 8006120:	e066      	b.n	80061f0 <HAL_TIM_OC_ConfigChannel+0xec>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b14      	cmp	r3, #20
 800612e:	d857      	bhi.n	80061e0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006130:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	0800618d 	.word	0x0800618d
 800613c:	080061e1 	.word	0x080061e1
 8006140:	080061e1 	.word	0x080061e1
 8006144:	080061e1 	.word	0x080061e1
 8006148:	0800619b 	.word	0x0800619b
 800614c:	080061e1 	.word	0x080061e1
 8006150:	080061e1 	.word	0x080061e1
 8006154:	080061e1 	.word	0x080061e1
 8006158:	080061a9 	.word	0x080061a9
 800615c:	080061e1 	.word	0x080061e1
 8006160:	080061e1 	.word	0x080061e1
 8006164:	080061e1 	.word	0x080061e1
 8006168:	080061b7 	.word	0x080061b7
 800616c:	080061e1 	.word	0x080061e1
 8006170:	080061e1 	.word	0x080061e1
 8006174:	080061e1 	.word	0x080061e1
 8006178:	080061c5 	.word	0x080061c5
 800617c:	080061e1 	.word	0x080061e1
 8006180:	080061e1 	.word	0x080061e1
 8006184:	080061e1 	.word	0x080061e1
 8006188:	080061d3 	.word	0x080061d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fb72 	bl	800687c <TIM_OC1_SetConfig>
      break;
 8006198:	e025      	b.n	80061e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fbdd 	bl	8006960 <TIM_OC2_SetConfig>
      break;
 80061a6:	e01e      	b.n	80061e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fc4e 	bl	8006a50 <TIM_OC3_SetConfig>
      break;
 80061b4:	e017      	b.n	80061e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fcbd 	bl	8006b3c <TIM_OC4_SetConfig>
      break;
 80061c2:	e010      	b.n	80061e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fd0e 	bl	8006bec <TIM_OC5_SetConfig>
      break;
 80061d0:	e009      	b.n	80061e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fd59 	bl	8006c90 <TIM_OC6_SetConfig>
      break;
 80061de:	e002      	b.n	80061e6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	75fb      	strb	r3, [r7, #23]
      break;
 80061e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006212:	2302      	movs	r3, #2
 8006214:	e088      	b.n	8006328 <HAL_TIM_IC_ConfigChannel+0x130>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11b      	bne.n	800625c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	6819      	ldr	r1, [r3, #0]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f000 fd80 	bl	8006d38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 020c 	bic.w	r2, r2, #12
 8006246:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6999      	ldr	r1, [r3, #24]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	619a      	str	r2, [r3, #24]
 800625a:	e060      	b.n	800631e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b04      	cmp	r3, #4
 8006260:	d11c      	bne.n	800629c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6819      	ldr	r1, [r3, #0]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f000 fe04 	bl	8006e7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006284:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6999      	ldr	r1, [r3, #24]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	021a      	lsls	r2, r3, #8
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	619a      	str	r2, [r3, #24]
 800629a:	e040      	b.n	800631e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d11b      	bne.n	80062da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6819      	ldr	r1, [r3, #0]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f000 fe51 	bl	8006f58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 020c 	bic.w	r2, r2, #12
 80062c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	61da      	str	r2, [r3, #28]
 80062d8:	e021      	b.n	800631e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b0c      	cmp	r3, #12
 80062de:	d11c      	bne.n	800631a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6819      	ldr	r1, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f000 fe6e 	bl	8006fd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006302:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69d9      	ldr	r1, [r3, #28]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	021a      	lsls	r2, r3, #8
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	61da      	str	r2, [r3, #28]
 8006318:	e001      	b.n	800631e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006326:	7dfb      	ldrb	r3, [r7, #23]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800634a:	2302      	movs	r3, #2
 800634c:	e0ff      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b14      	cmp	r3, #20
 800635a:	f200 80f0 	bhi.w	800653e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	080063b9 	.word	0x080063b9
 8006368:	0800653f 	.word	0x0800653f
 800636c:	0800653f 	.word	0x0800653f
 8006370:	0800653f 	.word	0x0800653f
 8006374:	080063f9 	.word	0x080063f9
 8006378:	0800653f 	.word	0x0800653f
 800637c:	0800653f 	.word	0x0800653f
 8006380:	0800653f 	.word	0x0800653f
 8006384:	0800643b 	.word	0x0800643b
 8006388:	0800653f 	.word	0x0800653f
 800638c:	0800653f 	.word	0x0800653f
 8006390:	0800653f 	.word	0x0800653f
 8006394:	0800647b 	.word	0x0800647b
 8006398:	0800653f 	.word	0x0800653f
 800639c:	0800653f 	.word	0x0800653f
 80063a0:	0800653f 	.word	0x0800653f
 80063a4:	080064bd 	.word	0x080064bd
 80063a8:	0800653f 	.word	0x0800653f
 80063ac:	0800653f 	.word	0x0800653f
 80063b0:	0800653f 	.word	0x0800653f
 80063b4:	080064fd 	.word	0x080064fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fa5c 	bl	800687c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0208 	orr.w	r2, r2, #8
 80063d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0204 	bic.w	r2, r2, #4
 80063e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6999      	ldr	r1, [r3, #24]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	619a      	str	r2, [r3, #24]
      break;
 80063f6:	e0a5      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 faae 	bl	8006960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6999      	ldr	r1, [r3, #24]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	021a      	lsls	r2, r3, #8
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	619a      	str	r2, [r3, #24]
      break;
 8006438:	e084      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fb05 	bl	8006a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0208 	orr.w	r2, r2, #8
 8006454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0204 	bic.w	r2, r2, #4
 8006464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	61da      	str	r2, [r3, #28]
      break;
 8006478:	e064      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fb5b 	bl	8006b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69d9      	ldr	r1, [r3, #28]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	021a      	lsls	r2, r3, #8
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	61da      	str	r2, [r3, #28]
      break;
 80064ba:	e043      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fb92 	bl	8006bec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0208 	orr.w	r2, r2, #8
 80064d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064fa:	e023      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fbc4 	bl	8006c90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006516:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006526:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	021a      	lsls	r2, r3, #8
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800653c:	e002      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
      break;
 8006542:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_TIM_ConfigClockSource+0x1c>
 8006570:	2302      	movs	r3, #2
 8006572:	e0b4      	b.n	80066de <HAL_TIM_ConfigClockSource+0x186>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	4b56      	ldr	r3, [pc, #344]	; (80066e8 <HAL_TIM_ConfigClockSource+0x190>)
 8006590:	4013      	ands	r3, r2
 8006592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800659a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ac:	d03e      	beq.n	800662c <HAL_TIM_ConfigClockSource+0xd4>
 80065ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b2:	f200 8087 	bhi.w	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ba:	f000 8086 	beq.w	80066ca <HAL_TIM_ConfigClockSource+0x172>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	d87f      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065c4:	2b70      	cmp	r3, #112	; 0x70
 80065c6:	d01a      	beq.n	80065fe <HAL_TIM_ConfigClockSource+0xa6>
 80065c8:	2b70      	cmp	r3, #112	; 0x70
 80065ca:	d87b      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065cc:	2b60      	cmp	r3, #96	; 0x60
 80065ce:	d050      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x11a>
 80065d0:	2b60      	cmp	r3, #96	; 0x60
 80065d2:	d877      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065d4:	2b50      	cmp	r3, #80	; 0x50
 80065d6:	d03c      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0xfa>
 80065d8:	2b50      	cmp	r3, #80	; 0x50
 80065da:	d873      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d058      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x13a>
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d86f      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065e4:	2b30      	cmp	r3, #48	; 0x30
 80065e6:	d064      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x15a>
 80065e8:	2b30      	cmp	r3, #48	; 0x30
 80065ea:	d86b      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d060      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x15a>
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d867      	bhi.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d05c      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x15a>
 80065f8:	2b10      	cmp	r3, #16
 80065fa:	d05a      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x15a>
 80065fc:	e062      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6899      	ldr	r1, [r3, #8]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f000 fd37 	bl	8007080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	609a      	str	r2, [r3, #8]
      break;
 800662a:	e04f      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	6899      	ldr	r1, [r3, #8]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f000 fd20 	bl	8007080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800664e:	609a      	str	r2, [r3, #8]
      break;
 8006650:	e03c      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	461a      	mov	r2, r3
 8006660:	f000 fbde 	bl	8006e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2150      	movs	r1, #80	; 0x50
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fced 	bl	800704a <TIM_ITRx_SetConfig>
      break;
 8006670:	e02c      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	461a      	mov	r2, r3
 8006680:	f000 fc3a 	bl	8006ef8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2160      	movs	r1, #96	; 0x60
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fcdd 	bl	800704a <TIM_ITRx_SetConfig>
      break;
 8006690:	e01c      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6859      	ldr	r1, [r3, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	461a      	mov	r2, r3
 80066a0:	f000 fbbe 	bl	8006e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2140      	movs	r1, #64	; 0x40
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fccd 	bl	800704a <TIM_ITRx_SetConfig>
      break;
 80066b0:	e00c      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f000 fcc4 	bl	800704a <TIM_ITRx_SetConfig>
      break;
 80066c2:	e003      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
      break;
 80066c8:	e000      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	fffeff88 	.word	0xfffeff88

080066ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a40      	ldr	r2, [pc, #256]	; (8006850 <TIM_Base_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d013      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675a:	d00f      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a3d      	ldr	r2, [pc, #244]	; (8006854 <TIM_Base_SetConfig+0x118>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00b      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a3c      	ldr	r2, [pc, #240]	; (8006858 <TIM_Base_SetConfig+0x11c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d007      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a3b      	ldr	r2, [pc, #236]	; (800685c <TIM_Base_SetConfig+0x120>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d003      	beq.n	800677c <TIM_Base_SetConfig+0x40>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a3a      	ldr	r2, [pc, #232]	; (8006860 <TIM_Base_SetConfig+0x124>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d108      	bne.n	800678e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2f      	ldr	r2, [pc, #188]	; (8006850 <TIM_Base_SetConfig+0x114>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d02b      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679c:	d027      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2c      	ldr	r2, [pc, #176]	; (8006854 <TIM_Base_SetConfig+0x118>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d023      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a2b      	ldr	r2, [pc, #172]	; (8006858 <TIM_Base_SetConfig+0x11c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01f      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2a      	ldr	r2, [pc, #168]	; (800685c <TIM_Base_SetConfig+0x120>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d01b      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a29      	ldr	r2, [pc, #164]	; (8006860 <TIM_Base_SetConfig+0x124>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d017      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a28      	ldr	r2, [pc, #160]	; (8006864 <TIM_Base_SetConfig+0x128>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d013      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a27      	ldr	r2, [pc, #156]	; (8006868 <TIM_Base_SetConfig+0x12c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00f      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a26      	ldr	r2, [pc, #152]	; (800686c <TIM_Base_SetConfig+0x130>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00b      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a25      	ldr	r2, [pc, #148]	; (8006870 <TIM_Base_SetConfig+0x134>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d007      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a24      	ldr	r2, [pc, #144]	; (8006874 <TIM_Base_SetConfig+0x138>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a23      	ldr	r2, [pc, #140]	; (8006878 <TIM_Base_SetConfig+0x13c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d108      	bne.n	8006800 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a0a      	ldr	r2, [pc, #40]	; (8006850 <TIM_Base_SetConfig+0x114>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d003      	beq.n	8006834 <TIM_Base_SetConfig+0xf8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a0c      	ldr	r2, [pc, #48]	; (8006860 <TIM_Base_SetConfig+0x124>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d103      	bne.n	800683c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	615a      	str	r2, [r3, #20]
}
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40010400 	.word	0x40010400
 8006864:	40014000 	.word	0x40014000
 8006868:	40014400 	.word	0x40014400
 800686c:	40014800 	.word	0x40014800
 8006870:	40001800 	.word	0x40001800
 8006874:	40001c00 	.word	0x40001c00
 8006878:	40002000 	.word	0x40002000

0800687c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f023 0201 	bic.w	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4b2b      	ldr	r3, [pc, #172]	; (8006954 <TIM_OC1_SetConfig+0xd8>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0303 	bic.w	r3, r3, #3
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f023 0302 	bic.w	r3, r3, #2
 80068c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a21      	ldr	r2, [pc, #132]	; (8006958 <TIM_OC1_SetConfig+0xdc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC1_SetConfig+0x64>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a20      	ldr	r2, [pc, #128]	; (800695c <TIM_OC1_SetConfig+0xe0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10c      	bne.n	80068fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f023 0308 	bic.w	r3, r3, #8
 80068e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 0304 	bic.w	r3, r3, #4
 80068f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a16      	ldr	r2, [pc, #88]	; (8006958 <TIM_OC1_SetConfig+0xdc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_OC1_SetConfig+0x8e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <TIM_OC1_SetConfig+0xe0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d111      	bne.n	800692e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	621a      	str	r2, [r3, #32]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	fffeff8f 	.word	0xfffeff8f
 8006958:	40010000 	.word	0x40010000
 800695c:	40010400 	.word	0x40010400

08006960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0210 	bic.w	r2, r3, #16
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4b2e      	ldr	r3, [pc, #184]	; (8006a44 <TIM_OC2_SetConfig+0xe4>)
 800698c:	4013      	ands	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <TIM_OC2_SetConfig+0xe8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC2_SetConfig+0x68>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a22      	ldr	r2, [pc, #136]	; (8006a4c <TIM_OC2_SetConfig+0xec>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10d      	bne.n	80069e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <TIM_OC2_SetConfig+0xe8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_OC2_SetConfig+0x94>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <TIM_OC2_SetConfig+0xec>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d113      	bne.n	8006a1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	feff8fff 	.word	0xfeff8fff
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40010400 	.word	0x40010400

08006a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4b2d      	ldr	r3, [pc, #180]	; (8006b30 <TIM_OC3_SetConfig+0xe0>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a22      	ldr	r2, [pc, #136]	; (8006b34 <TIM_OC3_SetConfig+0xe4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d003      	beq.n	8006ab6 <TIM_OC3_SetConfig+0x66>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a21      	ldr	r2, [pc, #132]	; (8006b38 <TIM_OC3_SetConfig+0xe8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10d      	bne.n	8006ad2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a17      	ldr	r2, [pc, #92]	; (8006b34 <TIM_OC3_SetConfig+0xe4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_OC3_SetConfig+0x92>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a16      	ldr	r2, [pc, #88]	; (8006b38 <TIM_OC3_SetConfig+0xe8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d113      	bne.n	8006b0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	fffeff8f 	.word	0xfffeff8f
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40010400 	.word	0x40010400

08006b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <TIM_OC4_SetConfig+0xa4>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	031b      	lsls	r3, r3, #12
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a13      	ldr	r2, [pc, #76]	; (8006be4 <TIM_OC4_SetConfig+0xa8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_OC4_SetConfig+0x68>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a12      	ldr	r2, [pc, #72]	; (8006be8 <TIM_OC4_SetConfig+0xac>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d109      	bne.n	8006bb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	019b      	lsls	r3, r3, #6
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	621a      	str	r2, [r3, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	feff8fff 	.word	0xfeff8fff
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40010400 	.word	0x40010400

08006bec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <TIM_OC5_SetConfig+0x98>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	041b      	lsls	r3, r3, #16
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <TIM_OC5_SetConfig+0x9c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d003      	beq.n	8006c4a <TIM_OC5_SetConfig+0x5e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a11      	ldr	r2, [pc, #68]	; (8006c8c <TIM_OC5_SetConfig+0xa0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d109      	bne.n	8006c5e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	621a      	str	r2, [r3, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	fffeff8f 	.word	0xfffeff8f
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40010400 	.word	0x40010400

08006c90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <TIM_OC6_SetConfig+0x9c>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	051b      	lsls	r3, r3, #20
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <TIM_OC6_SetConfig+0xa0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC6_SetConfig+0x60>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a12      	ldr	r2, [pc, #72]	; (8006d34 <TIM_OC6_SetConfig+0xa4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d109      	bne.n	8006d04 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	029b      	lsls	r3, r3, #10
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	feff8fff 	.word	0xfeff8fff
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40010400 	.word	0x40010400

08006d38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f023 0201 	bic.w	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4a28      	ldr	r2, [pc, #160]	; (8006e04 <TIM_TI1_SetConfig+0xcc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d01b      	beq.n	8006d9e <TIM_TI1_SetConfig+0x66>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6c:	d017      	beq.n	8006d9e <TIM_TI1_SetConfig+0x66>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <TIM_TI1_SetConfig+0xd0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <TIM_TI1_SetConfig+0x66>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4a24      	ldr	r2, [pc, #144]	; (8006e0c <TIM_TI1_SetConfig+0xd4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00f      	beq.n	8006d9e <TIM_TI1_SetConfig+0x66>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4a23      	ldr	r2, [pc, #140]	; (8006e10 <TIM_TI1_SetConfig+0xd8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00b      	beq.n	8006d9e <TIM_TI1_SetConfig+0x66>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4a22      	ldr	r2, [pc, #136]	; (8006e14 <TIM_TI1_SetConfig+0xdc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d007      	beq.n	8006d9e <TIM_TI1_SetConfig+0x66>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4a21      	ldr	r2, [pc, #132]	; (8006e18 <TIM_TI1_SetConfig+0xe0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d003      	beq.n	8006d9e <TIM_TI1_SetConfig+0x66>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <TIM_TI1_SetConfig+0xe4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d101      	bne.n	8006da2 <TIM_TI1_SetConfig+0x6a>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <TIM_TI1_SetConfig+0x6c>
 8006da2:	2300      	movs	r3, #0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d008      	beq.n	8006dba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e003      	b.n	8006dc2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f043 0301 	orr.w	r3, r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f023 030a 	bic.w	r3, r3, #10
 8006ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f003 030a 	and.w	r3, r3, #10
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40000400 	.word	0x40000400
 8006e0c:	40000800 	.word	0x40000800
 8006e10:	40000c00 	.word	0x40000c00
 8006e14:	40010400 	.word	0x40010400
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40001800 	.word	0x40001800

08006e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f023 0201 	bic.w	r2, r3, #1
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f023 030a 	bic.w	r3, r3, #10
 8006e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b087      	sub	sp, #28
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
 8006e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f023 0210 	bic.w	r2, r3, #16
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	031b      	lsls	r3, r3, #12
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ed0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	621a      	str	r2, [r3, #32]
}
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f023 0210 	bic.w	r2, r3, #16
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	031b      	lsls	r3, r3, #12
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	621a      	str	r2, [r3, #32]
}
 8006f4c:	bf00      	nop
 8006f4e:	371c      	adds	r7, #28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f023 0303 	bic.w	r3, r3, #3
 8006f84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	621a      	str	r2, [r3, #32]
}
 8006fc4:	bf00      	nop
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800700e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	031b      	lsls	r3, r3, #12
 8007014:	b29b      	uxth	r3, r3
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007022:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	031b      	lsls	r3, r3, #12
 8007028:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800704a:	b480      	push	{r7}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	f043 0307 	orr.w	r3, r3, #7
 800706c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	609a      	str	r2, [r3, #8]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800709a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	021a      	lsls	r2, r3, #8
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	609a      	str	r2, [r3, #8]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	2201      	movs	r2, #1
 80070d4:	fa02 f303 	lsl.w	r3, r2, r3
 80070d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a1a      	ldr	r2, [r3, #32]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	401a      	ands	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a1a      	ldr	r2, [r3, #32]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	fa01 f303 	lsl.w	r3, r1, r3
 80070f8:	431a      	orrs	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	621a      	str	r2, [r3, #32]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007120:	2302      	movs	r3, #2
 8007122:	e06d      	b.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a30      	ldr	r2, [pc, #192]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d108      	bne.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800715e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a20      	ldr	r2, [pc, #128]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d022      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007196:	d01d      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1d      	ldr	r2, [pc, #116]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d018      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1c      	ldr	r2, [pc, #112]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1a      	ldr	r2, [pc, #104]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a15      	ldr	r2, [pc, #84]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a16      	ldr	r2, [pc, #88]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a15      	ldr	r2, [pc, #84]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d10c      	bne.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	40010000 	.word	0x40010000
 8007210:	40010400 	.word	0x40010400
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40014000 	.word	0x40014000
 8007224:	40001800 	.word	0x40001800

08007228 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007240:	2302      	movs	r3, #2
 8007242:	e065      	b.n	8007310 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4313      	orrs	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	041b      	lsls	r3, r3, #16
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a16      	ldr	r2, [pc, #88]	; (800731c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d004      	beq.n	80072d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a14      	ldr	r2, [pc, #80]	; (8007320 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d115      	bne.n	80072fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	051b      	lsls	r3, r3, #20
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	40010000 	.word	0x40010000
 8007320:	40010400 	.word	0x40010400

08007324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e040      	b.n	80073f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fb f8d8 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2224      	movs	r2, #36	; 0x24
 800738c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0201 	bic.w	r2, r2, #1
 800739c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f974 	bl	800768c <UART_SetConfig>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e022      	b.n	80073f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fbcc 	bl	8007b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fc53 	bl	8007c98 <UART_CheckIdleState>
 80073f2:	4603      	mov	r3, r0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	4613      	mov	r3, r2
 800740a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007410:	2b20      	cmp	r3, #32
 8007412:	d171      	bne.n	80074f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_UART_Transmit+0x24>
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e06a      	b.n	80074fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2221      	movs	r2, #33	; 0x21
 8007430:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007432:	f7fb fb9d 	bl	8002b70 <HAL_GetTick>
 8007436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007450:	d108      	bne.n	8007464 <HAL_UART_Transmit+0x68>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	e003      	b.n	800746c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800746c:	e02c      	b.n	80074c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2200      	movs	r2, #0
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fc5a 	bl	8007d32 <UART_WaitOnFlagUntilTimeout>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e038      	b.n	80074fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800749c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	3302      	adds	r3, #2
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e007      	b.n	80074b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	781a      	ldrb	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1cc      	bne.n	800746e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2200      	movs	r2, #0
 80074dc:	2140      	movs	r1, #64	; 0x40
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fc27 	bl	8007d32 <UART_WaitOnFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e005      	b.n	80074fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e000      	b.n	80074fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b08a      	sub	sp, #40	; 0x28
 8007506:	af02      	add	r7, sp, #8
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	603b      	str	r3, [r7, #0]
 800750e:	4613      	mov	r3, r2
 8007510:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007518:	2b20      	cmp	r3, #32
 800751a:	f040 80b1 	bne.w	8007680 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_UART_Receive+0x28>
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e0a9      	b.n	8007682 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2222      	movs	r2, #34	; 0x22
 800753a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007544:	f7fb fb14 	bl	8002b70 <HAL_GetTick>
 8007548:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007562:	d10e      	bne.n	8007582 <HAL_UART_Receive+0x80>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d105      	bne.n	8007578 <HAL_UART_Receive+0x76>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007572:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007576:	e02d      	b.n	80075d4 <HAL_UART_Receive+0xd2>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	22ff      	movs	r2, #255	; 0xff
 800757c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007580:	e028      	b.n	80075d4 <HAL_UART_Receive+0xd2>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10d      	bne.n	80075a6 <HAL_UART_Receive+0xa4>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d104      	bne.n	800759c <HAL_UART_Receive+0x9a>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	22ff      	movs	r2, #255	; 0xff
 8007596:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800759a:	e01b      	b.n	80075d4 <HAL_UART_Receive+0xd2>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	227f      	movs	r2, #127	; 0x7f
 80075a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075a4:	e016      	b.n	80075d4 <HAL_UART_Receive+0xd2>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075ae:	d10d      	bne.n	80075cc <HAL_UART_Receive+0xca>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <HAL_UART_Receive+0xc0>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	227f      	movs	r2, #127	; 0x7f
 80075bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075c0:	e008      	b.n	80075d4 <HAL_UART_Receive+0xd2>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	223f      	movs	r2, #63	; 0x3f
 80075c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075ca:	e003      	b.n	80075d4 <HAL_UART_Receive+0xd2>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e4:	d108      	bne.n	80075f8 <HAL_UART_Receive+0xf6>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d104      	bne.n	80075f8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	61bb      	str	r3, [r7, #24]
 80075f6:	e003      	b.n	8007600 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007600:	e032      	b.n	8007668 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2200      	movs	r2, #0
 800760a:	2120      	movs	r1, #32
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fb90 	bl	8007d32 <UART_WaitOnFlagUntilTimeout>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e032      	b.n	8007682 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10c      	bne.n	800763c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	b29a      	uxth	r2, r3
 800762a:	8a7b      	ldrh	r3, [r7, #18]
 800762c:	4013      	ands	r3, r2
 800762e:	b29a      	uxth	r2, r3
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	3302      	adds	r3, #2
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e00c      	b.n	8007656 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	b2da      	uxtb	r2, r3
 8007644:	8a7b      	ldrh	r3, [r7, #18]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	4013      	ands	r3, r2
 800764a:	b2da      	uxtb	r2, r3
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	3301      	adds	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1c6      	bne.n	8007602 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	e000      	b.n	8007682 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007680:	2302      	movs	r3, #2
  }
}
 8007682:	4618      	mov	r0, r3
 8007684:	3720      	adds	r7, #32
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4ba6      	ldr	r3, [pc, #664]	; (8007950 <UART_SetConfig+0x2c4>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	6979      	ldr	r1, [r7, #20]
 80076c0:	430b      	orrs	r3, r1
 80076c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a94      	ldr	r2, [pc, #592]	; (8007954 <UART_SetConfig+0x2c8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d120      	bne.n	800774a <UART_SetConfig+0xbe>
 8007708:	4b93      	ldr	r3, [pc, #588]	; (8007958 <UART_SetConfig+0x2cc>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b03      	cmp	r3, #3
 8007714:	d816      	bhi.n	8007744 <UART_SetConfig+0xb8>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <UART_SetConfig+0x90>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	0800772d 	.word	0x0800772d
 8007720:	08007739 	.word	0x08007739
 8007724:	08007733 	.word	0x08007733
 8007728:	0800773f 	.word	0x0800773f
 800772c:	2301      	movs	r3, #1
 800772e:	77fb      	strb	r3, [r7, #31]
 8007730:	e150      	b.n	80079d4 <UART_SetConfig+0x348>
 8007732:	2302      	movs	r3, #2
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	e14d      	b.n	80079d4 <UART_SetConfig+0x348>
 8007738:	2304      	movs	r3, #4
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e14a      	b.n	80079d4 <UART_SetConfig+0x348>
 800773e:	2308      	movs	r3, #8
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e147      	b.n	80079d4 <UART_SetConfig+0x348>
 8007744:	2310      	movs	r3, #16
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e144      	b.n	80079d4 <UART_SetConfig+0x348>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a83      	ldr	r2, [pc, #524]	; (800795c <UART_SetConfig+0x2d0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d132      	bne.n	80077ba <UART_SetConfig+0x12e>
 8007754:	4b80      	ldr	r3, [pc, #512]	; (8007958 <UART_SetConfig+0x2cc>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775a:	f003 030c 	and.w	r3, r3, #12
 800775e:	2b0c      	cmp	r3, #12
 8007760:	d828      	bhi.n	80077b4 <UART_SetConfig+0x128>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <UART_SetConfig+0xdc>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	0800779d 	.word	0x0800779d
 800776c:	080077b5 	.word	0x080077b5
 8007770:	080077b5 	.word	0x080077b5
 8007774:	080077b5 	.word	0x080077b5
 8007778:	080077a9 	.word	0x080077a9
 800777c:	080077b5 	.word	0x080077b5
 8007780:	080077b5 	.word	0x080077b5
 8007784:	080077b5 	.word	0x080077b5
 8007788:	080077a3 	.word	0x080077a3
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077b5 	.word	0x080077b5
 8007794:	080077b5 	.word	0x080077b5
 8007798:	080077af 	.word	0x080077af
 800779c:	2300      	movs	r3, #0
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e118      	b.n	80079d4 <UART_SetConfig+0x348>
 80077a2:	2302      	movs	r3, #2
 80077a4:	77fb      	strb	r3, [r7, #31]
 80077a6:	e115      	b.n	80079d4 <UART_SetConfig+0x348>
 80077a8:	2304      	movs	r3, #4
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	e112      	b.n	80079d4 <UART_SetConfig+0x348>
 80077ae:	2308      	movs	r3, #8
 80077b0:	77fb      	strb	r3, [r7, #31]
 80077b2:	e10f      	b.n	80079d4 <UART_SetConfig+0x348>
 80077b4:	2310      	movs	r3, #16
 80077b6:	77fb      	strb	r3, [r7, #31]
 80077b8:	e10c      	b.n	80079d4 <UART_SetConfig+0x348>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a68      	ldr	r2, [pc, #416]	; (8007960 <UART_SetConfig+0x2d4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d120      	bne.n	8007806 <UART_SetConfig+0x17a>
 80077c4:	4b64      	ldr	r3, [pc, #400]	; (8007958 <UART_SetConfig+0x2cc>)
 80077c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077ce:	2b30      	cmp	r3, #48	; 0x30
 80077d0:	d013      	beq.n	80077fa <UART_SetConfig+0x16e>
 80077d2:	2b30      	cmp	r3, #48	; 0x30
 80077d4:	d814      	bhi.n	8007800 <UART_SetConfig+0x174>
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d009      	beq.n	80077ee <UART_SetConfig+0x162>
 80077da:	2b20      	cmp	r3, #32
 80077dc:	d810      	bhi.n	8007800 <UART_SetConfig+0x174>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <UART_SetConfig+0x15c>
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d006      	beq.n	80077f4 <UART_SetConfig+0x168>
 80077e6:	e00b      	b.n	8007800 <UART_SetConfig+0x174>
 80077e8:	2300      	movs	r3, #0
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e0f2      	b.n	80079d4 <UART_SetConfig+0x348>
 80077ee:	2302      	movs	r3, #2
 80077f0:	77fb      	strb	r3, [r7, #31]
 80077f2:	e0ef      	b.n	80079d4 <UART_SetConfig+0x348>
 80077f4:	2304      	movs	r3, #4
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e0ec      	b.n	80079d4 <UART_SetConfig+0x348>
 80077fa:	2308      	movs	r3, #8
 80077fc:	77fb      	strb	r3, [r7, #31]
 80077fe:	e0e9      	b.n	80079d4 <UART_SetConfig+0x348>
 8007800:	2310      	movs	r3, #16
 8007802:	77fb      	strb	r3, [r7, #31]
 8007804:	e0e6      	b.n	80079d4 <UART_SetConfig+0x348>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a56      	ldr	r2, [pc, #344]	; (8007964 <UART_SetConfig+0x2d8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d120      	bne.n	8007852 <UART_SetConfig+0x1c6>
 8007810:	4b51      	ldr	r3, [pc, #324]	; (8007958 <UART_SetConfig+0x2cc>)
 8007812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007816:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800781a:	2bc0      	cmp	r3, #192	; 0xc0
 800781c:	d013      	beq.n	8007846 <UART_SetConfig+0x1ba>
 800781e:	2bc0      	cmp	r3, #192	; 0xc0
 8007820:	d814      	bhi.n	800784c <UART_SetConfig+0x1c0>
 8007822:	2b80      	cmp	r3, #128	; 0x80
 8007824:	d009      	beq.n	800783a <UART_SetConfig+0x1ae>
 8007826:	2b80      	cmp	r3, #128	; 0x80
 8007828:	d810      	bhi.n	800784c <UART_SetConfig+0x1c0>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <UART_SetConfig+0x1a8>
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d006      	beq.n	8007840 <UART_SetConfig+0x1b4>
 8007832:	e00b      	b.n	800784c <UART_SetConfig+0x1c0>
 8007834:	2300      	movs	r3, #0
 8007836:	77fb      	strb	r3, [r7, #31]
 8007838:	e0cc      	b.n	80079d4 <UART_SetConfig+0x348>
 800783a:	2302      	movs	r3, #2
 800783c:	77fb      	strb	r3, [r7, #31]
 800783e:	e0c9      	b.n	80079d4 <UART_SetConfig+0x348>
 8007840:	2304      	movs	r3, #4
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e0c6      	b.n	80079d4 <UART_SetConfig+0x348>
 8007846:	2308      	movs	r3, #8
 8007848:	77fb      	strb	r3, [r7, #31]
 800784a:	e0c3      	b.n	80079d4 <UART_SetConfig+0x348>
 800784c:	2310      	movs	r3, #16
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e0c0      	b.n	80079d4 <UART_SetConfig+0x348>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a44      	ldr	r2, [pc, #272]	; (8007968 <UART_SetConfig+0x2dc>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d125      	bne.n	80078a8 <UART_SetConfig+0x21c>
 800785c:	4b3e      	ldr	r3, [pc, #248]	; (8007958 <UART_SetConfig+0x2cc>)
 800785e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786a:	d017      	beq.n	800789c <UART_SetConfig+0x210>
 800786c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007870:	d817      	bhi.n	80078a2 <UART_SetConfig+0x216>
 8007872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007876:	d00b      	beq.n	8007890 <UART_SetConfig+0x204>
 8007878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787c:	d811      	bhi.n	80078a2 <UART_SetConfig+0x216>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <UART_SetConfig+0x1fe>
 8007882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007886:	d006      	beq.n	8007896 <UART_SetConfig+0x20a>
 8007888:	e00b      	b.n	80078a2 <UART_SetConfig+0x216>
 800788a:	2300      	movs	r3, #0
 800788c:	77fb      	strb	r3, [r7, #31]
 800788e:	e0a1      	b.n	80079d4 <UART_SetConfig+0x348>
 8007890:	2302      	movs	r3, #2
 8007892:	77fb      	strb	r3, [r7, #31]
 8007894:	e09e      	b.n	80079d4 <UART_SetConfig+0x348>
 8007896:	2304      	movs	r3, #4
 8007898:	77fb      	strb	r3, [r7, #31]
 800789a:	e09b      	b.n	80079d4 <UART_SetConfig+0x348>
 800789c:	2308      	movs	r3, #8
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e098      	b.n	80079d4 <UART_SetConfig+0x348>
 80078a2:	2310      	movs	r3, #16
 80078a4:	77fb      	strb	r3, [r7, #31]
 80078a6:	e095      	b.n	80079d4 <UART_SetConfig+0x348>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a2f      	ldr	r2, [pc, #188]	; (800796c <UART_SetConfig+0x2e0>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d125      	bne.n	80078fe <UART_SetConfig+0x272>
 80078b2:	4b29      	ldr	r3, [pc, #164]	; (8007958 <UART_SetConfig+0x2cc>)
 80078b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078c0:	d017      	beq.n	80078f2 <UART_SetConfig+0x266>
 80078c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078c6:	d817      	bhi.n	80078f8 <UART_SetConfig+0x26c>
 80078c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078cc:	d00b      	beq.n	80078e6 <UART_SetConfig+0x25a>
 80078ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078d2:	d811      	bhi.n	80078f8 <UART_SetConfig+0x26c>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <UART_SetConfig+0x254>
 80078d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078dc:	d006      	beq.n	80078ec <UART_SetConfig+0x260>
 80078de:	e00b      	b.n	80078f8 <UART_SetConfig+0x26c>
 80078e0:	2301      	movs	r3, #1
 80078e2:	77fb      	strb	r3, [r7, #31]
 80078e4:	e076      	b.n	80079d4 <UART_SetConfig+0x348>
 80078e6:	2302      	movs	r3, #2
 80078e8:	77fb      	strb	r3, [r7, #31]
 80078ea:	e073      	b.n	80079d4 <UART_SetConfig+0x348>
 80078ec:	2304      	movs	r3, #4
 80078ee:	77fb      	strb	r3, [r7, #31]
 80078f0:	e070      	b.n	80079d4 <UART_SetConfig+0x348>
 80078f2:	2308      	movs	r3, #8
 80078f4:	77fb      	strb	r3, [r7, #31]
 80078f6:	e06d      	b.n	80079d4 <UART_SetConfig+0x348>
 80078f8:	2310      	movs	r3, #16
 80078fa:	77fb      	strb	r3, [r7, #31]
 80078fc:	e06a      	b.n	80079d4 <UART_SetConfig+0x348>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a1b      	ldr	r2, [pc, #108]	; (8007970 <UART_SetConfig+0x2e4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d138      	bne.n	800797a <UART_SetConfig+0x2ee>
 8007908:	4b13      	ldr	r3, [pc, #76]	; (8007958 <UART_SetConfig+0x2cc>)
 800790a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007912:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007916:	d017      	beq.n	8007948 <UART_SetConfig+0x2bc>
 8007918:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800791c:	d82a      	bhi.n	8007974 <UART_SetConfig+0x2e8>
 800791e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007922:	d00b      	beq.n	800793c <UART_SetConfig+0x2b0>
 8007924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007928:	d824      	bhi.n	8007974 <UART_SetConfig+0x2e8>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <UART_SetConfig+0x2aa>
 800792e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007932:	d006      	beq.n	8007942 <UART_SetConfig+0x2b6>
 8007934:	e01e      	b.n	8007974 <UART_SetConfig+0x2e8>
 8007936:	2300      	movs	r3, #0
 8007938:	77fb      	strb	r3, [r7, #31]
 800793a:	e04b      	b.n	80079d4 <UART_SetConfig+0x348>
 800793c:	2302      	movs	r3, #2
 800793e:	77fb      	strb	r3, [r7, #31]
 8007940:	e048      	b.n	80079d4 <UART_SetConfig+0x348>
 8007942:	2304      	movs	r3, #4
 8007944:	77fb      	strb	r3, [r7, #31]
 8007946:	e045      	b.n	80079d4 <UART_SetConfig+0x348>
 8007948:	2308      	movs	r3, #8
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	e042      	b.n	80079d4 <UART_SetConfig+0x348>
 800794e:	bf00      	nop
 8007950:	efff69f3 	.word	0xefff69f3
 8007954:	40011000 	.word	0x40011000
 8007958:	40023800 	.word	0x40023800
 800795c:	40004400 	.word	0x40004400
 8007960:	40004800 	.word	0x40004800
 8007964:	40004c00 	.word	0x40004c00
 8007968:	40005000 	.word	0x40005000
 800796c:	40011400 	.word	0x40011400
 8007970:	40007800 	.word	0x40007800
 8007974:	2310      	movs	r3, #16
 8007976:	77fb      	strb	r3, [r7, #31]
 8007978:	e02c      	b.n	80079d4 <UART_SetConfig+0x348>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a72      	ldr	r2, [pc, #456]	; (8007b48 <UART_SetConfig+0x4bc>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d125      	bne.n	80079d0 <UART_SetConfig+0x344>
 8007984:	4b71      	ldr	r3, [pc, #452]	; (8007b4c <UART_SetConfig+0x4c0>)
 8007986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800798e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007992:	d017      	beq.n	80079c4 <UART_SetConfig+0x338>
 8007994:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007998:	d817      	bhi.n	80079ca <UART_SetConfig+0x33e>
 800799a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800799e:	d00b      	beq.n	80079b8 <UART_SetConfig+0x32c>
 80079a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a4:	d811      	bhi.n	80079ca <UART_SetConfig+0x33e>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <UART_SetConfig+0x326>
 80079aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ae:	d006      	beq.n	80079be <UART_SetConfig+0x332>
 80079b0:	e00b      	b.n	80079ca <UART_SetConfig+0x33e>
 80079b2:	2300      	movs	r3, #0
 80079b4:	77fb      	strb	r3, [r7, #31]
 80079b6:	e00d      	b.n	80079d4 <UART_SetConfig+0x348>
 80079b8:	2302      	movs	r3, #2
 80079ba:	77fb      	strb	r3, [r7, #31]
 80079bc:	e00a      	b.n	80079d4 <UART_SetConfig+0x348>
 80079be:	2304      	movs	r3, #4
 80079c0:	77fb      	strb	r3, [r7, #31]
 80079c2:	e007      	b.n	80079d4 <UART_SetConfig+0x348>
 80079c4:	2308      	movs	r3, #8
 80079c6:	77fb      	strb	r3, [r7, #31]
 80079c8:	e004      	b.n	80079d4 <UART_SetConfig+0x348>
 80079ca:	2310      	movs	r3, #16
 80079cc:	77fb      	strb	r3, [r7, #31]
 80079ce:	e001      	b.n	80079d4 <UART_SetConfig+0x348>
 80079d0:	2310      	movs	r3, #16
 80079d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079dc:	d15b      	bne.n	8007a96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80079de:	7ffb      	ldrb	r3, [r7, #31]
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d828      	bhi.n	8007a36 <UART_SetConfig+0x3aa>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <UART_SetConfig+0x360>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	08007a37 	.word	0x08007a37
 80079fc:	08007a27 	.word	0x08007a27
 8007a00:	08007a37 	.word	0x08007a37
 8007a04:	08007a37 	.word	0x08007a37
 8007a08:	08007a37 	.word	0x08007a37
 8007a0c:	08007a2f 	.word	0x08007a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a10:	f7fd f946 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8007a14:	61b8      	str	r0, [r7, #24]
        break;
 8007a16:	e013      	b.n	8007a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a18:	f7fd f956 	bl	8004cc8 <HAL_RCC_GetPCLK2Freq>
 8007a1c:	61b8      	str	r0, [r7, #24]
        break;
 8007a1e:	e00f      	b.n	8007a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a20:	4b4b      	ldr	r3, [pc, #300]	; (8007b50 <UART_SetConfig+0x4c4>)
 8007a22:	61bb      	str	r3, [r7, #24]
        break;
 8007a24:	e00c      	b.n	8007a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a26:	f7fd f829 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8007a2a:	61b8      	str	r0, [r7, #24]
        break;
 8007a2c:	e008      	b.n	8007a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a32:	61bb      	str	r3, [r7, #24]
        break;
 8007a34:	e004      	b.n	8007a40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	77bb      	strb	r3, [r7, #30]
        break;
 8007a3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d074      	beq.n	8007b30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	005a      	lsls	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	085b      	lsrs	r3, r3, #1
 8007a50:	441a      	add	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2b0f      	cmp	r3, #15
 8007a60:	d916      	bls.n	8007a90 <UART_SetConfig+0x404>
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a68:	d212      	bcs.n	8007a90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f023 030f 	bic.w	r3, r3, #15
 8007a72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	89fb      	ldrh	r3, [r7, #14]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	89fa      	ldrh	r2, [r7, #14]
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	e04f      	b.n	8007b30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	77bb      	strb	r3, [r7, #30]
 8007a94:	e04c      	b.n	8007b30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a96:	7ffb      	ldrb	r3, [r7, #31]
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d828      	bhi.n	8007aee <UART_SetConfig+0x462>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0x418>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007ad1 	.word	0x08007ad1
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	08007aef 	.word	0x08007aef
 8007ab4:	08007adf 	.word	0x08007adf
 8007ab8:	08007aef 	.word	0x08007aef
 8007abc:	08007aef 	.word	0x08007aef
 8007ac0:	08007aef 	.word	0x08007aef
 8007ac4:	08007ae7 	.word	0x08007ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac8:	f7fd f8ea 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8007acc:	61b8      	str	r0, [r7, #24]
        break;
 8007ace:	e013      	b.n	8007af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ad0:	f7fd f8fa 	bl	8004cc8 <HAL_RCC_GetPCLK2Freq>
 8007ad4:	61b8      	str	r0, [r7, #24]
        break;
 8007ad6:	e00f      	b.n	8007af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ad8:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <UART_SetConfig+0x4c4>)
 8007ada:	61bb      	str	r3, [r7, #24]
        break;
 8007adc:	e00c      	b.n	8007af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ade:	f7fc ffcd 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8007ae2:	61b8      	str	r0, [r7, #24]
        break;
 8007ae4:	e008      	b.n	8007af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aea:	61bb      	str	r3, [r7, #24]
        break;
 8007aec:	e004      	b.n	8007af8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	77bb      	strb	r3, [r7, #30]
        break;
 8007af6:	bf00      	nop
    }

    if (pclk != 0U)
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d018      	beq.n	8007b30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	085a      	lsrs	r2, r3, #1
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	441a      	add	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b0f      	cmp	r3, #15
 8007b16:	d909      	bls.n	8007b2c <UART_SetConfig+0x4a0>
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b1e:	d205      	bcs.n	8007b2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60da      	str	r2, [r3, #12]
 8007b2a:	e001      	b.n	8007b30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007b3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	40007c00 	.word	0x40007c00
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	00f42400 	.word	0x00f42400

08007b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01a      	beq.n	8007c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c52:	d10a      	bne.n	8007c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	605a      	str	r2, [r3, #4]
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ca8:	f7fa ff62 	bl	8002b70 <HAL_GetTick>
 8007cac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0308 	and.w	r3, r3, #8
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d10e      	bne.n	8007cda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f831 	bl	8007d32 <UART_WaitOnFlagUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e027      	b.n	8007d2a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d10e      	bne.n	8007d06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f81b 	bl	8007d32 <UART_WaitOnFlagUntilTimeout>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e011      	b.n	8007d2a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b09c      	sub	sp, #112	; 0x70
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	603b      	str	r3, [r7, #0]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d42:	e0a7      	b.n	8007e94 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4a:	f000 80a3 	beq.w	8007e94 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d4e:	f7fa ff0f 	bl	8002b70 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d302      	bcc.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d13f      	bne.n	8007de4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d78:	667b      	str	r3, [r7, #100]	; 0x64
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	663b      	str	r3, [r7, #96]	; 0x60
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e068      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d050      	beq.n	8007e94 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e00:	d148      	bne.n	8007e94 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e0a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e6      	bne.n	8007e0c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3308      	adds	r3, #8
 8007e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f023 0301 	bic.w	r3, r3, #1
 8007e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e5e:	623a      	str	r2, [r7, #32]
 8007e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	69f9      	ldr	r1, [r7, #28]
 8007e64:	6a3a      	ldr	r2, [r7, #32]
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e5      	bne.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2220      	movs	r2, #32
 8007e76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e010      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69da      	ldr	r2, [r3, #28]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2301      	moveq	r3, #1
 8007ea6:	2300      	movne	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	f43f af48 	beq.w	8007d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3770      	adds	r7, #112	; 0x70
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <__errno>:
 8007ec0:	4b01      	ldr	r3, [pc, #4]	; (8007ec8 <__errno+0x8>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	20000014 	.word	0x20000014

08007ecc <__libc_init_array>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	4d0d      	ldr	r5, [pc, #52]	; (8007f04 <__libc_init_array+0x38>)
 8007ed0:	4c0d      	ldr	r4, [pc, #52]	; (8007f08 <__libc_init_array+0x3c>)
 8007ed2:	1b64      	subs	r4, r4, r5
 8007ed4:	10a4      	asrs	r4, r4, #2
 8007ed6:	2600      	movs	r6, #0
 8007ed8:	42a6      	cmp	r6, r4
 8007eda:	d109      	bne.n	8007ef0 <__libc_init_array+0x24>
 8007edc:	4d0b      	ldr	r5, [pc, #44]	; (8007f0c <__libc_init_array+0x40>)
 8007ede:	4c0c      	ldr	r4, [pc, #48]	; (8007f10 <__libc_init_array+0x44>)
 8007ee0:	f000 ffbc 	bl	8008e5c <_init>
 8007ee4:	1b64      	subs	r4, r4, r5
 8007ee6:	10a4      	asrs	r4, r4, #2
 8007ee8:	2600      	movs	r6, #0
 8007eea:	42a6      	cmp	r6, r4
 8007eec:	d105      	bne.n	8007efa <__libc_init_array+0x2e>
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef4:	4798      	blx	r3
 8007ef6:	3601      	adds	r6, #1
 8007ef8:	e7ee      	b.n	8007ed8 <__libc_init_array+0xc>
 8007efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efe:	4798      	blx	r3
 8007f00:	3601      	adds	r6, #1
 8007f02:	e7f2      	b.n	8007eea <__libc_init_array+0x1e>
 8007f04:	08008f60 	.word	0x08008f60
 8007f08:	08008f60 	.word	0x08008f60
 8007f0c:	08008f60 	.word	0x08008f60
 8007f10:	08008f64 	.word	0x08008f64

08007f14 <memcpy>:
 8007f14:	440a      	add	r2, r1
 8007f16:	4291      	cmp	r1, r2
 8007f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f1c:	d100      	bne.n	8007f20 <memcpy+0xc>
 8007f1e:	4770      	bx	lr
 8007f20:	b510      	push	{r4, lr}
 8007f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f2a:	4291      	cmp	r1, r2
 8007f2c:	d1f9      	bne.n	8007f22 <memcpy+0xe>
 8007f2e:	bd10      	pop	{r4, pc}

08007f30 <memset>:
 8007f30:	4402      	add	r2, r0
 8007f32:	4603      	mov	r3, r0
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d100      	bne.n	8007f3a <memset+0xa>
 8007f38:	4770      	bx	lr
 8007f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f3e:	e7f9      	b.n	8007f34 <memset+0x4>

08007f40 <iprintf>:
 8007f40:	b40f      	push	{r0, r1, r2, r3}
 8007f42:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <iprintf+0x2c>)
 8007f44:	b513      	push	{r0, r1, r4, lr}
 8007f46:	681c      	ldr	r4, [r3, #0]
 8007f48:	b124      	cbz	r4, 8007f54 <iprintf+0x14>
 8007f4a:	69a3      	ldr	r3, [r4, #24]
 8007f4c:	b913      	cbnz	r3, 8007f54 <iprintf+0x14>
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 f866 	bl	8008020 <__sinit>
 8007f54:	ab05      	add	r3, sp, #20
 8007f56:	9a04      	ldr	r2, [sp, #16]
 8007f58:	68a1      	ldr	r1, [r4, #8]
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 f9bd 	bl	80082dc <_vfiprintf_r>
 8007f62:	b002      	add	sp, #8
 8007f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f68:	b004      	add	sp, #16
 8007f6a:	4770      	bx	lr
 8007f6c:	20000014 	.word	0x20000014

08007f70 <std>:
 8007f70:	2300      	movs	r3, #0
 8007f72:	b510      	push	{r4, lr}
 8007f74:	4604      	mov	r4, r0
 8007f76:	e9c0 3300 	strd	r3, r3, [r0]
 8007f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f7e:	6083      	str	r3, [r0, #8]
 8007f80:	8181      	strh	r1, [r0, #12]
 8007f82:	6643      	str	r3, [r0, #100]	; 0x64
 8007f84:	81c2      	strh	r2, [r0, #14]
 8007f86:	6183      	str	r3, [r0, #24]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	2208      	movs	r2, #8
 8007f8c:	305c      	adds	r0, #92	; 0x5c
 8007f8e:	f7ff ffcf 	bl	8007f30 <memset>
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <std+0x38>)
 8007f94:	6263      	str	r3, [r4, #36]	; 0x24
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <std+0x3c>)
 8007f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <std+0x40>)
 8007f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <std+0x44>)
 8007fa0:	6224      	str	r4, [r4, #32]
 8007fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	bf00      	nop
 8007fa8:	08008885 	.word	0x08008885
 8007fac:	080088a7 	.word	0x080088a7
 8007fb0:	080088df 	.word	0x080088df
 8007fb4:	08008903 	.word	0x08008903

08007fb8 <_cleanup_r>:
 8007fb8:	4901      	ldr	r1, [pc, #4]	; (8007fc0 <_cleanup_r+0x8>)
 8007fba:	f000 b8af 	b.w	800811c <_fwalk_reent>
 8007fbe:	bf00      	nop
 8007fc0:	08008bdd 	.word	0x08008bdd

08007fc4 <__sfmoreglue>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	2268      	movs	r2, #104	; 0x68
 8007fc8:	1e4d      	subs	r5, r1, #1
 8007fca:	4355      	muls	r5, r2
 8007fcc:	460e      	mov	r6, r1
 8007fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fd2:	f000 f8e5 	bl	80081a0 <_malloc_r>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	b140      	cbz	r0, 8007fec <__sfmoreglue+0x28>
 8007fda:	2100      	movs	r1, #0
 8007fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8007fe0:	300c      	adds	r0, #12
 8007fe2:	60a0      	str	r0, [r4, #8]
 8007fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fe8:	f7ff ffa2 	bl	8007f30 <memset>
 8007fec:	4620      	mov	r0, r4
 8007fee:	bd70      	pop	{r4, r5, r6, pc}

08007ff0 <__sfp_lock_acquire>:
 8007ff0:	4801      	ldr	r0, [pc, #4]	; (8007ff8 <__sfp_lock_acquire+0x8>)
 8007ff2:	f000 b8b3 	b.w	800815c <__retarget_lock_acquire_recursive>
 8007ff6:	bf00      	nop
 8007ff8:	20000811 	.word	0x20000811

08007ffc <__sfp_lock_release>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	; (8008004 <__sfp_lock_release+0x8>)
 8007ffe:	f000 b8ae 	b.w	800815e <__retarget_lock_release_recursive>
 8008002:	bf00      	nop
 8008004:	20000811 	.word	0x20000811

08008008 <__sinit_lock_acquire>:
 8008008:	4801      	ldr	r0, [pc, #4]	; (8008010 <__sinit_lock_acquire+0x8>)
 800800a:	f000 b8a7 	b.w	800815c <__retarget_lock_acquire_recursive>
 800800e:	bf00      	nop
 8008010:	20000812 	.word	0x20000812

08008014 <__sinit_lock_release>:
 8008014:	4801      	ldr	r0, [pc, #4]	; (800801c <__sinit_lock_release+0x8>)
 8008016:	f000 b8a2 	b.w	800815e <__retarget_lock_release_recursive>
 800801a:	bf00      	nop
 800801c:	20000812 	.word	0x20000812

08008020 <__sinit>:
 8008020:	b510      	push	{r4, lr}
 8008022:	4604      	mov	r4, r0
 8008024:	f7ff fff0 	bl	8008008 <__sinit_lock_acquire>
 8008028:	69a3      	ldr	r3, [r4, #24]
 800802a:	b11b      	cbz	r3, 8008034 <__sinit+0x14>
 800802c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008030:	f7ff bff0 	b.w	8008014 <__sinit_lock_release>
 8008034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008038:	6523      	str	r3, [r4, #80]	; 0x50
 800803a:	4b13      	ldr	r3, [pc, #76]	; (8008088 <__sinit+0x68>)
 800803c:	4a13      	ldr	r2, [pc, #76]	; (800808c <__sinit+0x6c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	62a2      	str	r2, [r4, #40]	; 0x28
 8008042:	42a3      	cmp	r3, r4
 8008044:	bf04      	itt	eq
 8008046:	2301      	moveq	r3, #1
 8008048:	61a3      	streq	r3, [r4, #24]
 800804a:	4620      	mov	r0, r4
 800804c:	f000 f820 	bl	8008090 <__sfp>
 8008050:	6060      	str	r0, [r4, #4]
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f81c 	bl	8008090 <__sfp>
 8008058:	60a0      	str	r0, [r4, #8]
 800805a:	4620      	mov	r0, r4
 800805c:	f000 f818 	bl	8008090 <__sfp>
 8008060:	2200      	movs	r2, #0
 8008062:	60e0      	str	r0, [r4, #12]
 8008064:	2104      	movs	r1, #4
 8008066:	6860      	ldr	r0, [r4, #4]
 8008068:	f7ff ff82 	bl	8007f70 <std>
 800806c:	68a0      	ldr	r0, [r4, #8]
 800806e:	2201      	movs	r2, #1
 8008070:	2109      	movs	r1, #9
 8008072:	f7ff ff7d 	bl	8007f70 <std>
 8008076:	68e0      	ldr	r0, [r4, #12]
 8008078:	2202      	movs	r2, #2
 800807a:	2112      	movs	r1, #18
 800807c:	f7ff ff78 	bl	8007f70 <std>
 8008080:	2301      	movs	r3, #1
 8008082:	61a3      	str	r3, [r4, #24]
 8008084:	e7d2      	b.n	800802c <__sinit+0xc>
 8008086:	bf00      	nop
 8008088:	08008ec0 	.word	0x08008ec0
 800808c:	08007fb9 	.word	0x08007fb9

08008090 <__sfp>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	4607      	mov	r7, r0
 8008094:	f7ff ffac 	bl	8007ff0 <__sfp_lock_acquire>
 8008098:	4b1e      	ldr	r3, [pc, #120]	; (8008114 <__sfp+0x84>)
 800809a:	681e      	ldr	r6, [r3, #0]
 800809c:	69b3      	ldr	r3, [r6, #24]
 800809e:	b913      	cbnz	r3, 80080a6 <__sfp+0x16>
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7ff ffbd 	bl	8008020 <__sinit>
 80080a6:	3648      	adds	r6, #72	; 0x48
 80080a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	d503      	bpl.n	80080b8 <__sfp+0x28>
 80080b0:	6833      	ldr	r3, [r6, #0]
 80080b2:	b30b      	cbz	r3, 80080f8 <__sfp+0x68>
 80080b4:	6836      	ldr	r6, [r6, #0]
 80080b6:	e7f7      	b.n	80080a8 <__sfp+0x18>
 80080b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080bc:	b9d5      	cbnz	r5, 80080f4 <__sfp+0x64>
 80080be:	4b16      	ldr	r3, [pc, #88]	; (8008118 <__sfp+0x88>)
 80080c0:	60e3      	str	r3, [r4, #12]
 80080c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080c6:	6665      	str	r5, [r4, #100]	; 0x64
 80080c8:	f000 f847 	bl	800815a <__retarget_lock_init_recursive>
 80080cc:	f7ff ff96 	bl	8007ffc <__sfp_lock_release>
 80080d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080d8:	6025      	str	r5, [r4, #0]
 80080da:	61a5      	str	r5, [r4, #24]
 80080dc:	2208      	movs	r2, #8
 80080de:	4629      	mov	r1, r5
 80080e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080e4:	f7ff ff24 	bl	8007f30 <memset>
 80080e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080f0:	4620      	mov	r0, r4
 80080f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f4:	3468      	adds	r4, #104	; 0x68
 80080f6:	e7d9      	b.n	80080ac <__sfp+0x1c>
 80080f8:	2104      	movs	r1, #4
 80080fa:	4638      	mov	r0, r7
 80080fc:	f7ff ff62 	bl	8007fc4 <__sfmoreglue>
 8008100:	4604      	mov	r4, r0
 8008102:	6030      	str	r0, [r6, #0]
 8008104:	2800      	cmp	r0, #0
 8008106:	d1d5      	bne.n	80080b4 <__sfp+0x24>
 8008108:	f7ff ff78 	bl	8007ffc <__sfp_lock_release>
 800810c:	230c      	movs	r3, #12
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	e7ee      	b.n	80080f0 <__sfp+0x60>
 8008112:	bf00      	nop
 8008114:	08008ec0 	.word	0x08008ec0
 8008118:	ffff0001 	.word	0xffff0001

0800811c <_fwalk_reent>:
 800811c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008120:	4606      	mov	r6, r0
 8008122:	4688      	mov	r8, r1
 8008124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008128:	2700      	movs	r7, #0
 800812a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800812e:	f1b9 0901 	subs.w	r9, r9, #1
 8008132:	d505      	bpl.n	8008140 <_fwalk_reent+0x24>
 8008134:	6824      	ldr	r4, [r4, #0]
 8008136:	2c00      	cmp	r4, #0
 8008138:	d1f7      	bne.n	800812a <_fwalk_reent+0xe>
 800813a:	4638      	mov	r0, r7
 800813c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008140:	89ab      	ldrh	r3, [r5, #12]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d907      	bls.n	8008156 <_fwalk_reent+0x3a>
 8008146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800814a:	3301      	adds	r3, #1
 800814c:	d003      	beq.n	8008156 <_fwalk_reent+0x3a>
 800814e:	4629      	mov	r1, r5
 8008150:	4630      	mov	r0, r6
 8008152:	47c0      	blx	r8
 8008154:	4307      	orrs	r7, r0
 8008156:	3568      	adds	r5, #104	; 0x68
 8008158:	e7e9      	b.n	800812e <_fwalk_reent+0x12>

0800815a <__retarget_lock_init_recursive>:
 800815a:	4770      	bx	lr

0800815c <__retarget_lock_acquire_recursive>:
 800815c:	4770      	bx	lr

0800815e <__retarget_lock_release_recursive>:
 800815e:	4770      	bx	lr

08008160 <sbrk_aligned>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	4e0e      	ldr	r6, [pc, #56]	; (800819c <sbrk_aligned+0x3c>)
 8008164:	460c      	mov	r4, r1
 8008166:	6831      	ldr	r1, [r6, #0]
 8008168:	4605      	mov	r5, r0
 800816a:	b911      	cbnz	r1, 8008172 <sbrk_aligned+0x12>
 800816c:	f000 fb7a 	bl	8008864 <_sbrk_r>
 8008170:	6030      	str	r0, [r6, #0]
 8008172:	4621      	mov	r1, r4
 8008174:	4628      	mov	r0, r5
 8008176:	f000 fb75 	bl	8008864 <_sbrk_r>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d00a      	beq.n	8008194 <sbrk_aligned+0x34>
 800817e:	1cc4      	adds	r4, r0, #3
 8008180:	f024 0403 	bic.w	r4, r4, #3
 8008184:	42a0      	cmp	r0, r4
 8008186:	d007      	beq.n	8008198 <sbrk_aligned+0x38>
 8008188:	1a21      	subs	r1, r4, r0
 800818a:	4628      	mov	r0, r5
 800818c:	f000 fb6a 	bl	8008864 <_sbrk_r>
 8008190:	3001      	adds	r0, #1
 8008192:	d101      	bne.n	8008198 <sbrk_aligned+0x38>
 8008194:	f04f 34ff 	mov.w	r4, #4294967295
 8008198:	4620      	mov	r0, r4
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	20000818 	.word	0x20000818

080081a0 <_malloc_r>:
 80081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a4:	1ccd      	adds	r5, r1, #3
 80081a6:	f025 0503 	bic.w	r5, r5, #3
 80081aa:	3508      	adds	r5, #8
 80081ac:	2d0c      	cmp	r5, #12
 80081ae:	bf38      	it	cc
 80081b0:	250c      	movcc	r5, #12
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	4607      	mov	r7, r0
 80081b6:	db01      	blt.n	80081bc <_malloc_r+0x1c>
 80081b8:	42a9      	cmp	r1, r5
 80081ba:	d905      	bls.n	80081c8 <_malloc_r+0x28>
 80081bc:	230c      	movs	r3, #12
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	2600      	movs	r6, #0
 80081c2:	4630      	mov	r0, r6
 80081c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c8:	4e2e      	ldr	r6, [pc, #184]	; (8008284 <_malloc_r+0xe4>)
 80081ca:	f000 fdbb 	bl	8008d44 <__malloc_lock>
 80081ce:	6833      	ldr	r3, [r6, #0]
 80081d0:	461c      	mov	r4, r3
 80081d2:	bb34      	cbnz	r4, 8008222 <_malloc_r+0x82>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ffc2 	bl	8008160 <sbrk_aligned>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	4604      	mov	r4, r0
 80081e0:	d14d      	bne.n	800827e <_malloc_r+0xde>
 80081e2:	6834      	ldr	r4, [r6, #0]
 80081e4:	4626      	mov	r6, r4
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	d140      	bne.n	800826c <_malloc_r+0xcc>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	4631      	mov	r1, r6
 80081ee:	4638      	mov	r0, r7
 80081f0:	eb04 0803 	add.w	r8, r4, r3
 80081f4:	f000 fb36 	bl	8008864 <_sbrk_r>
 80081f8:	4580      	cmp	r8, r0
 80081fa:	d13a      	bne.n	8008272 <_malloc_r+0xd2>
 80081fc:	6821      	ldr	r1, [r4, #0]
 80081fe:	3503      	adds	r5, #3
 8008200:	1a6d      	subs	r5, r5, r1
 8008202:	f025 0503 	bic.w	r5, r5, #3
 8008206:	3508      	adds	r5, #8
 8008208:	2d0c      	cmp	r5, #12
 800820a:	bf38      	it	cc
 800820c:	250c      	movcc	r5, #12
 800820e:	4629      	mov	r1, r5
 8008210:	4638      	mov	r0, r7
 8008212:	f7ff ffa5 	bl	8008160 <sbrk_aligned>
 8008216:	3001      	adds	r0, #1
 8008218:	d02b      	beq.n	8008272 <_malloc_r+0xd2>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	442b      	add	r3, r5
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	e00e      	b.n	8008240 <_malloc_r+0xa0>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	1b52      	subs	r2, r2, r5
 8008226:	d41e      	bmi.n	8008266 <_malloc_r+0xc6>
 8008228:	2a0b      	cmp	r2, #11
 800822a:	d916      	bls.n	800825a <_malloc_r+0xba>
 800822c:	1961      	adds	r1, r4, r5
 800822e:	42a3      	cmp	r3, r4
 8008230:	6025      	str	r5, [r4, #0]
 8008232:	bf18      	it	ne
 8008234:	6059      	strne	r1, [r3, #4]
 8008236:	6863      	ldr	r3, [r4, #4]
 8008238:	bf08      	it	eq
 800823a:	6031      	streq	r1, [r6, #0]
 800823c:	5162      	str	r2, [r4, r5]
 800823e:	604b      	str	r3, [r1, #4]
 8008240:	4638      	mov	r0, r7
 8008242:	f104 060b 	add.w	r6, r4, #11
 8008246:	f000 fd83 	bl	8008d50 <__malloc_unlock>
 800824a:	f026 0607 	bic.w	r6, r6, #7
 800824e:	1d23      	adds	r3, r4, #4
 8008250:	1af2      	subs	r2, r6, r3
 8008252:	d0b6      	beq.n	80081c2 <_malloc_r+0x22>
 8008254:	1b9b      	subs	r3, r3, r6
 8008256:	50a3      	str	r3, [r4, r2]
 8008258:	e7b3      	b.n	80081c2 <_malloc_r+0x22>
 800825a:	6862      	ldr	r2, [r4, #4]
 800825c:	42a3      	cmp	r3, r4
 800825e:	bf0c      	ite	eq
 8008260:	6032      	streq	r2, [r6, #0]
 8008262:	605a      	strne	r2, [r3, #4]
 8008264:	e7ec      	b.n	8008240 <_malloc_r+0xa0>
 8008266:	4623      	mov	r3, r4
 8008268:	6864      	ldr	r4, [r4, #4]
 800826a:	e7b2      	b.n	80081d2 <_malloc_r+0x32>
 800826c:	4634      	mov	r4, r6
 800826e:	6876      	ldr	r6, [r6, #4]
 8008270:	e7b9      	b.n	80081e6 <_malloc_r+0x46>
 8008272:	230c      	movs	r3, #12
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	4638      	mov	r0, r7
 8008278:	f000 fd6a 	bl	8008d50 <__malloc_unlock>
 800827c:	e7a1      	b.n	80081c2 <_malloc_r+0x22>
 800827e:	6025      	str	r5, [r4, #0]
 8008280:	e7de      	b.n	8008240 <_malloc_r+0xa0>
 8008282:	bf00      	nop
 8008284:	20000814 	.word	0x20000814

08008288 <__sfputc_r>:
 8008288:	6893      	ldr	r3, [r2, #8]
 800828a:	3b01      	subs	r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	b410      	push	{r4}
 8008290:	6093      	str	r3, [r2, #8]
 8008292:	da08      	bge.n	80082a6 <__sfputc_r+0x1e>
 8008294:	6994      	ldr	r4, [r2, #24]
 8008296:	42a3      	cmp	r3, r4
 8008298:	db01      	blt.n	800829e <__sfputc_r+0x16>
 800829a:	290a      	cmp	r1, #10
 800829c:	d103      	bne.n	80082a6 <__sfputc_r+0x1e>
 800829e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a2:	f000 bb33 	b.w	800890c <__swbuf_r>
 80082a6:	6813      	ldr	r3, [r2, #0]
 80082a8:	1c58      	adds	r0, r3, #1
 80082aa:	6010      	str	r0, [r2, #0]
 80082ac:	7019      	strb	r1, [r3, #0]
 80082ae:	4608      	mov	r0, r1
 80082b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <__sfputs_r>:
 80082b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b8:	4606      	mov	r6, r0
 80082ba:	460f      	mov	r7, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	18d5      	adds	r5, r2, r3
 80082c0:	42ac      	cmp	r4, r5
 80082c2:	d101      	bne.n	80082c8 <__sfputs_r+0x12>
 80082c4:	2000      	movs	r0, #0
 80082c6:	e007      	b.n	80082d8 <__sfputs_r+0x22>
 80082c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082cc:	463a      	mov	r2, r7
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff ffda 	bl	8008288 <__sfputc_r>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d1f3      	bne.n	80082c0 <__sfputs_r+0xa>
 80082d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082dc <_vfiprintf_r>:
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e0:	460d      	mov	r5, r1
 80082e2:	b09d      	sub	sp, #116	; 0x74
 80082e4:	4614      	mov	r4, r2
 80082e6:	4698      	mov	r8, r3
 80082e8:	4606      	mov	r6, r0
 80082ea:	b118      	cbz	r0, 80082f4 <_vfiprintf_r+0x18>
 80082ec:	6983      	ldr	r3, [r0, #24]
 80082ee:	b90b      	cbnz	r3, 80082f4 <_vfiprintf_r+0x18>
 80082f0:	f7ff fe96 	bl	8008020 <__sinit>
 80082f4:	4b89      	ldr	r3, [pc, #548]	; (800851c <_vfiprintf_r+0x240>)
 80082f6:	429d      	cmp	r5, r3
 80082f8:	d11b      	bne.n	8008332 <_vfiprintf_r+0x56>
 80082fa:	6875      	ldr	r5, [r6, #4]
 80082fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082fe:	07d9      	lsls	r1, r3, #31
 8008300:	d405      	bmi.n	800830e <_vfiprintf_r+0x32>
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	059a      	lsls	r2, r3, #22
 8008306:	d402      	bmi.n	800830e <_vfiprintf_r+0x32>
 8008308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800830a:	f7ff ff27 	bl	800815c <__retarget_lock_acquire_recursive>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	071b      	lsls	r3, r3, #28
 8008312:	d501      	bpl.n	8008318 <_vfiprintf_r+0x3c>
 8008314:	692b      	ldr	r3, [r5, #16]
 8008316:	b9eb      	cbnz	r3, 8008354 <_vfiprintf_r+0x78>
 8008318:	4629      	mov	r1, r5
 800831a:	4630      	mov	r0, r6
 800831c:	f000 fb5a 	bl	80089d4 <__swsetup_r>
 8008320:	b1c0      	cbz	r0, 8008354 <_vfiprintf_r+0x78>
 8008322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008324:	07dc      	lsls	r4, r3, #31
 8008326:	d50e      	bpl.n	8008346 <_vfiprintf_r+0x6a>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	b01d      	add	sp, #116	; 0x74
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	4b7b      	ldr	r3, [pc, #492]	; (8008520 <_vfiprintf_r+0x244>)
 8008334:	429d      	cmp	r5, r3
 8008336:	d101      	bne.n	800833c <_vfiprintf_r+0x60>
 8008338:	68b5      	ldr	r5, [r6, #8]
 800833a:	e7df      	b.n	80082fc <_vfiprintf_r+0x20>
 800833c:	4b79      	ldr	r3, [pc, #484]	; (8008524 <_vfiprintf_r+0x248>)
 800833e:	429d      	cmp	r5, r3
 8008340:	bf08      	it	eq
 8008342:	68f5      	ldreq	r5, [r6, #12]
 8008344:	e7da      	b.n	80082fc <_vfiprintf_r+0x20>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	0598      	lsls	r0, r3, #22
 800834a:	d4ed      	bmi.n	8008328 <_vfiprintf_r+0x4c>
 800834c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800834e:	f7ff ff06 	bl	800815e <__retarget_lock_release_recursive>
 8008352:	e7e9      	b.n	8008328 <_vfiprintf_r+0x4c>
 8008354:	2300      	movs	r3, #0
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	2320      	movs	r3, #32
 800835a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800835e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008362:	2330      	movs	r3, #48	; 0x30
 8008364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008528 <_vfiprintf_r+0x24c>
 8008368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800836c:	f04f 0901 	mov.w	r9, #1
 8008370:	4623      	mov	r3, r4
 8008372:	469a      	mov	sl, r3
 8008374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008378:	b10a      	cbz	r2, 800837e <_vfiprintf_r+0xa2>
 800837a:	2a25      	cmp	r2, #37	; 0x25
 800837c:	d1f9      	bne.n	8008372 <_vfiprintf_r+0x96>
 800837e:	ebba 0b04 	subs.w	fp, sl, r4
 8008382:	d00b      	beq.n	800839c <_vfiprintf_r+0xc0>
 8008384:	465b      	mov	r3, fp
 8008386:	4622      	mov	r2, r4
 8008388:	4629      	mov	r1, r5
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ff93 	bl	80082b6 <__sfputs_r>
 8008390:	3001      	adds	r0, #1
 8008392:	f000 80aa 	beq.w	80084ea <_vfiprintf_r+0x20e>
 8008396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008398:	445a      	add	r2, fp
 800839a:	9209      	str	r2, [sp, #36]	; 0x24
 800839c:	f89a 3000 	ldrb.w	r3, [sl]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 80a2 	beq.w	80084ea <_vfiprintf_r+0x20e>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b0:	f10a 0a01 	add.w	sl, sl, #1
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083bc:	931a      	str	r3, [sp, #104]	; 0x68
 80083be:	4654      	mov	r4, sl
 80083c0:	2205      	movs	r2, #5
 80083c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c6:	4858      	ldr	r0, [pc, #352]	; (8008528 <_vfiprintf_r+0x24c>)
 80083c8:	f7f7 ff3a 	bl	8000240 <memchr>
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	b9d8      	cbnz	r0, 8008408 <_vfiprintf_r+0x12c>
 80083d0:	06d1      	lsls	r1, r2, #27
 80083d2:	bf44      	itt	mi
 80083d4:	2320      	movmi	r3, #32
 80083d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083da:	0713      	lsls	r3, r2, #28
 80083dc:	bf44      	itt	mi
 80083de:	232b      	movmi	r3, #43	; 0x2b
 80083e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e4:	f89a 3000 	ldrb.w	r3, [sl]
 80083e8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ea:	d015      	beq.n	8008418 <_vfiprintf_r+0x13c>
 80083ec:	9a07      	ldr	r2, [sp, #28]
 80083ee:	4654      	mov	r4, sl
 80083f0:	2000      	movs	r0, #0
 80083f2:	f04f 0c0a 	mov.w	ip, #10
 80083f6:	4621      	mov	r1, r4
 80083f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fc:	3b30      	subs	r3, #48	; 0x30
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d94e      	bls.n	80084a0 <_vfiprintf_r+0x1c4>
 8008402:	b1b0      	cbz	r0, 8008432 <_vfiprintf_r+0x156>
 8008404:	9207      	str	r2, [sp, #28]
 8008406:	e014      	b.n	8008432 <_vfiprintf_r+0x156>
 8008408:	eba0 0308 	sub.w	r3, r0, r8
 800840c:	fa09 f303 	lsl.w	r3, r9, r3
 8008410:	4313      	orrs	r3, r2
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	46a2      	mov	sl, r4
 8008416:	e7d2      	b.n	80083be <_vfiprintf_r+0xe2>
 8008418:	9b03      	ldr	r3, [sp, #12]
 800841a:	1d19      	adds	r1, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	9103      	str	r1, [sp, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	bfbb      	ittet	lt
 8008424:	425b      	neglt	r3, r3
 8008426:	f042 0202 	orrlt.w	r2, r2, #2
 800842a:	9307      	strge	r3, [sp, #28]
 800842c:	9307      	strlt	r3, [sp, #28]
 800842e:	bfb8      	it	lt
 8008430:	9204      	strlt	r2, [sp, #16]
 8008432:	7823      	ldrb	r3, [r4, #0]
 8008434:	2b2e      	cmp	r3, #46	; 0x2e
 8008436:	d10c      	bne.n	8008452 <_vfiprintf_r+0x176>
 8008438:	7863      	ldrb	r3, [r4, #1]
 800843a:	2b2a      	cmp	r3, #42	; 0x2a
 800843c:	d135      	bne.n	80084aa <_vfiprintf_r+0x1ce>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	1d1a      	adds	r2, r3, #4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	9203      	str	r2, [sp, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfb8      	it	lt
 800844a:	f04f 33ff 	movlt.w	r3, #4294967295
 800844e:	3402      	adds	r4, #2
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008538 <_vfiprintf_r+0x25c>
 8008456:	7821      	ldrb	r1, [r4, #0]
 8008458:	2203      	movs	r2, #3
 800845a:	4650      	mov	r0, sl
 800845c:	f7f7 fef0 	bl	8000240 <memchr>
 8008460:	b140      	cbz	r0, 8008474 <_vfiprintf_r+0x198>
 8008462:	2340      	movs	r3, #64	; 0x40
 8008464:	eba0 000a 	sub.w	r0, r0, sl
 8008468:	fa03 f000 	lsl.w	r0, r3, r0
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	4303      	orrs	r3, r0
 8008470:	3401      	adds	r4, #1
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008478:	482c      	ldr	r0, [pc, #176]	; (800852c <_vfiprintf_r+0x250>)
 800847a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800847e:	2206      	movs	r2, #6
 8008480:	f7f7 fede 	bl	8000240 <memchr>
 8008484:	2800      	cmp	r0, #0
 8008486:	d03f      	beq.n	8008508 <_vfiprintf_r+0x22c>
 8008488:	4b29      	ldr	r3, [pc, #164]	; (8008530 <_vfiprintf_r+0x254>)
 800848a:	bb1b      	cbnz	r3, 80084d4 <_vfiprintf_r+0x1f8>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	3307      	adds	r3, #7
 8008490:	f023 0307 	bic.w	r3, r3, #7
 8008494:	3308      	adds	r3, #8
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849a:	443b      	add	r3, r7
 800849c:	9309      	str	r3, [sp, #36]	; 0x24
 800849e:	e767      	b.n	8008370 <_vfiprintf_r+0x94>
 80084a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a4:	460c      	mov	r4, r1
 80084a6:	2001      	movs	r0, #1
 80084a8:	e7a5      	b.n	80083f6 <_vfiprintf_r+0x11a>
 80084aa:	2300      	movs	r3, #0
 80084ac:	3401      	adds	r4, #1
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f04f 0c0a 	mov.w	ip, #10
 80084b6:	4620      	mov	r0, r4
 80084b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084bc:	3a30      	subs	r2, #48	; 0x30
 80084be:	2a09      	cmp	r2, #9
 80084c0:	d903      	bls.n	80084ca <_vfiprintf_r+0x1ee>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0c5      	beq.n	8008452 <_vfiprintf_r+0x176>
 80084c6:	9105      	str	r1, [sp, #20]
 80084c8:	e7c3      	b.n	8008452 <_vfiprintf_r+0x176>
 80084ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ce:	4604      	mov	r4, r0
 80084d0:	2301      	movs	r3, #1
 80084d2:	e7f0      	b.n	80084b6 <_vfiprintf_r+0x1da>
 80084d4:	ab03      	add	r3, sp, #12
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	462a      	mov	r2, r5
 80084da:	4b16      	ldr	r3, [pc, #88]	; (8008534 <_vfiprintf_r+0x258>)
 80084dc:	a904      	add	r1, sp, #16
 80084de:	4630      	mov	r0, r6
 80084e0:	f3af 8000 	nop.w
 80084e4:	4607      	mov	r7, r0
 80084e6:	1c78      	adds	r0, r7, #1
 80084e8:	d1d6      	bne.n	8008498 <_vfiprintf_r+0x1bc>
 80084ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ec:	07d9      	lsls	r1, r3, #31
 80084ee:	d405      	bmi.n	80084fc <_vfiprintf_r+0x220>
 80084f0:	89ab      	ldrh	r3, [r5, #12]
 80084f2:	059a      	lsls	r2, r3, #22
 80084f4:	d402      	bmi.n	80084fc <_vfiprintf_r+0x220>
 80084f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f8:	f7ff fe31 	bl	800815e <__retarget_lock_release_recursive>
 80084fc:	89ab      	ldrh	r3, [r5, #12]
 80084fe:	065b      	lsls	r3, r3, #25
 8008500:	f53f af12 	bmi.w	8008328 <_vfiprintf_r+0x4c>
 8008504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008506:	e711      	b.n	800832c <_vfiprintf_r+0x50>
 8008508:	ab03      	add	r3, sp, #12
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	462a      	mov	r2, r5
 800850e:	4b09      	ldr	r3, [pc, #36]	; (8008534 <_vfiprintf_r+0x258>)
 8008510:	a904      	add	r1, sp, #16
 8008512:	4630      	mov	r0, r6
 8008514:	f000 f880 	bl	8008618 <_printf_i>
 8008518:	e7e4      	b.n	80084e4 <_vfiprintf_r+0x208>
 800851a:	bf00      	nop
 800851c:	08008ee4 	.word	0x08008ee4
 8008520:	08008f04 	.word	0x08008f04
 8008524:	08008ec4 	.word	0x08008ec4
 8008528:	08008f24 	.word	0x08008f24
 800852c:	08008f2e 	.word	0x08008f2e
 8008530:	00000000 	.word	0x00000000
 8008534:	080082b7 	.word	0x080082b7
 8008538:	08008f2a 	.word	0x08008f2a

0800853c <_printf_common>:
 800853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	4616      	mov	r6, r2
 8008542:	4699      	mov	r9, r3
 8008544:	688a      	ldr	r2, [r1, #8]
 8008546:	690b      	ldr	r3, [r1, #16]
 8008548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800854c:	4293      	cmp	r3, r2
 800854e:	bfb8      	it	lt
 8008550:	4613      	movlt	r3, r2
 8008552:	6033      	str	r3, [r6, #0]
 8008554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008558:	4607      	mov	r7, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b10a      	cbz	r2, 8008562 <_printf_common+0x26>
 800855e:	3301      	adds	r3, #1
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	0699      	lsls	r1, r3, #26
 8008566:	bf42      	ittt	mi
 8008568:	6833      	ldrmi	r3, [r6, #0]
 800856a:	3302      	addmi	r3, #2
 800856c:	6033      	strmi	r3, [r6, #0]
 800856e:	6825      	ldr	r5, [r4, #0]
 8008570:	f015 0506 	ands.w	r5, r5, #6
 8008574:	d106      	bne.n	8008584 <_printf_common+0x48>
 8008576:	f104 0a19 	add.w	sl, r4, #25
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	6832      	ldr	r2, [r6, #0]
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	42ab      	cmp	r3, r5
 8008582:	dc26      	bgt.n	80085d2 <_printf_common+0x96>
 8008584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008588:	1e13      	subs	r3, r2, #0
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	bf18      	it	ne
 800858e:	2301      	movne	r3, #1
 8008590:	0692      	lsls	r2, r2, #26
 8008592:	d42b      	bmi.n	80085ec <_printf_common+0xb0>
 8008594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008598:	4649      	mov	r1, r9
 800859a:	4638      	mov	r0, r7
 800859c:	47c0      	blx	r8
 800859e:	3001      	adds	r0, #1
 80085a0:	d01e      	beq.n	80085e0 <_printf_common+0xa4>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	68e5      	ldr	r5, [r4, #12]
 80085a6:	6832      	ldr	r2, [r6, #0]
 80085a8:	f003 0306 	and.w	r3, r3, #6
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	bf08      	it	eq
 80085b0:	1aad      	subeq	r5, r5, r2
 80085b2:	68a3      	ldr	r3, [r4, #8]
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	bf0c      	ite	eq
 80085b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085bc:	2500      	movne	r5, #0
 80085be:	4293      	cmp	r3, r2
 80085c0:	bfc4      	itt	gt
 80085c2:	1a9b      	subgt	r3, r3, r2
 80085c4:	18ed      	addgt	r5, r5, r3
 80085c6:	2600      	movs	r6, #0
 80085c8:	341a      	adds	r4, #26
 80085ca:	42b5      	cmp	r5, r6
 80085cc:	d11a      	bne.n	8008604 <_printf_common+0xc8>
 80085ce:	2000      	movs	r0, #0
 80085d0:	e008      	b.n	80085e4 <_printf_common+0xa8>
 80085d2:	2301      	movs	r3, #1
 80085d4:	4652      	mov	r2, sl
 80085d6:	4649      	mov	r1, r9
 80085d8:	4638      	mov	r0, r7
 80085da:	47c0      	blx	r8
 80085dc:	3001      	adds	r0, #1
 80085de:	d103      	bne.n	80085e8 <_printf_common+0xac>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e8:	3501      	adds	r5, #1
 80085ea:	e7c6      	b.n	800857a <_printf_common+0x3e>
 80085ec:	18e1      	adds	r1, r4, r3
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	2030      	movs	r0, #48	; 0x30
 80085f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085f6:	4422      	add	r2, r4
 80085f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008600:	3302      	adds	r3, #2
 8008602:	e7c7      	b.n	8008594 <_printf_common+0x58>
 8008604:	2301      	movs	r3, #1
 8008606:	4622      	mov	r2, r4
 8008608:	4649      	mov	r1, r9
 800860a:	4638      	mov	r0, r7
 800860c:	47c0      	blx	r8
 800860e:	3001      	adds	r0, #1
 8008610:	d0e6      	beq.n	80085e0 <_printf_common+0xa4>
 8008612:	3601      	adds	r6, #1
 8008614:	e7d9      	b.n	80085ca <_printf_common+0x8e>
	...

08008618 <_printf_i>:
 8008618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	7e0f      	ldrb	r7, [r1, #24]
 800861e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008620:	2f78      	cmp	r7, #120	; 0x78
 8008622:	4691      	mov	r9, r2
 8008624:	4680      	mov	r8, r0
 8008626:	460c      	mov	r4, r1
 8008628:	469a      	mov	sl, r3
 800862a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800862e:	d807      	bhi.n	8008640 <_printf_i+0x28>
 8008630:	2f62      	cmp	r7, #98	; 0x62
 8008632:	d80a      	bhi.n	800864a <_printf_i+0x32>
 8008634:	2f00      	cmp	r7, #0
 8008636:	f000 80d8 	beq.w	80087ea <_printf_i+0x1d2>
 800863a:	2f58      	cmp	r7, #88	; 0x58
 800863c:	f000 80a3 	beq.w	8008786 <_printf_i+0x16e>
 8008640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008648:	e03a      	b.n	80086c0 <_printf_i+0xa8>
 800864a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800864e:	2b15      	cmp	r3, #21
 8008650:	d8f6      	bhi.n	8008640 <_printf_i+0x28>
 8008652:	a101      	add	r1, pc, #4	; (adr r1, 8008658 <_printf_i+0x40>)
 8008654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008658:	080086b1 	.word	0x080086b1
 800865c:	080086c5 	.word	0x080086c5
 8008660:	08008641 	.word	0x08008641
 8008664:	08008641 	.word	0x08008641
 8008668:	08008641 	.word	0x08008641
 800866c:	08008641 	.word	0x08008641
 8008670:	080086c5 	.word	0x080086c5
 8008674:	08008641 	.word	0x08008641
 8008678:	08008641 	.word	0x08008641
 800867c:	08008641 	.word	0x08008641
 8008680:	08008641 	.word	0x08008641
 8008684:	080087d1 	.word	0x080087d1
 8008688:	080086f5 	.word	0x080086f5
 800868c:	080087b3 	.word	0x080087b3
 8008690:	08008641 	.word	0x08008641
 8008694:	08008641 	.word	0x08008641
 8008698:	080087f3 	.word	0x080087f3
 800869c:	08008641 	.word	0x08008641
 80086a0:	080086f5 	.word	0x080086f5
 80086a4:	08008641 	.word	0x08008641
 80086a8:	08008641 	.word	0x08008641
 80086ac:	080087bb 	.word	0x080087bb
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	1d1a      	adds	r2, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	602a      	str	r2, [r5, #0]
 80086b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086c0:	2301      	movs	r3, #1
 80086c2:	e0a3      	b.n	800880c <_printf_i+0x1f4>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	6829      	ldr	r1, [r5, #0]
 80086c8:	0606      	lsls	r6, r0, #24
 80086ca:	f101 0304 	add.w	r3, r1, #4
 80086ce:	d50a      	bpl.n	80086e6 <_printf_i+0xce>
 80086d0:	680e      	ldr	r6, [r1, #0]
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	2e00      	cmp	r6, #0
 80086d6:	da03      	bge.n	80086e0 <_printf_i+0xc8>
 80086d8:	232d      	movs	r3, #45	; 0x2d
 80086da:	4276      	negs	r6, r6
 80086dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e0:	485e      	ldr	r0, [pc, #376]	; (800885c <_printf_i+0x244>)
 80086e2:	230a      	movs	r3, #10
 80086e4:	e019      	b.n	800871a <_printf_i+0x102>
 80086e6:	680e      	ldr	r6, [r1, #0]
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086ee:	bf18      	it	ne
 80086f0:	b236      	sxthne	r6, r6
 80086f2:	e7ef      	b.n	80086d4 <_printf_i+0xbc>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	6820      	ldr	r0, [r4, #0]
 80086f8:	1d19      	adds	r1, r3, #4
 80086fa:	6029      	str	r1, [r5, #0]
 80086fc:	0601      	lsls	r1, r0, #24
 80086fe:	d501      	bpl.n	8008704 <_printf_i+0xec>
 8008700:	681e      	ldr	r6, [r3, #0]
 8008702:	e002      	b.n	800870a <_printf_i+0xf2>
 8008704:	0646      	lsls	r6, r0, #25
 8008706:	d5fb      	bpl.n	8008700 <_printf_i+0xe8>
 8008708:	881e      	ldrh	r6, [r3, #0]
 800870a:	4854      	ldr	r0, [pc, #336]	; (800885c <_printf_i+0x244>)
 800870c:	2f6f      	cmp	r7, #111	; 0x6f
 800870e:	bf0c      	ite	eq
 8008710:	2308      	moveq	r3, #8
 8008712:	230a      	movne	r3, #10
 8008714:	2100      	movs	r1, #0
 8008716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800871a:	6865      	ldr	r5, [r4, #4]
 800871c:	60a5      	str	r5, [r4, #8]
 800871e:	2d00      	cmp	r5, #0
 8008720:	bfa2      	ittt	ge
 8008722:	6821      	ldrge	r1, [r4, #0]
 8008724:	f021 0104 	bicge.w	r1, r1, #4
 8008728:	6021      	strge	r1, [r4, #0]
 800872a:	b90e      	cbnz	r6, 8008730 <_printf_i+0x118>
 800872c:	2d00      	cmp	r5, #0
 800872e:	d04d      	beq.n	80087cc <_printf_i+0x1b4>
 8008730:	4615      	mov	r5, r2
 8008732:	fbb6 f1f3 	udiv	r1, r6, r3
 8008736:	fb03 6711 	mls	r7, r3, r1, r6
 800873a:	5dc7      	ldrb	r7, [r0, r7]
 800873c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008740:	4637      	mov	r7, r6
 8008742:	42bb      	cmp	r3, r7
 8008744:	460e      	mov	r6, r1
 8008746:	d9f4      	bls.n	8008732 <_printf_i+0x11a>
 8008748:	2b08      	cmp	r3, #8
 800874a:	d10b      	bne.n	8008764 <_printf_i+0x14c>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	07de      	lsls	r6, r3, #31
 8008750:	d508      	bpl.n	8008764 <_printf_i+0x14c>
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	6861      	ldr	r1, [r4, #4]
 8008756:	4299      	cmp	r1, r3
 8008758:	bfde      	ittt	le
 800875a:	2330      	movle	r3, #48	; 0x30
 800875c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008760:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008764:	1b52      	subs	r2, r2, r5
 8008766:	6122      	str	r2, [r4, #16]
 8008768:	f8cd a000 	str.w	sl, [sp]
 800876c:	464b      	mov	r3, r9
 800876e:	aa03      	add	r2, sp, #12
 8008770:	4621      	mov	r1, r4
 8008772:	4640      	mov	r0, r8
 8008774:	f7ff fee2 	bl	800853c <_printf_common>
 8008778:	3001      	adds	r0, #1
 800877a:	d14c      	bne.n	8008816 <_printf_i+0x1fe>
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	b004      	add	sp, #16
 8008782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008786:	4835      	ldr	r0, [pc, #212]	; (800885c <_printf_i+0x244>)
 8008788:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800878c:	6829      	ldr	r1, [r5, #0]
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	f851 6b04 	ldr.w	r6, [r1], #4
 8008794:	6029      	str	r1, [r5, #0]
 8008796:	061d      	lsls	r5, r3, #24
 8008798:	d514      	bpl.n	80087c4 <_printf_i+0x1ac>
 800879a:	07df      	lsls	r7, r3, #31
 800879c:	bf44      	itt	mi
 800879e:	f043 0320 	orrmi.w	r3, r3, #32
 80087a2:	6023      	strmi	r3, [r4, #0]
 80087a4:	b91e      	cbnz	r6, 80087ae <_printf_i+0x196>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	f023 0320 	bic.w	r3, r3, #32
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	2310      	movs	r3, #16
 80087b0:	e7b0      	b.n	8008714 <_printf_i+0xfc>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	f043 0320 	orr.w	r3, r3, #32
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	2378      	movs	r3, #120	; 0x78
 80087bc:	4828      	ldr	r0, [pc, #160]	; (8008860 <_printf_i+0x248>)
 80087be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087c2:	e7e3      	b.n	800878c <_printf_i+0x174>
 80087c4:	0659      	lsls	r1, r3, #25
 80087c6:	bf48      	it	mi
 80087c8:	b2b6      	uxthmi	r6, r6
 80087ca:	e7e6      	b.n	800879a <_printf_i+0x182>
 80087cc:	4615      	mov	r5, r2
 80087ce:	e7bb      	b.n	8008748 <_printf_i+0x130>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	6826      	ldr	r6, [r4, #0]
 80087d4:	6961      	ldr	r1, [r4, #20]
 80087d6:	1d18      	adds	r0, r3, #4
 80087d8:	6028      	str	r0, [r5, #0]
 80087da:	0635      	lsls	r5, r6, #24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	d501      	bpl.n	80087e4 <_printf_i+0x1cc>
 80087e0:	6019      	str	r1, [r3, #0]
 80087e2:	e002      	b.n	80087ea <_printf_i+0x1d2>
 80087e4:	0670      	lsls	r0, r6, #25
 80087e6:	d5fb      	bpl.n	80087e0 <_printf_i+0x1c8>
 80087e8:	8019      	strh	r1, [r3, #0]
 80087ea:	2300      	movs	r3, #0
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	4615      	mov	r5, r2
 80087f0:	e7ba      	b.n	8008768 <_printf_i+0x150>
 80087f2:	682b      	ldr	r3, [r5, #0]
 80087f4:	1d1a      	adds	r2, r3, #4
 80087f6:	602a      	str	r2, [r5, #0]
 80087f8:	681d      	ldr	r5, [r3, #0]
 80087fa:	6862      	ldr	r2, [r4, #4]
 80087fc:	2100      	movs	r1, #0
 80087fe:	4628      	mov	r0, r5
 8008800:	f7f7 fd1e 	bl	8000240 <memchr>
 8008804:	b108      	cbz	r0, 800880a <_printf_i+0x1f2>
 8008806:	1b40      	subs	r0, r0, r5
 8008808:	6060      	str	r0, [r4, #4]
 800880a:	6863      	ldr	r3, [r4, #4]
 800880c:	6123      	str	r3, [r4, #16]
 800880e:	2300      	movs	r3, #0
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008814:	e7a8      	b.n	8008768 <_printf_i+0x150>
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	462a      	mov	r2, r5
 800881a:	4649      	mov	r1, r9
 800881c:	4640      	mov	r0, r8
 800881e:	47d0      	blx	sl
 8008820:	3001      	adds	r0, #1
 8008822:	d0ab      	beq.n	800877c <_printf_i+0x164>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	079b      	lsls	r3, r3, #30
 8008828:	d413      	bmi.n	8008852 <_printf_i+0x23a>
 800882a:	68e0      	ldr	r0, [r4, #12]
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	4298      	cmp	r0, r3
 8008830:	bfb8      	it	lt
 8008832:	4618      	movlt	r0, r3
 8008834:	e7a4      	b.n	8008780 <_printf_i+0x168>
 8008836:	2301      	movs	r3, #1
 8008838:	4632      	mov	r2, r6
 800883a:	4649      	mov	r1, r9
 800883c:	4640      	mov	r0, r8
 800883e:	47d0      	blx	sl
 8008840:	3001      	adds	r0, #1
 8008842:	d09b      	beq.n	800877c <_printf_i+0x164>
 8008844:	3501      	adds	r5, #1
 8008846:	68e3      	ldr	r3, [r4, #12]
 8008848:	9903      	ldr	r1, [sp, #12]
 800884a:	1a5b      	subs	r3, r3, r1
 800884c:	42ab      	cmp	r3, r5
 800884e:	dcf2      	bgt.n	8008836 <_printf_i+0x21e>
 8008850:	e7eb      	b.n	800882a <_printf_i+0x212>
 8008852:	2500      	movs	r5, #0
 8008854:	f104 0619 	add.w	r6, r4, #25
 8008858:	e7f5      	b.n	8008846 <_printf_i+0x22e>
 800885a:	bf00      	nop
 800885c:	08008f35 	.word	0x08008f35
 8008860:	08008f46 	.word	0x08008f46

08008864 <_sbrk_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d06      	ldr	r5, [pc, #24]	; (8008880 <_sbrk_r+0x1c>)
 8008868:	2300      	movs	r3, #0
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	f7fa f8b8 	bl	80029e4 <_sbrk>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_sbrk_r+0x1a>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_sbrk_r+0x1a>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	2000081c 	.word	0x2000081c

08008884 <__sread>:
 8008884:	b510      	push	{r4, lr}
 8008886:	460c      	mov	r4, r1
 8008888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888c:	f000 fab2 	bl	8008df4 <_read_r>
 8008890:	2800      	cmp	r0, #0
 8008892:	bfab      	itete	ge
 8008894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008896:	89a3      	ldrhlt	r3, [r4, #12]
 8008898:	181b      	addge	r3, r3, r0
 800889a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800889e:	bfac      	ite	ge
 80088a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088a2:	81a3      	strhlt	r3, [r4, #12]
 80088a4:	bd10      	pop	{r4, pc}

080088a6 <__swrite>:
 80088a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	461f      	mov	r7, r3
 80088ac:	898b      	ldrh	r3, [r1, #12]
 80088ae:	05db      	lsls	r3, r3, #23
 80088b0:	4605      	mov	r5, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	4616      	mov	r6, r2
 80088b6:	d505      	bpl.n	80088c4 <__swrite+0x1e>
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	2302      	movs	r3, #2
 80088be:	2200      	movs	r2, #0
 80088c0:	f000 f9c8 	bl	8008c54 <_lseek_r>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	4632      	mov	r2, r6
 80088d2:	463b      	mov	r3, r7
 80088d4:	4628      	mov	r0, r5
 80088d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088da:	f000 b869 	b.w	80089b0 <_write_r>

080088de <__sseek>:
 80088de:	b510      	push	{r4, lr}
 80088e0:	460c      	mov	r4, r1
 80088e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e6:	f000 f9b5 	bl	8008c54 <_lseek_r>
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	bf15      	itete	ne
 80088f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088fa:	81a3      	strheq	r3, [r4, #12]
 80088fc:	bf18      	it	ne
 80088fe:	81a3      	strhne	r3, [r4, #12]
 8008900:	bd10      	pop	{r4, pc}

08008902 <__sclose>:
 8008902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008906:	f000 b8d3 	b.w	8008ab0 <_close_r>
	...

0800890c <__swbuf_r>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	460e      	mov	r6, r1
 8008910:	4614      	mov	r4, r2
 8008912:	4605      	mov	r5, r0
 8008914:	b118      	cbz	r0, 800891e <__swbuf_r+0x12>
 8008916:	6983      	ldr	r3, [r0, #24]
 8008918:	b90b      	cbnz	r3, 800891e <__swbuf_r+0x12>
 800891a:	f7ff fb81 	bl	8008020 <__sinit>
 800891e:	4b21      	ldr	r3, [pc, #132]	; (80089a4 <__swbuf_r+0x98>)
 8008920:	429c      	cmp	r4, r3
 8008922:	d12b      	bne.n	800897c <__swbuf_r+0x70>
 8008924:	686c      	ldr	r4, [r5, #4]
 8008926:	69a3      	ldr	r3, [r4, #24]
 8008928:	60a3      	str	r3, [r4, #8]
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	071a      	lsls	r2, r3, #28
 800892e:	d52f      	bpl.n	8008990 <__swbuf_r+0x84>
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	b36b      	cbz	r3, 8008990 <__swbuf_r+0x84>
 8008934:	6923      	ldr	r3, [r4, #16]
 8008936:	6820      	ldr	r0, [r4, #0]
 8008938:	1ac0      	subs	r0, r0, r3
 800893a:	6963      	ldr	r3, [r4, #20]
 800893c:	b2f6      	uxtb	r6, r6
 800893e:	4283      	cmp	r3, r0
 8008940:	4637      	mov	r7, r6
 8008942:	dc04      	bgt.n	800894e <__swbuf_r+0x42>
 8008944:	4621      	mov	r1, r4
 8008946:	4628      	mov	r0, r5
 8008948:	f000 f948 	bl	8008bdc <_fflush_r>
 800894c:	bb30      	cbnz	r0, 800899c <__swbuf_r+0x90>
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	3b01      	subs	r3, #1
 8008952:	60a3      	str	r3, [r4, #8]
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	6022      	str	r2, [r4, #0]
 800895a:	701e      	strb	r6, [r3, #0]
 800895c:	6963      	ldr	r3, [r4, #20]
 800895e:	3001      	adds	r0, #1
 8008960:	4283      	cmp	r3, r0
 8008962:	d004      	beq.n	800896e <__swbuf_r+0x62>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	07db      	lsls	r3, r3, #31
 8008968:	d506      	bpl.n	8008978 <__swbuf_r+0x6c>
 800896a:	2e0a      	cmp	r6, #10
 800896c:	d104      	bne.n	8008978 <__swbuf_r+0x6c>
 800896e:	4621      	mov	r1, r4
 8008970:	4628      	mov	r0, r5
 8008972:	f000 f933 	bl	8008bdc <_fflush_r>
 8008976:	b988      	cbnz	r0, 800899c <__swbuf_r+0x90>
 8008978:	4638      	mov	r0, r7
 800897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897c:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <__swbuf_r+0x9c>)
 800897e:	429c      	cmp	r4, r3
 8008980:	d101      	bne.n	8008986 <__swbuf_r+0x7a>
 8008982:	68ac      	ldr	r4, [r5, #8]
 8008984:	e7cf      	b.n	8008926 <__swbuf_r+0x1a>
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <__swbuf_r+0xa0>)
 8008988:	429c      	cmp	r4, r3
 800898a:	bf08      	it	eq
 800898c:	68ec      	ldreq	r4, [r5, #12]
 800898e:	e7ca      	b.n	8008926 <__swbuf_r+0x1a>
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f000 f81e 	bl	80089d4 <__swsetup_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	d0cb      	beq.n	8008934 <__swbuf_r+0x28>
 800899c:	f04f 37ff 	mov.w	r7, #4294967295
 80089a0:	e7ea      	b.n	8008978 <__swbuf_r+0x6c>
 80089a2:	bf00      	nop
 80089a4:	08008ee4 	.word	0x08008ee4
 80089a8:	08008f04 	.word	0x08008f04
 80089ac:	08008ec4 	.word	0x08008ec4

080089b0 <_write_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d07      	ldr	r5, [pc, #28]	; (80089d0 <_write_r+0x20>)
 80089b4:	4604      	mov	r4, r0
 80089b6:	4608      	mov	r0, r1
 80089b8:	4611      	mov	r1, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	602a      	str	r2, [r5, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	f7f9 ffbf 	bl	8002942 <_write>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_write_r+0x1e>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_write_r+0x1e>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	2000081c 	.word	0x2000081c

080089d4 <__swsetup_r>:
 80089d4:	4b32      	ldr	r3, [pc, #200]	; (8008aa0 <__swsetup_r+0xcc>)
 80089d6:	b570      	push	{r4, r5, r6, lr}
 80089d8:	681d      	ldr	r5, [r3, #0]
 80089da:	4606      	mov	r6, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	b125      	cbz	r5, 80089ea <__swsetup_r+0x16>
 80089e0:	69ab      	ldr	r3, [r5, #24]
 80089e2:	b913      	cbnz	r3, 80089ea <__swsetup_r+0x16>
 80089e4:	4628      	mov	r0, r5
 80089e6:	f7ff fb1b 	bl	8008020 <__sinit>
 80089ea:	4b2e      	ldr	r3, [pc, #184]	; (8008aa4 <__swsetup_r+0xd0>)
 80089ec:	429c      	cmp	r4, r3
 80089ee:	d10f      	bne.n	8008a10 <__swsetup_r+0x3c>
 80089f0:	686c      	ldr	r4, [r5, #4]
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089f8:	0719      	lsls	r1, r3, #28
 80089fa:	d42c      	bmi.n	8008a56 <__swsetup_r+0x82>
 80089fc:	06dd      	lsls	r5, r3, #27
 80089fe:	d411      	bmi.n	8008a24 <__swsetup_r+0x50>
 8008a00:	2309      	movs	r3, #9
 8008a02:	6033      	str	r3, [r6, #0]
 8008a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0e:	e03e      	b.n	8008a8e <__swsetup_r+0xba>
 8008a10:	4b25      	ldr	r3, [pc, #148]	; (8008aa8 <__swsetup_r+0xd4>)
 8008a12:	429c      	cmp	r4, r3
 8008a14:	d101      	bne.n	8008a1a <__swsetup_r+0x46>
 8008a16:	68ac      	ldr	r4, [r5, #8]
 8008a18:	e7eb      	b.n	80089f2 <__swsetup_r+0x1e>
 8008a1a:	4b24      	ldr	r3, [pc, #144]	; (8008aac <__swsetup_r+0xd8>)
 8008a1c:	429c      	cmp	r4, r3
 8008a1e:	bf08      	it	eq
 8008a20:	68ec      	ldreq	r4, [r5, #12]
 8008a22:	e7e6      	b.n	80089f2 <__swsetup_r+0x1e>
 8008a24:	0758      	lsls	r0, r3, #29
 8008a26:	d512      	bpl.n	8008a4e <__swsetup_r+0x7a>
 8008a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a2a:	b141      	cbz	r1, 8008a3e <__swsetup_r+0x6a>
 8008a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a30:	4299      	cmp	r1, r3
 8008a32:	d002      	beq.n	8008a3a <__swsetup_r+0x66>
 8008a34:	4630      	mov	r0, r6
 8008a36:	f000 f991 	bl	8008d5c <_free_r>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	2300      	movs	r3, #0
 8008a48:	6063      	str	r3, [r4, #4]
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	f043 0308 	orr.w	r3, r3, #8
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	b94b      	cbnz	r3, 8008a6e <__swsetup_r+0x9a>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a64:	d003      	beq.n	8008a6e <__swsetup_r+0x9a>
 8008a66:	4621      	mov	r1, r4
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 f92b 	bl	8008cc4 <__smakebuf_r>
 8008a6e:	89a0      	ldrh	r0, [r4, #12]
 8008a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a74:	f010 0301 	ands.w	r3, r0, #1
 8008a78:	d00a      	beq.n	8008a90 <__swsetup_r+0xbc>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60a3      	str	r3, [r4, #8]
 8008a7e:	6963      	ldr	r3, [r4, #20]
 8008a80:	425b      	negs	r3, r3
 8008a82:	61a3      	str	r3, [r4, #24]
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	b943      	cbnz	r3, 8008a9a <__swsetup_r+0xc6>
 8008a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a8c:	d1ba      	bne.n	8008a04 <__swsetup_r+0x30>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	0781      	lsls	r1, r0, #30
 8008a92:	bf58      	it	pl
 8008a94:	6963      	ldrpl	r3, [r4, #20]
 8008a96:	60a3      	str	r3, [r4, #8]
 8008a98:	e7f4      	b.n	8008a84 <__swsetup_r+0xb0>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	e7f7      	b.n	8008a8e <__swsetup_r+0xba>
 8008a9e:	bf00      	nop
 8008aa0:	20000014 	.word	0x20000014
 8008aa4:	08008ee4 	.word	0x08008ee4
 8008aa8:	08008f04 	.word	0x08008f04
 8008aac:	08008ec4 	.word	0x08008ec4

08008ab0 <_close_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d06      	ldr	r5, [pc, #24]	; (8008acc <_close_r+0x1c>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	f7f9 ff5d 	bl	800297a <_close>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_close_r+0x1a>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_close_r+0x1a>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	2000081c 	.word	0x2000081c

08008ad0 <__sflush_r>:
 8008ad0:	898a      	ldrh	r2, [r1, #12]
 8008ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	0710      	lsls	r0, r2, #28
 8008ada:	460c      	mov	r4, r1
 8008adc:	d458      	bmi.n	8008b90 <__sflush_r+0xc0>
 8008ade:	684b      	ldr	r3, [r1, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	dc05      	bgt.n	8008af0 <__sflush_r+0x20>
 8008ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dc02      	bgt.n	8008af0 <__sflush_r+0x20>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	d0f9      	beq.n	8008aea <__sflush_r+0x1a>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008afc:	682f      	ldr	r7, [r5, #0]
 8008afe:	602b      	str	r3, [r5, #0]
 8008b00:	d032      	beq.n	8008b68 <__sflush_r+0x98>
 8008b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	075a      	lsls	r2, r3, #29
 8008b08:	d505      	bpl.n	8008b16 <__sflush_r+0x46>
 8008b0a:	6863      	ldr	r3, [r4, #4]
 8008b0c:	1ac0      	subs	r0, r0, r3
 8008b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b10:	b10b      	cbz	r3, 8008b16 <__sflush_r+0x46>
 8008b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b14:	1ac0      	subs	r0, r0, r3
 8008b16:	2300      	movs	r3, #0
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b1c:	6a21      	ldr	r1, [r4, #32]
 8008b1e:	4628      	mov	r0, r5
 8008b20:	47b0      	blx	r6
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	d106      	bne.n	8008b36 <__sflush_r+0x66>
 8008b28:	6829      	ldr	r1, [r5, #0]
 8008b2a:	291d      	cmp	r1, #29
 8008b2c:	d82c      	bhi.n	8008b88 <__sflush_r+0xb8>
 8008b2e:	4a2a      	ldr	r2, [pc, #168]	; (8008bd8 <__sflush_r+0x108>)
 8008b30:	40ca      	lsrs	r2, r1
 8008b32:	07d6      	lsls	r6, r2, #31
 8008b34:	d528      	bpl.n	8008b88 <__sflush_r+0xb8>
 8008b36:	2200      	movs	r2, #0
 8008b38:	6062      	str	r2, [r4, #4]
 8008b3a:	04d9      	lsls	r1, r3, #19
 8008b3c:	6922      	ldr	r2, [r4, #16]
 8008b3e:	6022      	str	r2, [r4, #0]
 8008b40:	d504      	bpl.n	8008b4c <__sflush_r+0x7c>
 8008b42:	1c42      	adds	r2, r0, #1
 8008b44:	d101      	bne.n	8008b4a <__sflush_r+0x7a>
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	b903      	cbnz	r3, 8008b4c <__sflush_r+0x7c>
 8008b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b4e:	602f      	str	r7, [r5, #0]
 8008b50:	2900      	cmp	r1, #0
 8008b52:	d0ca      	beq.n	8008aea <__sflush_r+0x1a>
 8008b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b58:	4299      	cmp	r1, r3
 8008b5a:	d002      	beq.n	8008b62 <__sflush_r+0x92>
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 f8fd 	bl	8008d5c <_free_r>
 8008b62:	2000      	movs	r0, #0
 8008b64:	6360      	str	r0, [r4, #52]	; 0x34
 8008b66:	e7c1      	b.n	8008aec <__sflush_r+0x1c>
 8008b68:	6a21      	ldr	r1, [r4, #32]
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b0      	blx	r6
 8008b70:	1c41      	adds	r1, r0, #1
 8008b72:	d1c7      	bne.n	8008b04 <__sflush_r+0x34>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0c4      	beq.n	8008b04 <__sflush_r+0x34>
 8008b7a:	2b1d      	cmp	r3, #29
 8008b7c:	d001      	beq.n	8008b82 <__sflush_r+0xb2>
 8008b7e:	2b16      	cmp	r3, #22
 8008b80:	d101      	bne.n	8008b86 <__sflush_r+0xb6>
 8008b82:	602f      	str	r7, [r5, #0]
 8008b84:	e7b1      	b.n	8008aea <__sflush_r+0x1a>
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	e7ad      	b.n	8008aec <__sflush_r+0x1c>
 8008b90:	690f      	ldr	r7, [r1, #16]
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	d0a9      	beq.n	8008aea <__sflush_r+0x1a>
 8008b96:	0793      	lsls	r3, r2, #30
 8008b98:	680e      	ldr	r6, [r1, #0]
 8008b9a:	bf08      	it	eq
 8008b9c:	694b      	ldreq	r3, [r1, #20]
 8008b9e:	600f      	str	r7, [r1, #0]
 8008ba0:	bf18      	it	ne
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	eba6 0807 	sub.w	r8, r6, r7
 8008ba8:	608b      	str	r3, [r1, #8]
 8008baa:	f1b8 0f00 	cmp.w	r8, #0
 8008bae:	dd9c      	ble.n	8008aea <__sflush_r+0x1a>
 8008bb0:	6a21      	ldr	r1, [r4, #32]
 8008bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bb4:	4643      	mov	r3, r8
 8008bb6:	463a      	mov	r2, r7
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b0      	blx	r6
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	dc06      	bgt.n	8008bce <__sflush_r+0xfe>
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bcc:	e78e      	b.n	8008aec <__sflush_r+0x1c>
 8008bce:	4407      	add	r7, r0
 8008bd0:	eba8 0800 	sub.w	r8, r8, r0
 8008bd4:	e7e9      	b.n	8008baa <__sflush_r+0xda>
 8008bd6:	bf00      	nop
 8008bd8:	20400001 	.word	0x20400001

08008bdc <_fflush_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	690b      	ldr	r3, [r1, #16]
 8008be0:	4605      	mov	r5, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	b913      	cbnz	r3, 8008bec <_fflush_r+0x10>
 8008be6:	2500      	movs	r5, #0
 8008be8:	4628      	mov	r0, r5
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	b118      	cbz	r0, 8008bf6 <_fflush_r+0x1a>
 8008bee:	6983      	ldr	r3, [r0, #24]
 8008bf0:	b90b      	cbnz	r3, 8008bf6 <_fflush_r+0x1a>
 8008bf2:	f7ff fa15 	bl	8008020 <__sinit>
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <_fflush_r+0x6c>)
 8008bf8:	429c      	cmp	r4, r3
 8008bfa:	d11b      	bne.n	8008c34 <_fflush_r+0x58>
 8008bfc:	686c      	ldr	r4, [r5, #4]
 8008bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0ef      	beq.n	8008be6 <_fflush_r+0xa>
 8008c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c08:	07d0      	lsls	r0, r2, #31
 8008c0a:	d404      	bmi.n	8008c16 <_fflush_r+0x3a>
 8008c0c:	0599      	lsls	r1, r3, #22
 8008c0e:	d402      	bmi.n	8008c16 <_fflush_r+0x3a>
 8008c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c12:	f7ff faa3 	bl	800815c <__retarget_lock_acquire_recursive>
 8008c16:	4628      	mov	r0, r5
 8008c18:	4621      	mov	r1, r4
 8008c1a:	f7ff ff59 	bl	8008ad0 <__sflush_r>
 8008c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c20:	07da      	lsls	r2, r3, #31
 8008c22:	4605      	mov	r5, r0
 8008c24:	d4e0      	bmi.n	8008be8 <_fflush_r+0xc>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	059b      	lsls	r3, r3, #22
 8008c2a:	d4dd      	bmi.n	8008be8 <_fflush_r+0xc>
 8008c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c2e:	f7ff fa96 	bl	800815e <__retarget_lock_release_recursive>
 8008c32:	e7d9      	b.n	8008be8 <_fflush_r+0xc>
 8008c34:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <_fflush_r+0x70>)
 8008c36:	429c      	cmp	r4, r3
 8008c38:	d101      	bne.n	8008c3e <_fflush_r+0x62>
 8008c3a:	68ac      	ldr	r4, [r5, #8]
 8008c3c:	e7df      	b.n	8008bfe <_fflush_r+0x22>
 8008c3e:	4b04      	ldr	r3, [pc, #16]	; (8008c50 <_fflush_r+0x74>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	bf08      	it	eq
 8008c44:	68ec      	ldreq	r4, [r5, #12]
 8008c46:	e7da      	b.n	8008bfe <_fflush_r+0x22>
 8008c48:	08008ee4 	.word	0x08008ee4
 8008c4c:	08008f04 	.word	0x08008f04
 8008c50:	08008ec4 	.word	0x08008ec4

08008c54 <_lseek_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d07      	ldr	r5, [pc, #28]	; (8008c74 <_lseek_r+0x20>)
 8008c58:	4604      	mov	r4, r0
 8008c5a:	4608      	mov	r0, r1
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	2200      	movs	r2, #0
 8008c60:	602a      	str	r2, [r5, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	f7f9 feb0 	bl	80029c8 <_lseek>
 8008c68:	1c43      	adds	r3, r0, #1
 8008c6a:	d102      	bne.n	8008c72 <_lseek_r+0x1e>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	b103      	cbz	r3, 8008c72 <_lseek_r+0x1e>
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	2000081c 	.word	0x2000081c

08008c78 <__swhatbuf_r>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c80:	2900      	cmp	r1, #0
 8008c82:	b096      	sub	sp, #88	; 0x58
 8008c84:	4614      	mov	r4, r2
 8008c86:	461d      	mov	r5, r3
 8008c88:	da08      	bge.n	8008c9c <__swhatbuf_r+0x24>
 8008c8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	602a      	str	r2, [r5, #0]
 8008c92:	061a      	lsls	r2, r3, #24
 8008c94:	d410      	bmi.n	8008cb8 <__swhatbuf_r+0x40>
 8008c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9a:	e00e      	b.n	8008cba <__swhatbuf_r+0x42>
 8008c9c:	466a      	mov	r2, sp
 8008c9e:	f000 f8bb 	bl	8008e18 <_fstat_r>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	dbf1      	blt.n	8008c8a <__swhatbuf_r+0x12>
 8008ca6:	9a01      	ldr	r2, [sp, #4]
 8008ca8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cb0:	425a      	negs	r2, r3
 8008cb2:	415a      	adcs	r2, r3
 8008cb4:	602a      	str	r2, [r5, #0]
 8008cb6:	e7ee      	b.n	8008c96 <__swhatbuf_r+0x1e>
 8008cb8:	2340      	movs	r3, #64	; 0x40
 8008cba:	2000      	movs	r0, #0
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	b016      	add	sp, #88	; 0x58
 8008cc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cc4 <__smakebuf_r>:
 8008cc4:	898b      	ldrh	r3, [r1, #12]
 8008cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cc8:	079d      	lsls	r5, r3, #30
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	d507      	bpl.n	8008ce0 <__smakebuf_r+0x1c>
 8008cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	6163      	str	r3, [r4, #20]
 8008cdc:	b002      	add	sp, #8
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	ab01      	add	r3, sp, #4
 8008ce2:	466a      	mov	r2, sp
 8008ce4:	f7ff ffc8 	bl	8008c78 <__swhatbuf_r>
 8008ce8:	9900      	ldr	r1, [sp, #0]
 8008cea:	4605      	mov	r5, r0
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7ff fa57 	bl	80081a0 <_malloc_r>
 8008cf2:	b948      	cbnz	r0, 8008d08 <__smakebuf_r+0x44>
 8008cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf8:	059a      	lsls	r2, r3, #22
 8008cfa:	d4ef      	bmi.n	8008cdc <__smakebuf_r+0x18>
 8008cfc:	f023 0303 	bic.w	r3, r3, #3
 8008d00:	f043 0302 	orr.w	r3, r3, #2
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	e7e3      	b.n	8008cd0 <__smakebuf_r+0xc>
 8008d08:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <__smakebuf_r+0x7c>)
 8008d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	6020      	str	r0, [r4, #0]
 8008d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d14:	81a3      	strh	r3, [r4, #12]
 8008d16:	9b00      	ldr	r3, [sp, #0]
 8008d18:	6163      	str	r3, [r4, #20]
 8008d1a:	9b01      	ldr	r3, [sp, #4]
 8008d1c:	6120      	str	r0, [r4, #16]
 8008d1e:	b15b      	cbz	r3, 8008d38 <__smakebuf_r+0x74>
 8008d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d24:	4630      	mov	r0, r6
 8008d26:	f000 f889 	bl	8008e3c <_isatty_r>
 8008d2a:	b128      	cbz	r0, 8008d38 <__smakebuf_r+0x74>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	f023 0303 	bic.w	r3, r3, #3
 8008d32:	f043 0301 	orr.w	r3, r3, #1
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	89a0      	ldrh	r0, [r4, #12]
 8008d3a:	4305      	orrs	r5, r0
 8008d3c:	81a5      	strh	r5, [r4, #12]
 8008d3e:	e7cd      	b.n	8008cdc <__smakebuf_r+0x18>
 8008d40:	08007fb9 	.word	0x08007fb9

08008d44 <__malloc_lock>:
 8008d44:	4801      	ldr	r0, [pc, #4]	; (8008d4c <__malloc_lock+0x8>)
 8008d46:	f7ff ba09 	b.w	800815c <__retarget_lock_acquire_recursive>
 8008d4a:	bf00      	nop
 8008d4c:	20000810 	.word	0x20000810

08008d50 <__malloc_unlock>:
 8008d50:	4801      	ldr	r0, [pc, #4]	; (8008d58 <__malloc_unlock+0x8>)
 8008d52:	f7ff ba04 	b.w	800815e <__retarget_lock_release_recursive>
 8008d56:	bf00      	nop
 8008d58:	20000810 	.word	0x20000810

08008d5c <_free_r>:
 8008d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d5e:	2900      	cmp	r1, #0
 8008d60:	d044      	beq.n	8008dec <_free_r+0x90>
 8008d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d66:	9001      	str	r0, [sp, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d6e:	bfb8      	it	lt
 8008d70:	18e4      	addlt	r4, r4, r3
 8008d72:	f7ff ffe7 	bl	8008d44 <__malloc_lock>
 8008d76:	4a1e      	ldr	r2, [pc, #120]	; (8008df0 <_free_r+0x94>)
 8008d78:	9801      	ldr	r0, [sp, #4]
 8008d7a:	6813      	ldr	r3, [r2, #0]
 8008d7c:	b933      	cbnz	r3, 8008d8c <_free_r+0x30>
 8008d7e:	6063      	str	r3, [r4, #4]
 8008d80:	6014      	str	r4, [r2, #0]
 8008d82:	b003      	add	sp, #12
 8008d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d88:	f7ff bfe2 	b.w	8008d50 <__malloc_unlock>
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	d908      	bls.n	8008da2 <_free_r+0x46>
 8008d90:	6825      	ldr	r5, [r4, #0]
 8008d92:	1961      	adds	r1, r4, r5
 8008d94:	428b      	cmp	r3, r1
 8008d96:	bf01      	itttt	eq
 8008d98:	6819      	ldreq	r1, [r3, #0]
 8008d9a:	685b      	ldreq	r3, [r3, #4]
 8008d9c:	1949      	addeq	r1, r1, r5
 8008d9e:	6021      	streq	r1, [r4, #0]
 8008da0:	e7ed      	b.n	8008d7e <_free_r+0x22>
 8008da2:	461a      	mov	r2, r3
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	b10b      	cbz	r3, 8008dac <_free_r+0x50>
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	d9fa      	bls.n	8008da2 <_free_r+0x46>
 8008dac:	6811      	ldr	r1, [r2, #0]
 8008dae:	1855      	adds	r5, r2, r1
 8008db0:	42a5      	cmp	r5, r4
 8008db2:	d10b      	bne.n	8008dcc <_free_r+0x70>
 8008db4:	6824      	ldr	r4, [r4, #0]
 8008db6:	4421      	add	r1, r4
 8008db8:	1854      	adds	r4, r2, r1
 8008dba:	42a3      	cmp	r3, r4
 8008dbc:	6011      	str	r1, [r2, #0]
 8008dbe:	d1e0      	bne.n	8008d82 <_free_r+0x26>
 8008dc0:	681c      	ldr	r4, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	6053      	str	r3, [r2, #4]
 8008dc6:	4421      	add	r1, r4
 8008dc8:	6011      	str	r1, [r2, #0]
 8008dca:	e7da      	b.n	8008d82 <_free_r+0x26>
 8008dcc:	d902      	bls.n	8008dd4 <_free_r+0x78>
 8008dce:	230c      	movs	r3, #12
 8008dd0:	6003      	str	r3, [r0, #0]
 8008dd2:	e7d6      	b.n	8008d82 <_free_r+0x26>
 8008dd4:	6825      	ldr	r5, [r4, #0]
 8008dd6:	1961      	adds	r1, r4, r5
 8008dd8:	428b      	cmp	r3, r1
 8008dda:	bf04      	itt	eq
 8008ddc:	6819      	ldreq	r1, [r3, #0]
 8008dde:	685b      	ldreq	r3, [r3, #4]
 8008de0:	6063      	str	r3, [r4, #4]
 8008de2:	bf04      	itt	eq
 8008de4:	1949      	addeq	r1, r1, r5
 8008de6:	6021      	streq	r1, [r4, #0]
 8008de8:	6054      	str	r4, [r2, #4]
 8008dea:	e7ca      	b.n	8008d82 <_free_r+0x26>
 8008dec:	b003      	add	sp, #12
 8008dee:	bd30      	pop	{r4, r5, pc}
 8008df0:	20000814 	.word	0x20000814

08008df4 <_read_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	4d07      	ldr	r5, [pc, #28]	; (8008e14 <_read_r+0x20>)
 8008df8:	4604      	mov	r4, r0
 8008dfa:	4608      	mov	r0, r1
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	2200      	movs	r2, #0
 8008e00:	602a      	str	r2, [r5, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	f7f9 fd80 	bl	8002908 <_read>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_read_r+0x1e>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_read_r+0x1e>
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	2000081c 	.word	0x2000081c

08008e18 <_fstat_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d07      	ldr	r5, [pc, #28]	; (8008e38 <_fstat_r+0x20>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	4611      	mov	r1, r2
 8008e24:	602b      	str	r3, [r5, #0]
 8008e26:	f7f9 fdb4 	bl	8002992 <_fstat>
 8008e2a:	1c43      	adds	r3, r0, #1
 8008e2c:	d102      	bne.n	8008e34 <_fstat_r+0x1c>
 8008e2e:	682b      	ldr	r3, [r5, #0]
 8008e30:	b103      	cbz	r3, 8008e34 <_fstat_r+0x1c>
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	bd38      	pop	{r3, r4, r5, pc}
 8008e36:	bf00      	nop
 8008e38:	2000081c 	.word	0x2000081c

08008e3c <_isatty_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d06      	ldr	r5, [pc, #24]	; (8008e58 <_isatty_r+0x1c>)
 8008e40:	2300      	movs	r3, #0
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	f7f9 fdb3 	bl	80029b2 <_isatty>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_isatty_r+0x1a>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_isatty_r+0x1a>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	2000081c 	.word	0x2000081c

08008e5c <_init>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr

08008e68 <_fini>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	bf00      	nop
 8008e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6e:	bc08      	pop	{r3}
 8008e70:	469e      	mov	lr, r3
 8008e72:	4770      	bx	lr
